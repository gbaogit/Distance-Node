
DistanceNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a934  0800a934  00020330  2**0
                  CONTENTS
  4 .ARM          00000000  0800a934  0800a934  00020330  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a934  0800a934  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800a93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000330  0800ac6c  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800ac6c  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9d2  00000000  00000000  00020359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031bb  00000000  00000000  0003ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  0003dee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  0003f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b773  00000000  00000000  00040d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b645  00000000  00000000  0005c4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c66f  00000000  00000000  00077b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011418f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e78  00000000  00000000  001141e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000330 	.word	0x20000330
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a81c 	.word	0x0800a81c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000334 	.word	0x20000334
 8000148:	0800a81c 	.word	0x0800a81c

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f008 fe5d 	bl	8008e1c <HAL_UART_Transmit>
  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200005d8 	.word	0x200005d8

08000170 <setup_vl53l0x>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setup_vl53l0x(){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
printf("VL53L0X setup\n\r");
 8000176:	483b      	ldr	r0, [pc, #236]	; (8000264 <setup_vl53l0x+0xf4>)
 8000178:	f009 fbb4 	bl	80098e4 <iprintf>
//temperature calibration references
  uint8_t VhvSettings;
  uint8_t PhaseCal;

//instance
  Dev->I2cHandle = &hi2c1;
 800017c:	4b3a      	ldr	r3, [pc, #232]	; (8000268 <setup_vl53l0x+0xf8>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a3a      	ldr	r2, [pc, #232]	; (800026c <setup_vl53l0x+0xfc>)
 8000182:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev->I2cDevAddr = 0x52;
 8000186:	4b38      	ldr	r3, [pc, #224]	; (8000268 <setup_vl53l0x+0xf8>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	2252      	movs	r2, #82	; 0x52
 800018c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Disable XSHUT
 8000190:	2200      	movs	r2, #0
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4836      	ldr	r0, [pc, #216]	; (8000270 <setup_vl53l0x+0x100>)
 8000196:	f006 fd97 	bl	8006cc8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800019a:	2014      	movs	r0, #20
 800019c:	f005 fdea 	bl	8005d74 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // Enable XSHUT
 80001a0:	2201      	movs	r2, #1
 80001a2:	2140      	movs	r1, #64	; 0x40
 80001a4:	4832      	ldr	r0, [pc, #200]	; (8000270 <setup_vl53l0x+0x100>)
 80001a6:	f006 fd8f 	bl	8006cc8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80001aa:	2014      	movs	r0, #20
 80001ac:	f005 fde2 	bl	8005d74 <HAL_Delay>

  VL53L0X_WaitDeviceBooted( Dev );
 80001b0:	4b2d      	ldr	r3, [pc, #180]	; (8000268 <setup_vl53l0x+0xf8>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 f85d 	bl	8001274 <VL53L0X_WaitDeviceBooted>

//Initialize
  VL53L0X_DataInit( Dev );
 80001ba:	4b2b      	ldr	r3, [pc, #172]	; (8000268 <setup_vl53l0x+0xf8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd72 	bl	8000ca8 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 80001c4:	4b28      	ldr	r3, [pc, #160]	; (8000268 <setup_vl53l0x+0xf8>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fed1 	bl	8000f70 <VL53L0X_StaticInit>
//Calibration temperature + SPAD
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80001ce:	4b26      	ldr	r3, [pc, #152]	; (8000268 <setup_vl53l0x+0xf8>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	1c7a      	adds	r2, r7, #1
 80001d4:	1cb9      	adds	r1, r7, #2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fd66 	bl	8001ca8 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80001dc:	4b22      	ldr	r3, [pc, #136]	; (8000268 <setup_vl53l0x+0xf8>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	1cfa      	adds	r2, r7, #3
 80001e2:	1d39      	adds	r1, r7, #4
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 f9ed 	bl	80025c4 <VL53L0X_PerformRefSpadManagement>
//Mode
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80001ea:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <setup_vl53l0x+0xf8>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 f8dd 	bl	80013b0 <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80001f6:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <setup_vl53l0x+0xf8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2201      	movs	r2, #1
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fb4e 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000204:	4b18      	ldr	r3, [pc, #96]	; (8000268 <setup_vl53l0x+0xf8>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2201      	movs	r2, #1
 800020a:	2101      	movs	r1, #1
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fb47 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <setup_vl53l0x+0xf8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f641 1299 	movw	r2, #6553	; 0x1999
 800021a:	2101      	movs	r1, #1
 800021c:	4618      	mov	r0, r3
 800021e:	f001 fbed 	bl	80019fc <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <setup_vl53l0x+0xf8>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fbe5 	bl	80019fc <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <setup_vl53l0x+0xf8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800023a:	4618      	mov	r0, r3
 800023c:	f001 f913 	bl	8001466 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <setup_vl53l0x+0xf8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2212      	movs	r2, #18
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f001 f932 	bl	80014b2 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <setup_vl53l0x+0xf8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	220e      	movs	r2, #14
 8000254:	2101      	movs	r1, #1
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f92b 	bl	80014b2 <VL53L0X_SetVcselPulsePeriod>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	0800a834 	.word	0x0800a834
 8000268:	20000000 	.word	0x20000000
 800026c:	2000053c 	.word	0x2000053c
 8000270:	40011000 	.word	0x40011000

08000274 <HAL_ADC_ConvCpltCallback>:
//{
//
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	uint32_t distanceValue = HAL_ADC_GetValue(&hadc1);
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x2c>)
 800027e:	f005 fe75 	bl	8005f6c <HAL_ADC_GetValue>
 8000282:	60f8      	str	r0, [r7, #12]
	if ( hadc->Instance == ADC1)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x30>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d103      	bne.n	8000296 <HAL_ADC_ConvCpltCallback+0x22>
	{
		printf ("Distance : %d /n", distanceValue );
 800028e:	68f9      	ldr	r1, [r7, #12]
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000292:	f009 fb27 	bl	80098e4 <iprintf>
	}
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	200004e4 	.word	0x200004e4
 80002a4:	40012400 	.word	0x40012400
 80002a8:	0800a844 	.word	0x0800a844

080002ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <HAL_UART_RxCpltCallback+0x24>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d103      	bne.n	80002c6 <HAL_UART_RxCpltCallback+0x1a>
	{
		printf ("distance : %s\n", Rx_message);
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <HAL_UART_RxCpltCallback+0x28>)
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <HAL_UART_RxCpltCallback+0x2c>)
 80002c2:	f009 fb0f 	bl	80098e4 <iprintf>
//				printf("Turn Off Vl53l0xv2\n");
//				//HAL_GPIO_WritePin(GPIOA, XShut_Pin, GPIO_PIN_RESET);
//
//			}
//	}
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40013800 	.word	0x40013800
 80002d4:	2000034c 	.word	0x2000034c
 80002d8:	0800a858 	.word	0x0800a858

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f005 fce6 	bl	8005cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f822 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f9e4 	bl	80006b4 <MX_GPIO_Init>
  MX_CAN_Init();
 80002ec:	f000 f8d2 	bl	8000494 <MX_CAN_Init>
  MX_I2C1_Init();
 80002f0:	f000 f904 	bl	80004fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80002f4:	f000 f9b4 	bl	8000660 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80002f8:	f000 f92e 	bl	8000558 <MX_TIM1_Init>
  MX_ADC1_Init();
 80002fc:	f000 f86c 	bl	80003d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  setup_vl53l0x();
 8000300:	f7ff ff36 	bl	8000170 <setup_vl53l0x>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_ADC_Start_IT(&hadc1);

	  HAL_UART_Receive(&huart1, Rx_message, 10,100);
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	220a      	movs	r2, #10
 8000308:	4905      	ldr	r1, [pc, #20]	; (8000320 <main+0x44>)
 800030a:	4806      	ldr	r0, [pc, #24]	; (8000324 <main+0x48>)
 800030c:	f008 fe18 	bl	8008f40 <HAL_UART_Receive>
//	  {
//		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		  HAL_Delay(100);
//		  printf("Measure distance: %i\n\r", RangingData.RangeMilliMeter);
//	  }
	  printf("Rcv %s \r\n", Rx_message);
 8000310:	4903      	ldr	r1, [pc, #12]	; (8000320 <main+0x44>)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <main+0x4c>)
 8000314:	f009 fae6 	bl	80098e4 <iprintf>
	  HAL_Delay(100);
 8000318:	2064      	movs	r0, #100	; 0x64
 800031a:	f005 fd2b 	bl	8005d74 <HAL_Delay>
	  HAL_UART_Receive(&huart1, Rx_message, 10,100);
 800031e:	e7f1      	b.n	8000304 <main+0x28>
 8000320:	2000034c 	.word	0x2000034c
 8000324:	200005d8 	.word	0x200005d8
 8000328:	0800a868 	.word	0x0800a868

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	; 0x50
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f009 faca 	bl	80098d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000364:	2310      	movs	r3, #16
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	2302      	movs	r3, #2
 800036a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800036c:	2300      	movs	r3, #0
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f007 fc8a 	bl	8007c94 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000386:	f000 f9ed 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f007 fef7 	bl	8008198 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003b0:	f000 f9d8 	bl	8000764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b4:	2302      	movs	r3, #2
 80003b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80003b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f008 f881 	bl	80084c8 <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003cc:	f000 f9ca 	bl	8000764 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3750      	adds	r7, #80	; 0x50
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_ADC1_Init+0xb0>)
 80003fc:	4a23      	ldr	r2, [pc, #140]	; (800048c <MX_ADC1_Init+0xb4>)
 80003fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000408:	2200      	movs	r2, #0
 800040a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_ADC1_Init+0xb0>)
 800040e:	2200      	movs	r2, #0
 8000410:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000414:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_ADC1_Init+0xb0>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000422:	2201      	movs	r2, #1
 8000424:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000426:	4818      	ldr	r0, [pc, #96]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000428:	f005 fcc8 	bl	8005dbc <HAL_ADC_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8000432:	f000 f997 	bl	8000764 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_ADC1_Init+0xb8>)
 8000438:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8000442:	2302      	movs	r3, #2
 8000444:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 8000446:	2301      	movs	r3, #1
 8000448:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000452:	f005 ff5b 	bl	800630c <HAL_ADC_AnalogWDGConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800045c:	f000 f982 	bl	8000764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000460:	2302      	movs	r3, #2
 8000462:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000464:	2301      	movs	r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_ADC1_Init+0xb0>)
 8000472:	f005 fe53 	bl	800611c <HAL_ADC_ConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800047c:	f000 f972 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3728      	adds	r7, #40	; 0x28
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200004e4 	.word	0x200004e4
 800048c:	40012400 	.word	0x40012400
 8000490:	00800200 	.word	0x00800200

08000494 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MX_CAN_Init+0x60>)
 800049a:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <MX_CAN_Init+0x64>)
 800049c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_CAN_Init+0x60>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_CAN_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_CAN_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_CAN_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_CAN_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_CAN_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_CAN_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_CAN_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_CAN_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <MX_CAN_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_CAN_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_CAN_Init+0x60>)
 80004e2:	f005 ffb3 	bl	800644c <HAL_CAN_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f93a 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000514 	.word	0x20000514
 80004f8:	40006400 	.word	0x40006400

080004fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_I2C1_Init+0x50>)
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <MX_I2C1_Init+0x54>)
 8000504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_I2C1_Init+0x50>)
 8000508:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_I2C1_Init+0x58>)
 800050a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_I2C1_Init+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_I2C1_Init+0x50>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_I2C1_Init+0x50>)
 800051a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800051e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_I2C1_Init+0x50>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_I2C1_Init+0x50>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <MX_I2C1_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_I2C1_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_I2C1_Init+0x50>)
 800053a:	f006 fbdd 	bl	8006cf8 <HAL_I2C_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 f90e 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000053c 	.word	0x2000053c
 8000550:	40005400 	.word	0x40005400
 8000554:	000186a0 	.word	0x000186a0

08000558 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b092      	sub	sp, #72	; 0x48
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
 8000578:	615a      	str	r2, [r3, #20]
 800057a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2220      	movs	r2, #32
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f009 f9a6 	bl	80098d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000588:	4b33      	ldr	r3, [pc, #204]	; (8000658 <MX_TIM1_Init+0x100>)
 800058a:	4a34      	ldr	r2, [pc, #208]	; (800065c <MX_TIM1_Init+0x104>)
 800058c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <MX_TIM1_Init+0x100>)
 8000590:	2200      	movs	r2, #0
 8000592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000594:	4b30      	ldr	r3, [pc, #192]	; (8000658 <MX_TIM1_Init+0x100>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_TIM1_Init+0x100>)
 800059c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_TIM1_Init+0x100>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_TIM1_Init+0x100>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_TIM1_Init+0x100>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005b4:	4828      	ldr	r0, [pc, #160]	; (8000658 <MX_TIM1_Init+0x100>)
 80005b6:	f008 f83d 	bl	8008634 <HAL_TIM_PWM_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80005c0:	f000 f8d0 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005d0:	4619      	mov	r1, r3
 80005d2:	4821      	ldr	r0, [pc, #132]	; (8000658 <MX_TIM1_Init+0x100>)
 80005d4:	f008 fb26 	bl	8008c24 <HAL_TIMEx_MasterConfigSynchronization>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80005de:	f000 f8c1 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ee:	2300      	movs	r3, #0
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	4814      	ldr	r0, [pc, #80]	; (8000658 <MX_TIM1_Init+0x100>)
 8000608:	f008 f864 	bl	80086d4 <HAL_TIM_PWM_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000612:	f000 f8a7 	bl	8000764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800062a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <MX_TIM1_Init+0x100>)
 800063a:	f008 fb51 	bl	8008ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000644:	f000 f88e 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <MX_TIM1_Init+0x100>)
 800064a:	f000 f9af 	bl	80009ac <HAL_TIM_MspPostInit>

}
 800064e:	bf00      	nop
 8000650:	3748      	adds	r7, #72	; 0x48
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000590 	.word	0x20000590
 800065c:	40012c00 	.word	0x40012c00

08000660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART1_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000698:	f008 fb73 	bl	8008d82 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f85f 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200005d8 	.word	0x200005d8
 80006b0:	40013800 	.word	0x40013800

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xa8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a23      	ldr	r2, [pc, #140]	; (800075c <MX_GPIO_Init+0xa8>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_GPIO_Init+0xa8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_GPIO_Init+0xa8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <MX_GPIO_Init+0xa8>)
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_GPIO_Init+0xa8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_GPIO_Init+0xa8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_GPIO_Init+0xa8>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0xa8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0xa8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a11      	ldr	r2, [pc, #68]	; (800075c <MX_GPIO_Init+0xa8>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_GPIO_Init+0xa8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_GPIO_Init+0xac>)
 8000730:	f006 faca 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2302      	movs	r3, #2
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4619      	mov	r1, r3
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0xac>)
 800074e:	f006 f937 	bl	80069c0 <HAL_GPIO_Init>

}
 8000752:	bf00      	nop
 8000754:	3720      	adds	r7, #32
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	40011000 	.word	0x40011000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_MspInit+0x5c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_MspInit+0x5c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x5c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x5c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x60>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_MspInit+0x60>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010000 	.word	0x40010000

080007d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_ADC_MspInit+0x7c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d129      	bne.n	8000848 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_ADC_MspInit+0x80>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <HAL_ADC_MspInit+0x80>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_ADC_MspInit+0x80>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_ADC_MspInit+0x80>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <HAL_ADC_MspInit+0x80>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_ADC_MspInit+0x80>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000824:	2304      	movs	r3, #4
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000828:	2303      	movs	r3, #3
 800082a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <HAL_ADC_MspInit+0x84>)
 8000834:	f006 f8c4 	bl	80069c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2012      	movs	r0, #18
 800083e:	f005 ffd8 	bl	80067f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000842:	2012      	movs	r0, #18
 8000844:	f005 fff1 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40012400 	.word	0x40012400
 8000854:	40021000 	.word	0x40021000
 8000858:	40010800 	.word	0x40010800

0800085c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <HAL_CAN_MspInit+0x8c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d131      	bne.n	80008e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_CAN_MspInit+0x90>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <HAL_CAN_MspInit+0x90>)
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	61d3      	str	r3, [r2, #28]
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_CAN_MspInit+0x90>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_CAN_MspInit+0x90>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_CAN_MspInit+0x90>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_CAN_MspInit+0x90>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_CAN_MspInit+0x94>)
 80008c2:	f006 f87d 	bl	80069c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_CAN_MspInit+0x94>)
 80008dc:	f006 f870 	bl	80069c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40006400 	.word	0x40006400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <HAL_I2C_MspInit+0x70>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d123      	bne.n	800095c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_I2C_MspInit+0x74>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_I2C_MspInit+0x74>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_I2C_MspInit+0x74>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800092c:	23c0      	movs	r3, #192	; 0xc0
 800092e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000930:	2312      	movs	r3, #18
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_I2C_MspInit+0x78>)
 8000940:	f006 f83e 	bl	80069c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x74>)
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_I2C_MspInit+0x74>)
 800094a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094e:	61d3      	str	r3, [r2, #28]
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_I2C_MspInit+0x74>)
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	40021000 	.word	0x40021000
 800096c:	40010c00 	.word	0x40010c00

08000970 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_PWM_MspInit+0x34>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40012c00 	.word	0x40012c00
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_TIM_MspPostInit+0x5c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d118      	bne.n	80009fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_TIM_MspPostInit+0x60>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_TIM_MspPostInit+0x60>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_TIM_MspPostInit+0x60>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_TIM_MspPostInit+0x64>)
 80009fa:	f005 ffe1 	bl	80069c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <HAL_UART_MspInit+0x9c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d139      	bne.n	8000aa8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_UART_MspInit+0xa0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_UART_MspInit+0xa0>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_UART_MspInit+0xa0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0xa0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0xa0>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_UART_MspInit+0xa0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <HAL_UART_MspInit+0xa4>)
 8000a7a:	f005 ffa1 	bl	80069c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <HAL_UART_MspInit+0xa4>)
 8000a94:	f005 ff94 	bl	80069c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2025      	movs	r0, #37	; 0x25
 8000a9e:	f005 fea8 	bl	80067f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa2:	2025      	movs	r0, #37	; 0x25
 8000aa4:	f005 fec1 	bl	800682a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f005 f91b 	bl	8005d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <ADC1_2_IRQHandler+0x10>)
 8000b12:	f005 fa37 	bl	8005f84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200004e4 	.word	0x200004e4

08000b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <USART1_IRQHandler+0x10>)
 8000b26:	f008 faad 	bl	8009084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200005d8 	.word	0x200005d8

08000b34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e009      	b.n	8000b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fadf 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf1      	blt.n	8000b80 <_write+0x12>
  }
  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_close>:

int _close(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bcc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <_isatty>:

int _isatty(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f008 fe14 	bl	8009864 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20005000 	.word	0x20005000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	2000061c 	.word	0x2000061c
 8000c70:	20000678 	.word	0x20000678

08000c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f001 fcac 	bl	80025ee <VL53L0X_get_offset_calibration_data_micro_meter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b096      	sub	sp, #88	; 0x58
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000cb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d107      	bne.n	8000cce <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2188      	movs	r1, #136	; 0x88
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f004 fe9e 	bl	8005a04 <VL53L0X_WrByte>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cdc:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ce6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a9e      	ldr	r2, [pc, #632]	; (8000f68 <VL53L0X_DataInit+0x2c0>)
 8000cee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a9d      	ldr	r2, [pc, #628]	; (8000f6c <VL53L0X_DataInit+0x2c4>)
 8000cf6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fac1 	bl	800128e <VL53L0X_GetDeviceParameters>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000d12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d112      	bne.n	8000d40 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f103 0410 	add.w	r4, r3, #16
 8000d28:	f107 0510 	add.w	r5, r7, #16
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2264      	movs	r2, #100	; 0x64
 8000d44:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000d4e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d58:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000d62:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f004 fe46 	bl	8005a04 <VL53L0X_WrByte>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d80:	4313      	orrs	r3, r2
 8000d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000d86:	2201      	movs	r2, #1
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f004 fe3a 	bl	8005a04 <VL53L0X_WrByte>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f004 fe2e 	bl	8005a04 <VL53L0X_WrByte>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000db0:	4313      	orrs	r3, r2
 8000db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8000db6:	f107 030f 	add.w	r3, r7, #15
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2191      	movs	r1, #145	; 0x91
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f004 fea2 	bl	8005b08 <VL53L0X_RdByte>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8000dd2:	7bfa      	ldrb	r2, [r7, #15]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f004 fe10 	bl	8005a04 <VL53L0X_WrByte>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dec:	4313      	orrs	r3, r2
 8000dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000df2:	2200      	movs	r2, #0
 8000df4:	21ff      	movs	r1, #255	; 0xff
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f004 fe04 	bl	8005a04 <VL53L0X_WrByte>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e04:	4313      	orrs	r3, r2
 8000e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f004 fdf8 	bl	8005a04 <VL53L0X_WrByte>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	653b      	str	r3, [r7, #80]	; 0x50
 8000e26:	e014      	b.n	8000e52 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8000e28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d114      	bne.n	8000e5a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	4619      	mov	r1, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 fd31 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e46:	4313      	orrs	r3, r2
 8000e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e4e:	3301      	adds	r3, #1
 8000e50:	653b      	str	r3, [r7, #80]	; 0x50
 8000e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	dde7      	ble.n	8000e28 <VL53L0X_DataInit+0x180>
 8000e58:	e000      	b.n	8000e5c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8000e5a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8000e5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fd19 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000e74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2103      	movs	r1, #3
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fd0d 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000e8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d107      	bne.n	8000ea4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000e94:	2200      	movs	r2, #0
 8000e96:	2104      	movs	r1, #4
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fd01 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000ea4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d107      	bne.n	8000ebc <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000eac:	2200      	movs	r2, #0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fcf5 	bl	80018a0 <VL53L0X_SetLimitCheckEnable>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8000ebc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d108      	bne.n	8000ed6 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000ec4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 fd96 	bl	80019fc <VL53L0X_SetLimitCheckValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8000ed6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d108      	bne.n	8000ef0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fd89 	bl	80019fc <VL53L0X_SetLimitCheckValue>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000ef0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d108      	bne.n	8000f0a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000ef8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000efc:	2102      	movs	r1, #2
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 fd7c 	bl	80019fc <VL53L0X_SetLimitCheckValue>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d107      	bne.n	8000f22 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f12:	2200      	movs	r2, #0
 8000f14:	2103      	movs	r1, #3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fd70 	bl	80019fc <VL53L0X_SetLimitCheckValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10f      	bne.n	8000f4a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	2101      	movs	r1, #1
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f004 fd64 	bl	8005a04 <VL53L0X_WrByte>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8000f4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d103      	bne.n	8000f5a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8000f5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3758      	adds	r7, #88	; 0x58
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	00016b85 	.word	0x00016b85
 8000f6c:	000970a4 	.word	0x000970a4

08000f70 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b09e      	sub	sp, #120	; 0x78
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f008 fca4 	bl	80098d4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8000fac:	2101      	movs	r1, #1
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f002 fa6f 	bl	8003492 <VL53L0X_get_info_from_device>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8000fc0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8000fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8000fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d80d      	bhi.n	8000ff0 <VL53L0X_StaticInit+0x80>
 8000fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d102      	bne.n	8000fe2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8000fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	d806      	bhi.n	8000ff0 <VL53L0X_StaticInit+0x80>
 8000fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10e      	bne.n	8001008 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8000fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d90b      	bls.n	8001008 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8000ff0:	f107 0218 	add.w	r2, r7, #24
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fcf1 	bl	80029e2 <VL53L0X_perform_ref_spad_management>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001006:	e009      	b.n	800101c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800100c:	461a      	mov	r2, r3
 800100e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 fef2 	bl	8002dfa <VL53L0X_set_reference_spads>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800101c:	4b94      	ldr	r3, [pc, #592]	; (8001270 <VL53L0X_StaticInit+0x300>)
 800101e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8001020:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10f      	bne.n	8001048 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800102e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001040:	66bb      	str	r3, [r7, #104]	; 0x68
 8001042:	e001      	b.n	8001048 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001044:	4b8a      	ldr	r3, [pc, #552]	; (8001270 <VL53L0X_StaticInit+0x300>)
 8001046:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001048:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800104c:	2b00      	cmp	r3, #0
 800104e:	d106      	bne.n	800105e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001050:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f003 fdc0 	bl	8004bd8 <VL53L0X_load_tuning_settings>
 8001058:	4603      	mov	r3, r0
 800105a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800105e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8001066:	2300      	movs	r3, #0
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2304      	movs	r3, #4
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 f8eb 	bl	800224c <VL53L0X_SetGpioConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800107c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001080:	2b00      	cmp	r3, #0
 8001082:	d121      	bne.n	80010c8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001084:	2201      	movs	r2, #1
 8001086:	21ff      	movs	r1, #255	; 0xff
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f004 fcbb 	bl	8005a04 <VL53L0X_WrByte>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001094:	f107 031a 	add.w	r3, r7, #26
 8001098:	461a      	mov	r2, r3
 800109a:	2184      	movs	r1, #132	; 0x84
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f004 fd5d 	bl	8005b5c <VL53L0X_RdWord>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010aa:	4313      	orrs	r3, r2
 80010ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80010b0:	2200      	movs	r2, #0
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f004 fca5 	bl	8005a04 <VL53L0X_WrByte>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c2:	4313      	orrs	r3, r2
 80010c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80010c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80010d0:	8b7b      	ldrh	r3, [r7, #26]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80010dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f8cf 	bl	800128e <VL53L0X_GetDeviceParameters>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80010f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d110      	bne.n	8001120 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80010fe:	f107 0319 	add.w	r3, r7, #25
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f98f 	bl	8001428 <VL53L0X_GetFractionEnable>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001110:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001118:	7e7a      	ldrb	r2, [r7, #25]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001120:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10e      	bne.n	8001146 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f103 0410 	add.w	r4, r3, #16
 800112e:	f107 051c 	add.w	r5, r7, #28
 8001132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001146:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800114a:	2b00      	cmp	r3, #0
 800114c:	d111      	bne.n	8001172 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800114e:	f107 0319 	add.w	r3, r7, #25
 8001152:	461a      	mov	r2, r3
 8001154:	2101      	movs	r1, #1
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f004 fcd6 	bl	8005b08 <VL53L0X_RdByte>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8001162:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800116a:	7e7a      	ldrb	r2, [r7, #25]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8001172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001176:	2b00      	cmp	r3, #0
 8001178:	d107      	bne.n	800118a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f9c6 	bl	8001510 <VL53L0X_SetSequenceStepEnable>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800118a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001192:	2200      	movs	r2, #0
 8001194:	2102      	movs	r1, #2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f9ba 	bl	8001510 <VL53L0X_SetSequenceStepEnable>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80011a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80011b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80011ba:	f107 0313 	add.w	r3, r7, #19
 80011be:	461a      	mov	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f98d 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80011d6:	7cfa      	ldrb	r2, [r7, #19]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80011de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80011e6:	f107 0313 	add.w	r3, r7, #19
 80011ea:	461a      	mov	r2, r3
 80011ec:	2101      	movs	r1, #1
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f977 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001202:	7cfa      	ldrb	r2, [r7, #19]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800120a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	461a      	mov	r2, r3
 8001218:	2103      	movs	r1, #3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f002 feb8 	bl	8003f90 <get_sequence_step_timeout>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001226:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001236:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	461a      	mov	r2, r3
 8001244:	2104      	movs	r1, #4
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f002 fea2 	bl	8003f90 <get_sequence_step_timeout>
 800124c:	4603      	mov	r3, r0
 800124e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001252:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001262:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8001266:	4618      	mov	r0, r3
 8001268:	3770      	adds	r7, #112	; 0x70
 800126a:	46bd      	mov	sp, r7
 800126c:	bdb0      	pop	{r4, r5, r7, pc}
 800126e:	bf00      	nop
 8001270:	200001c0 	.word	0x200001c0

08001274 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800127c:	239d      	movs	r3, #157	; 0x9d
 800127e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f8af 	bl	8001404 <VL53L0X_GetDeviceMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3308      	adds	r3, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fa75 	bl	80017a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3310      	adds	r3, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 faaa 	bl	8001838 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3314      	adds	r3, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fcc2 	bl	8000c80 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d134      	bne.n	8001372 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	e02a      	b.n	8001364 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d12a      	bne.n	800136c <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	b299      	uxth	r1, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3308      	adds	r3, #8
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	3304      	adds	r3, #4
 8001326:	461a      	mov	r2, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fbc9 	bl	8001ac0 <VL53L0X_GetLimitCheckValue>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	4313      	orrs	r3, r2
 8001336:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d117      	bne.n	8001370 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	b299      	uxth	r1, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3318      	adds	r3, #24
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	461a      	mov	r2, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fb32 	bl	80019b8 <VL53L0X_GetLimitCheckEnable>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	4313      	orrs	r3, r2
 800135c:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3301      	adds	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b05      	cmp	r3, #5
 8001368:	ddd1      	ble.n	800130e <VL53L0X_GetDeviceParameters+0x80>
 800136a:	e002      	b.n	8001372 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800136c:	bf00      	nop
 800136e:	e000      	b.n	8001372 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8001370:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	333c      	adds	r3, #60	; 0x3c
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fc2b 	bl	8001bdc <VL53L0X_GetWrapAroundCheckEnable>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d107      	bne.n	80013a2 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3304      	adds	r3, #4
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f877 	bl	800148c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b15      	cmp	r3, #21
 80013c4:	bf8c      	ite	hi
 80013c6:	2201      	movhi	r2, #1
 80013c8:	2200      	movls	r2, #0
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d10e      	bne.n	80013ee <VL53L0X_SetDeviceMode+0x3e>
 80013d0:	2201      	movs	r2, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <VL53L0X_SetDeviceMode+0x50>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	741a      	strb	r2, [r3, #16]
		break;
 80013ec:	e001      	b.n	80013f2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80013ee:	23f8      	movs	r3, #248	; 0xf8
 80013f0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	0030000b 	.word	0x0030000b

08001404 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7c1a      	ldrb	r2, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	2109      	movs	r1, #9
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f004 fb64 	bl	8005b08 <VL53L0X_RdByte>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d106      	bne.n	800145a <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f003 fa1d 	bl	80048b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f003 faea 	bl	8004a76 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	4613      	mov	r3, r2
 80014c0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80014c6:	78ba      	ldrb	r2, [r7, #2]
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f002 ff32 	bl	8004336 <VL53L0X_set_vcsel_pulse_period>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	460b      	mov	r3, r1
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4619      	mov	r1, r3
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f003 f9a4 	bl	8004848 <VL53L0X_get_vcsel_pulse_period>
 8001500:	4603      	mov	r3, r0
 8001502:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001504:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	4613      	mov	r3, r2
 800151e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800152c:	f107 030f 	add.w	r3, r7, #15
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f004 fae7 	bl	8005b08 <VL53L0X_RdByte>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d15a      	bne.n	8001600 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800154a:	78bb      	ldrb	r3, [r7, #2]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d12b      	bne.n	80015a8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d825      	bhi.n	80015a2 <VL53L0X_SetSequenceStepEnable+0x92>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	08001571 	.word	0x08001571
 8001560:	0800157b 	.word	0x0800157b
 8001564:	08001585 	.word	0x08001585
 8001568:	0800158f 	.word	0x0800158f
 800156c:	08001599 	.word	0x08001599
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	75bb      	strb	r3, [r7, #22]
				break;
 8001578:	e043      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800157a:	7dbb      	ldrb	r3, [r7, #22]
 800157c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001580:	75bb      	strb	r3, [r7, #22]
				break;
 8001582:	e03e      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	75bb      	strb	r3, [r7, #22]
				break;
 800158c:	e039      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800158e:	7dbb      	ldrb	r3, [r7, #22]
 8001590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001594:	75bb      	strb	r3, [r7, #22]
				break;
 8001596:	e034      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8001598:	7dbb      	ldrb	r3, [r7, #22]
 800159a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800159e:	75bb      	strb	r3, [r7, #22]
				break;
 80015a0:	e02f      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80015a2:	23fc      	movs	r3, #252	; 0xfc
 80015a4:	75fb      	strb	r3, [r7, #23]
 80015a6:	e02c      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d825      	bhi.n	80015fa <VL53L0X_SetSequenceStepEnable+0xea>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	080015c9 	.word	0x080015c9
 80015b8:	080015d3 	.word	0x080015d3
 80015bc:	080015dd 	.word	0x080015dd
 80015c0:	080015e7 	.word	0x080015e7
 80015c4:	080015f1 	.word	0x080015f1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	f023 0310 	bic.w	r3, r3, #16
 80015ce:	75bb      	strb	r3, [r7, #22]
				break;
 80015d0:	e017      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80015d8:	75bb      	strb	r3, [r7, #22]
				break;
 80015da:	e012      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80015dc:	7dbb      	ldrb	r3, [r7, #22]
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	75bb      	strb	r3, [r7, #22]
				break;
 80015e4:	e00d      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80015e6:	7dbb      	ldrb	r3, [r7, #22]
 80015e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ec:	75bb      	strb	r3, [r7, #22]
				break;
 80015ee:	e008      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80015f0:	7dbb      	ldrb	r3, [r7, #22]
 80015f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015f6:	75bb      	strb	r3, [r7, #22]
				break;
 80015f8:	e003      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80015fa:	23fc      	movs	r3, #252	; 0xfc
 80015fc:	75fb      	strb	r3, [r7, #23]
 80015fe:	e000      	b.n	8001602 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8001600:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	7dba      	ldrb	r2, [r7, #22]
 8001606:	429a      	cmp	r2, r3
 8001608:	d01e      	beq.n	8001648 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800160a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d107      	bne.n	8001622 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8001612:	7dbb      	ldrb	r3, [r7, #22]
 8001614:	461a      	mov	r2, r3
 8001616:	2101      	movs	r1, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f004 f9f3 	bl	8005a04 <VL53L0X_WrByte>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7dba      	ldrb	r2, [r7, #22]
 800162e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff0f 	bl	8001466 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	72fb      	strb	r3, [r7, #11]
 8001662:	4613      	mov	r3, r2
 8001664:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	2b04      	cmp	r3, #4
 8001674:	d836      	bhi.n	80016e4 <sequence_step_enabled+0x90>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <sequence_step_enabled+0x28>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	08001691 	.word	0x08001691
 8001680:	080016a3 	.word	0x080016a3
 8001684:	080016b5 	.word	0x080016b5
 8001688:	080016c7 	.word	0x080016c7
 800168c:	080016d9 	.word	0x080016d9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001690:	7abb      	ldrb	r3, [r7, #10]
 8001692:	111b      	asrs	r3, r3, #4
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	701a      	strb	r2, [r3, #0]
		break;
 80016a0:	e022      	b.n	80016e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80016a2:	7abb      	ldrb	r3, [r7, #10]
 80016a4:	10db      	asrs	r3, r3, #3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
		break;
 80016b2:	e019      	b.n	80016e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80016b4:	7abb      	ldrb	r3, [r7, #10]
 80016b6:	109b      	asrs	r3, r3, #2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	701a      	strb	r2, [r3, #0]
		break;
 80016c4:	e010      	b.n	80016e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	119b      	asrs	r3, r3, #6
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	701a      	strb	r2, [r3, #0]
		break;
 80016d6:	e007      	b.n	80016e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80016d8:	7abb      	ldrb	r3, [r7, #10]
 80016da:	09db      	lsrs	r3, r3, #7
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	701a      	strb	r2, [r3, #0]
		break;
 80016e2:	e001      	b.n	80016e8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80016e4:	23fc      	movs	r3, #252	; 0xfc
 80016e6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800170a:	f107 030e 	add.w	r3, r7, #14
 800170e:	461a      	mov	r2, r3
 8001710:	2101      	movs	r1, #1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f004 f9f8 	bl	8005b08 <VL53L0X_RdByte>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8001724:	7bba      	ldrb	r2, [r7, #14]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2100      	movs	r1, #0
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff92 	bl	8001654 <sequence_step_enabled>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d108      	bne.n	800174e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800173c:	7bba      	ldrb	r2, [r7, #14]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3302      	adds	r3, #2
 8001742:	2101      	movs	r1, #1
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff85 	bl	8001654 <sequence_step_enabled>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d108      	bne.n	8001768 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8001756:	7bba      	ldrb	r2, [r7, #14]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	2102      	movs	r1, #2
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff78 	bl	8001654 <sequence_step_enabled>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8001770:	7bba      	ldrb	r2, [r7, #14]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3303      	adds	r3, #3
 8001776:	2103      	movs	r1, #3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff6b 	bl	8001654 <sequence_step_enabled>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d108      	bne.n	800179c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800178a:	7bba      	ldrb	r2, [r7, #14]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	3304      	adds	r3, #4
 8001790:	2104      	movs	r1, #4
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff5e 	bl	8001654 <sequence_step_enabled>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800179c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	461a      	mov	r2, r3
 80017bc:	21f8      	movs	r1, #248	; 0xf8
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f004 f9cc 	bl	8005b5c <VL53L0X_RdWord>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80017c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d108      	bne.n	80017e2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	461a      	mov	r2, r3
 80017d6:	2104      	movs	r1, #4
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f004 f9f7 	bl	8005bcc <VL53L0X_RdDWord>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80017ea:	89bb      	ldrh	r3, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	89ba      	ldrh	r2, [r7, #12]
 80017f4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7f1b      	ldrb	r3, [r3, #28]
 8001822:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7bba      	ldrb	r2, [r7, #14]
 8001828:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001846:	f107 030e 	add.w	r3, r7, #14
 800184a:	461a      	mov	r2, r3
 800184c:	2120      	movs	r1, #32
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f004 f984 	bl	8005b5c <VL53L0X_RdWord>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d118      	bne.n	8001892 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
 8001878:	e00b      	b.n	8001892 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800187a:	89fb      	ldrh	r3, [r7, #14]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d902      	bls.n	80018cc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80018c6:	23fc      	movs	r3, #252	; 0xfc
 80018c8:	75fb      	strb	r3, [r7, #23]
 80018ca:	e05b      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	73bb      	strb	r3, [r7, #14]
 80018de:	e00a      	b.n	80018f6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	330c      	adds	r3, #12
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d841      	bhi.n	8001980 <VL53L0X_SetLimitCheckEnable+0xe0>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <VL53L0X_SetLimitCheckEnable+0x64>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001927 	.word	0x08001927
 800190c:	0800193d 	.word	0x0800193d
 8001910:	08001947 	.word	0x08001947
 8001914:	08001951 	.word	0x08001951
 8001918:	08001969 	.word	0x08001969

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8001924:	e02e      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	2144      	movs	r1, #68	; 0x44
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f004 f88b 	bl	8005a4c <VL53L0X_WrWord>
 8001936:	4603      	mov	r3, r0
 8001938:	75fb      	strb	r3, [r7, #23]

			break;
 800193a:	e023      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001944:	e01e      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800194e:	e019      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001956:	7b7b      	ldrb	r3, [r7, #13]
 8001958:	22fe      	movs	r2, #254	; 0xfe
 800195a:	2160      	movs	r1, #96	; 0x60
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f004 f89f 	bl	8005aa0 <VL53L0X_UpdateByte>
 8001962:	4603      	mov	r3, r0
 8001964:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001966:	e00d      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800196e:	7b7b      	ldrb	r3, [r7, #13]
 8001970:	22ef      	movs	r2, #239	; 0xef
 8001972:	2160      	movs	r1, #96	; 0x60
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f004 f893 	bl	8005aa0 <VL53L0X_UpdateByte>
 800197a:	4603      	mov	r3, r0
 800197c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800197e:	e001      	b.n	8001984 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001980:	23fc      	movs	r3, #252	; 0xfc
 8001982:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10f      	bne.n	80019ac <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800199e:	e005      	b.n	80019ac <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80019ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	460b      	mov	r3, r1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d905      	bls.n	80019dc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80019d0:	23fc      	movs	r3, #252	; 0xfc
 80019d2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e008      	b.n	80019ee <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019e6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7dba      	ldrb	r2, [r7, #22]
 80019ec:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80019ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	460b      	mov	r3, r1
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001a0e:	897b      	ldrh	r3, [r7, #10]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a18:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001a1a:	7dbb      	ldrb	r3, [r7, #22]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a20:	897b      	ldrh	r3, [r7, #10]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e040      	b.n	8001ab2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d830      	bhi.n	8001a98 <VL53L0X_SetLimitCheckValue+0x9c>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <VL53L0X_SetLimitCheckValue+0x40>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a55 	.word	0x08001a55
 8001a40:	08001a5d 	.word	0x08001a5d
 8001a44:	08001a73 	.word	0x08001a73
 8001a48:	08001a7b 	.word	0x08001a7b
 8001a4c:	08001a83 	.word	0x08001a83
 8001a50:	08001a83 	.word	0x08001a83

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001a5a:	e01f      	b.n	8001a9c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	2144      	movs	r1, #68	; 0x44
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f003 fff0 	bl	8005a4c <VL53L0X_WrWord>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001a70:	e014      	b.n	8001a9c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001a78:	e010      	b.n	8001a9c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001a80:	e00c      	b.n	8001a9c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2164      	movs	r1, #100	; 0x64
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f003 ffdd 	bl	8005a4c <VL53L0X_WrWord>
 8001a92:	4603      	mov	r3, r0
 8001a94:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001a96:	e001      	b.n	8001a9c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a98:	23fc      	movs	r3, #252	; 0xfc
 8001a9a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop

08001ac0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001ad6:	897b      	ldrh	r3, [r7, #10]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d847      	bhi.n	8001b6c <VL53L0X_GetLimitCheckValue+0xac>
 8001adc:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <VL53L0X_GetLimitCheckValue+0x24>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b09 	.word	0x08001b09
 8001aec:	08001b2f 	.word	0x08001b2f
 8001af0:	08001b3b 	.word	0x08001b3b
 8001af4:	08001b47 	.word	0x08001b47
 8001af8:	08001b47 	.word	0x08001b47

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	77bb      	strb	r3, [r7, #30]
		break;
 8001b06:	e033      	b.n	8001b70 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001b08:	f107 0316 	add.w	r3, r7, #22
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2144      	movs	r1, #68	; 0x44
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f004 f823 	bl	8005b5c <VL53L0X_RdWord>
 8001b16:	4603      	mov	r3, r0
 8001b18:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001b22:	8afb      	ldrh	r3, [r7, #22]
 8001b24:	025b      	lsls	r3, r3, #9
 8001b26:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	77bb      	strb	r3, [r7, #30]
		break;
 8001b2c:	e020      	b.n	8001b70 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	77bb      	strb	r3, [r7, #30]
		break;
 8001b38:	e01a      	b.n	8001b70 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77bb      	strb	r3, [r7, #30]
		break;
 8001b44:	e014      	b.n	8001b70 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001b46:	f107 0316 	add.w	r3, r7, #22
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2164      	movs	r1, #100	; 0x64
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f004 f804 	bl	8005b5c <VL53L0X_RdWord>
 8001b54:	4603      	mov	r3, r0
 8001b56:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001b60:	8afb      	ldrh	r3, [r7, #22]
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	77bb      	strb	r3, [r7, #30]
		break;
 8001b6a:	e001      	b.n	8001b70 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b6c:	23fc      	movs	r3, #252	; 0xfc
 8001b6e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d12a      	bne.n	8001bce <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001b78:	7fbb      	ldrb	r3, [r7, #30]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d124      	bne.n	8001bc8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d110      	bne.n	8001ba6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001b84:	897b      	ldrh	r3, [r7, #10]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001b98:	897b      	ldrh	r3, [r7, #10]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001ba4:	e013      	b.n	8001bce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001bac:	897b      	ldrh	r3, [r7, #10]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001bc6:	e002      	b.n	8001bce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001bce:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop

08001bdc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001bea:	f107 030e 	add.w	r3, r7, #14
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f003 ff88 	bl	8005b08 <VL53L0X_RdByte>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10e      	bne.n	8001c22 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001c04:	7bba      	ldrb	r2, [r7, #14]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da03      	bge.n	8001c1c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	e002      	b.n	8001c22 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d104      	bne.n	8001c34 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001c4c:	f107 030e 	add.w	r3, r7, #14
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fbd6 	bl	8001404 <VL53L0X_GetDeviceMode>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d107      	bne.n	8001c74 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d104      	bne.n	8001c74 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f898 	bl	8001da0 <VL53L0X_StartMeasurement>
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f001 fb3e 	bl	80032fe <VL53L0X_measurement_poll_for_completion>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001cb8:	2301      	movs	r3, #1
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f001 fae0 	bl	8003284 <VL53L0X_perform_ref_calibration>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001cea:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001cec:	7dbb      	ldrb	r3, [r7, #22]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001cf2:	7dbb      	ldrb	r3, [r7, #22]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d002      	beq.n	8001cfe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001cf8:	7dbb      	ldrb	r3, [r7, #22]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d147      	bne.n	8001d8e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	f107 0210 	add.w	r2, r7, #16
 8001d06:	2101      	movs	r1, #1
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fbc3 	bl	8002494 <VL53L0X_GetInterruptThresholds>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001d18:	d803      	bhi.n	8001d22 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001d1a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001d1c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001d20:	d935      	bls.n	8001d8e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d131      	bne.n	8001d8e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001d30:	491a      	ldr	r1, [pc, #104]	; (8001d9c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f002 ff50 	bl	8004bd8 <VL53L0X_load_tuning_settings>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75fb      	strb	r3, [r7, #23]
 8001d3c:	e027      	b.n	8001d8e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001d3e:	2204      	movs	r2, #4
 8001d40:	21ff      	movs	r1, #255	; 0xff
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f003 fe5e 	bl	8005a04 <VL53L0X_WrByte>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2170      	movs	r1, #112	; 0x70
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f003 fe54 	bl	8005a04 <VL53L0X_WrByte>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001d66:	2200      	movs	r2, #0
 8001d68:	21ff      	movs	r1, #255	; 0xff
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f003 fe4a 	bl	8005a04 <VL53L0X_WrByte>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f003 fe40 	bl	8005a04 <VL53L0X_WrByte>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8001d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001db0:	f107 030e 	add.w	r3, r7, #14
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fb24 	bl	8001404 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f003 fe1f 	bl	8005a04 <VL53L0X_WrByte>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	21ff      	movs	r1, #255	; 0xff
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f003 fe18 	bl	8005a04 <VL53L0X_WrByte>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f003 fe11 	bl	8005a04 <VL53L0X_WrByte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001dec:	461a      	mov	r2, r3
 8001dee:	2191      	movs	r1, #145	; 0x91
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f003 fe07 	bl	8005a04 <VL53L0X_WrByte>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f003 fe00 	bl	8005a04 <VL53L0X_WrByte>
 8001e04:	4603      	mov	r3, r0
 8001e06:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f003 fdf9 	bl	8005a04 <VL53L0X_WrByte>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f003 fdf2 	bl	8005a04 <VL53L0X_WrByte>
 8001e20:	4603      	mov	r3, r0
 8001e22:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d054      	beq.n	8001ed4 <VL53L0X_StartMeasurement+0x134>
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	dc6c      	bgt.n	8001f08 <VL53L0X_StartMeasurement+0x168>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <VL53L0X_StartMeasurement+0x98>
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d034      	beq.n	8001ea0 <VL53L0X_StartMeasurement+0x100>
 8001e36:	e067      	b.n	8001f08 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f003 fde1 	bl	8005a04 <VL53L0X_WrByte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8001e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d15d      	bne.n	8001f0e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8001e5c:	f107 030d 	add.w	r3, r7, #13
 8001e60:	461a      	mov	r2, r3
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f003 fe4f 	bl	8005b08 <VL53L0X_RdByte>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	3301      	adds	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8001e74:	7b7a      	ldrb	r2, [r7, #13]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d107      	bne.n	8001e92 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8001e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e90:	d3e1      	bcc.n	8001e56 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e98:	d339      	bcc.n	8001f0e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8001e9a:	23f9      	movs	r3, #249	; 0xf9
 8001e9c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8001e9e:	e036      	b.n	8001f0e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff12 	bl	8001cd4 <VL53L0X_CheckAndLoadInterruptSettings>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f003 fda3 	bl	8005a04 <VL53L0X_WrByte>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8001ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d123      	bne.n	8001f12 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001ed2:	e01e      	b.n	8001f12 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001edc:	2101      	movs	r1, #1
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fef8 	bl	8001cd4 <VL53L0X_CheckAndLoadInterruptSettings>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001ee8:	2204      	movs	r2, #4
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f003 fd89 	bl	8005a04 <VL53L0X_WrByte>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8001ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001f06:	e006      	b.n	8001f16 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001f08:	23f8      	movs	r3, #248	; 0xf8
 8001f0a:	75fb      	strb	r3, [r7, #23]
 8001f0c:	e004      	b.n	8001f18 <VL53L0X_StartMeasurement+0x178>
		break;
 8001f0e:	bf00      	nop
 8001f10:	e002      	b.n	8001f18 <VL53L0X_StartMeasurement+0x178>
		break;
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <VL53L0X_StartMeasurement+0x178>
		break;
 8001f16:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001f38:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8001f3a:	7bbb      	ldrb	r3, [r7, #14]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d112      	bne.n	8001f66 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fb1a 	bl	8002580 <VL53L0X_GetInterruptMaskStatus>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d103      	bne.n	8001f5e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e01c      	b.n	8001f98 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e018      	b.n	8001f98 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8001f66:	f107 030d 	add.w	r3, r7, #13
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2114      	movs	r1, #20
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f003 fdca 	bl	8005b08 <VL53L0X_RdByte>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8001f80:	7b7b      	ldrb	r3, [r7, #13]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e002      	b.n	8001f98 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b096      	sub	sp, #88	; 0x58
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8001fb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fb8:	230c      	movs	r3, #12
 8001fba:	2114      	movs	r1, #20
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f003 fcf5 	bl	80059ac <VL53L0X_ReadMulti>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8001fc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 80d1 	bne.w	8002174 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8001fde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8001ffa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b29a      	uxth	r2, r3
 8002004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002008:	b29b      	uxth	r3, r3
 800200a:	4413      	add	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	025b      	lsls	r3, r3, #9
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002016:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002018:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800201c:	b29b      	uxth	r3, r3
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b29a      	uxth	r2, r3
 8002022:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002026:	b29b      	uxth	r3, r3
 8002028:	4413      	add	r3, r2
 800202a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800202e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002032:	025b      	lsls	r3, r3, #9
 8002034:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800203a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b29a      	uxth	r2, r3
 8002044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002048:	b29b      	uxth	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002056:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8002058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800205c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8002066:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800206e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002078:	d046      	beq.n	8002108 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800207a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800207c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800208a:	fb82 1203 	smull	r1, r2, r2, r3
 800208e:	1192      	asrs	r2, r2, #6
 8002090:	17db      	asrs	r3, r3, #31
 8002092:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002094:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7f1b      	ldrb	r3, [r3, #28]
 80020a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80020a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d02c      	beq.n	8002108 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80020ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80020b0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80020ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80020bc:	429a      	cmp	r2, r3
 80020be:	d10d      	bne.n	80020dc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80020c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80020c8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80020cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80020d0:	e016      	b.n	8002100 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80020d2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80020d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80020da:	e011      	b.n	8002100 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80020dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020e2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80020e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80020e8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80020f0:	121b      	asrs	r3, r3, #8
 80020f2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80020f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80020fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002100:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002104:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8002108:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002110:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800211c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002120:	b2db      	uxtb	r3, r3
 8002122:	019b      	lsls	r3, r3, #6
 8002124:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	75da      	strb	r2, [r3, #23]
 800212a:	e006      	b.n	800213a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002132:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800213a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800213e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002142:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f003 f9df 	bl	8005514 <VL53L0X_get_pal_range_status>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800215e:	4313      	orrs	r3, r2
 8002160:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002164:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800216c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002174:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002178:	2b00      	cmp	r3, #0
 800217a:	d12f      	bne.n	80021dc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f107 040c 	add.w	r4, r7, #12
 8002182:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8002186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800218e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002196:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800219c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80021a4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80021aa:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80021b0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80021b6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80021bc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80021c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80021cc:	f107 050c 	add.w	r5, r7, #12
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80021dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3750      	adds	r7, #80	; 0x50
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdb0      	pop	{r4, r5, r7, pc}
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff f8d7 	bl	80013b0 <VL53L0X_SetDeviceMode>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d104      	bne.n	8002218 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fd16 	bl	8001c40 <VL53L0X_PerformSingleMeasurement>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff febe 	bl	8001fa4 <VL53L0X_GetRangingMeasurementData>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800222c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002234:	2100      	movs	r1, #0
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f962 	bl	8002500 <VL53L0X_ClearInterruptMask>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8002240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	70fb      	strb	r3, [r7, #3]
 800225e:	460b      	mov	r3, r1
 8002260:	70bb      	strb	r3, [r7, #2]
 8002262:	4613      	mov	r3, r2
 8002264:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002270:	23f6      	movs	r3, #246	; 0xf6
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e107      	b.n	8002486 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	2b14      	cmp	r3, #20
 800227a:	d110      	bne.n	800229e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800227c:	7e3b      	ldrb	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8002282:	2310      	movs	r3, #16
 8002284:	73bb      	strb	r3, [r7, #14]
 8002286:	e001      	b.n	800228c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8002288:	2301      	movs	r3, #1
 800228a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	461a      	mov	r2, r3
 8002290:	2184      	movs	r1, #132	; 0x84
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f003 fbb6 	bl	8005a04 <VL53L0X_WrByte>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e0f3      	b.n	8002486 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	2b15      	cmp	r3, #21
 80022a2:	f040 8097 	bne.w	80023d4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80022a6:	2201      	movs	r2, #1
 80022a8:	21ff      	movs	r1, #255	; 0xff
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f003 fbaa 	bl	8005a04 <VL53L0X_WrByte>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461a      	mov	r2, r3
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f003 fba0 	bl	8005a04 <VL53L0X_WrByte>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80022ce:	2200      	movs	r2, #0
 80022d0:	21ff      	movs	r1, #255	; 0xff
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f003 fb96 	bl	8005a04 <VL53L0X_WrByte>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	4313      	orrs	r3, r2
 80022e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f003 fb8c 	bl	8005a04 <VL53L0X_WrByte>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80022f6:	2202      	movs	r2, #2
 80022f8:	2185      	movs	r1, #133	; 0x85
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f003 fb82 	bl	8005a04 <VL53L0X_WrByte>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4313      	orrs	r3, r2
 8002308:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800230a:	2204      	movs	r2, #4
 800230c:	21ff      	movs	r1, #255	; 0xff
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f003 fb78 	bl	8005a04 <VL53L0X_WrByte>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	4313      	orrs	r3, r2
 800231c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800231e:	2200      	movs	r2, #0
 8002320:	21cd      	movs	r1, #205	; 0xcd
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f003 fb6e 	bl	8005a04 <VL53L0X_WrByte>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	4313      	orrs	r3, r2
 8002330:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002332:	2211      	movs	r2, #17
 8002334:	21cc      	movs	r1, #204	; 0xcc
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f003 fb64 	bl	8005a04 <VL53L0X_WrByte>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	4313      	orrs	r3, r2
 8002344:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002346:	2207      	movs	r2, #7
 8002348:	21ff      	movs	r1, #255	; 0xff
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f003 fb5a 	bl	8005a04 <VL53L0X_WrByte>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	4313      	orrs	r3, r2
 8002358:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800235a:	2200      	movs	r2, #0
 800235c:	21be      	movs	r1, #190	; 0xbe
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f003 fb50 	bl	8005a04 <VL53L0X_WrByte>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	4313      	orrs	r3, r2
 800236c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800236e:	2206      	movs	r2, #6
 8002370:	21ff      	movs	r1, #255	; 0xff
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f003 fb46 	bl	8005a04 <VL53L0X_WrByte>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	4313      	orrs	r3, r2
 8002380:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002382:	2209      	movs	r2, #9
 8002384:	21cc      	movs	r1, #204	; 0xcc
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f003 fb3c 	bl	8005a04 <VL53L0X_WrByte>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	4313      	orrs	r3, r2
 8002394:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002396:	2200      	movs	r2, #0
 8002398:	21ff      	movs	r1, #255	; 0xff
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f003 fb32 	bl	8005a04 <VL53L0X_WrByte>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80023aa:	2201      	movs	r2, #1
 80023ac:	21ff      	movs	r1, #255	; 0xff
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f003 fb28 	bl	8005a04 <VL53L0X_WrByte>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f003 fb1e 	bl	8005a04 <VL53L0X_WrByte>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e058      	b.n	8002486 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80023d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d121      	bne.n	8002420 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d81b      	bhi.n	800241a <VL53L0X_SetGpioConfig+0x1ce>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <VL53L0X_SetGpioConfig+0x19c>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023fd 	.word	0x080023fd
 80023ec:	08002403 	.word	0x08002403
 80023f0:	08002409 	.word	0x08002409
 80023f4:	0800240f 	.word	0x0800240f
 80023f8:	08002415 	.word	0x08002415
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73bb      	strb	r3, [r7, #14]
				break;
 8002400:	e00f      	b.n	8002422 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8002402:	2301      	movs	r3, #1
 8002404:	73bb      	strb	r3, [r7, #14]
				break;
 8002406:	e00c      	b.n	8002422 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8002408:	2302      	movs	r3, #2
 800240a:	73bb      	strb	r3, [r7, #14]
				break;
 800240c:	e009      	b.n	8002422 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800240e:	2303      	movs	r3, #3
 8002410:	73bb      	strb	r3, [r7, #14]
				break;
 8002412:	e006      	b.n	8002422 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8002414:	2304      	movs	r3, #4
 8002416:	73bb      	strb	r3, [r7, #14]
				break;
 8002418:	e003      	b.n	8002422 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800241a:	23f5      	movs	r3, #245	; 0xf5
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e000      	b.n	8002422 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8002420:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	461a      	mov	r2, r3
 800242e:	210a      	movs	r1, #10
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f003 fae7 	bl	8005a04 <VL53L0X_WrByte>
 8002436:	4603      	mov	r3, r0
 8002438:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002442:	7e3b      	ldrb	r3, [r7, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	73bb      	strb	r3, [r7, #14]
 800244c:	e001      	b.n	8002452 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800244e:	2310      	movs	r3, #16
 8002450:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	22ef      	movs	r2, #239	; 0xef
 8002456:	2184      	movs	r1, #132	; 0x84
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f003 fb21 	bl	8005aa0 <VL53L0X_UpdateByte>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	787a      	ldrb	r2, [r7, #1]
 800246e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8002472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d105      	bne.n	8002486 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800247a:	2100      	movs	r1, #0
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f83f 	bl	8002500 <VL53L0X_ClearInterruptMask>
 8002482:	4603      	mov	r3, r0
 8002484:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop

08002494 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	460b      	mov	r3, r1
 80024a2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	461a      	mov	r2, r3
 80024ae:	210e      	movs	r1, #14
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f003 fb53 	bl	8005b5c <VL53L0X_RdWord>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80024ba:	8abb      	ldrh	r3, [r7, #20]
 80024bc:	045b      	lsls	r3, r3, #17
 80024be:	461a      	mov	r2, r3
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <VL53L0X_GetInterruptThresholds+0x68>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80024c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10f      	bne.n	80024f0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	461a      	mov	r2, r3
 80024d6:	210c      	movs	r1, #12
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f003 fb3f 	bl	8005b5c <VL53L0X_RdWord>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80024e2:	8abb      	ldrh	r3, [r7, #20]
 80024e4:	045b      	lsls	r3, r3, #17
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <VL53L0X_GetInterruptThresholds+0x68>)
 80024ea:	4013      	ands	r3, r2
		*pThresholdHigh =
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80024f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	1ffe0000 	.word	0x1ffe0000

08002500 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8002512:	2201      	movs	r2, #1
 8002514:	210b      	movs	r1, #11
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f003 fa74 	bl	8005a04 <VL53L0X_WrByte>
 800251c:	4603      	mov	r3, r0
 800251e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002520:	2200      	movs	r2, #0
 8002522:	210b      	movs	r1, #11
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f003 fa6d 	bl	8005a04 <VL53L0X_WrByte>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4313      	orrs	r3, r2
 8002532:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002534:	f107 030d 	add.w	r3, r7, #13
 8002538:	461a      	mov	r2, r3
 800253a:	2113      	movs	r1, #19
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f003 fae3 	bl	8005b08 <VL53L0X_RdByte>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4313      	orrs	r3, r2
 800254a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800254c:	7bbb      	ldrb	r3, [r7, #14]
 800254e:	3301      	adds	r3, #1
 8002550:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d803      	bhi.n	800256a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0d3      	beq.n	8002512 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002570:	23f4      	movs	r3, #244	; 0xf4
 8002572:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800258e:	f107 030e 	add.w	r3, r7, #14
 8002592:	461a      	mov	r2, r3
 8002594:	2113      	movs	r1, #19
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f003 fab6 	bl	8005b08 <VL53L0X_RdByte>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	f003 0207 	and.w	r2, r3, #7
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	f003 0318 	and.w	r3, r3, #24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80025b4:	23fa      	movs	r3, #250	; 0xfa
 80025b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80025b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fa02 	bl	80029e2 <VL53L0X_perform_ref_spad_management>
 80025de:	4603      	mov	r3, r0
 80025e0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80025e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80025fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002600:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	461a      	mov	r2, r3
 800260e:	2128      	movs	r1, #40	; 0x28
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f003 faa3 	bl	8005b5c <VL53L0X_RdWord>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11e      	bne.n	8002660 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	b29b      	uxth	r3, r3
 800262a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800262c:	893b      	ldrh	r3, [r7, #8]
 800262e:	461a      	mov	r2, r3
 8002630:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	dd0b      	ble.n	8002650 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	b29b      	uxth	r3, r3
 8002640:	b21b      	sxth	r3, r3
 8002642:	461a      	mov	r2, r3
					* 250;
 8002644:	23fa      	movs	r3, #250	; 0xfa
 8002646:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e007      	b.n	8002660 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002650:	893b      	ldrh	r3, [r7, #8]
 8002652:	b21b      	sxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	23fa      	movs	r3, #250	; 0xfa
 8002658:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8002660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800266c:	b480      	push	{r7}
 800266e:	b08b      	sub	sp, #44	; 0x2c
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800267a:	2308      	movs	r3, #8
 800267c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	fbb3 f2f2 	udiv	r2, r3, r2
 800269c:	69b9      	ldr	r1, [r7, #24]
 800269e:	fb01 f202 	mul.w	r2, r1, r2
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e030      	b.n	800270e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11e      	bne.n	8002700 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80026c2:	7ffa      	ldrb	r2, [r7, #31]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	fa42 f303 	asr.w	r3, r2, r3
 80026ca:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80026d0:	e016      	b.n	8002700 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <get_next_good_spad+0x88>
				success = 1;
 80026dc:	2301      	movs	r3, #1
 80026de:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	fb03 f202 	mul.w	r2, r3, r2
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	4413      	add	r3, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	601a      	str	r2, [r3, #0]
				break;
 80026f2:	e009      	b.n	8002708 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80026f4:	7ffb      	ldrb	r3, [r7, #31]
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	3301      	adds	r3, #1
 80026fe:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8002700:	6a3a      	ldr	r2, [r7, #32]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d3e4      	bcc.n	80026d2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	3301      	adds	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d202      	bcs.n	800271c <get_next_good_spad+0xb0>
 8002716:	7fbb      	ldrb	r3, [r7, #30]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0c7      	beq.n	80026ac <get_next_good_spad+0x40>
		}
	}
}
 800271c:	bf00      	nop
 800271e:	372c      	adds	r7, #44	; 0x2c
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <is_aperture+0x30>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <is_aperture+0x22>
		isAperture = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200002b4 	.word	0x200002b4

0800275c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002768:	2300      	movs	r3, #0
 800276a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800276c:	2308      	movs	r3, #8
 800276e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	fb01 f202 	mul.w	r2, r1, r2
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	d302      	bcc.n	800279a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002794:	23ce      	movs	r3, #206	; 0xce
 8002796:	77fb      	strb	r3, [r7, #31]
 8002798:	e010      	b.n	80027bc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b25a      	sxtb	r2, r3
 80027a4:	2101      	movs	r1, #1
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b259      	sxtb	r1, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	4413      	add	r3, r2
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]

	return status;
 80027bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3724      	adds	r7, #36	; 0x24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80027d4:	2306      	movs	r3, #6
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	21b0      	movs	r1, #176	; 0xb0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f003 f8b6 	bl	800594c <VL53L0X_WriteMulti>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80027fa:	2306      	movs	r3, #6
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	21b0      	movs	r1, #176	; 0xb0
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f003 f8d3 	bl	80059ac <VL53L0X_ReadMulti>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b08c      	sub	sp, #48	; 0x30
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	460b      	mov	r3, r1
 8002824:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800282c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282e:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8002830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002832:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
 8002838:	e02b      	b.n	8002892 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	6a3a      	ldr	r2, [r7, #32]
 8002840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff12 	bl	800266c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d103      	bne.n	8002858 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002850:	23ce      	movs	r3, #206	; 0xce
 8002852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002856:	e020      	b.n	800289a <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	461a      	mov	r2, r3
 800285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285e:	4413      	add	r3, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff61 	bl	8002728 <is_aperture>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002870:	23ce      	movs	r3, #206	; 0xce
 8002872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002876:	e010      	b.n	800289a <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f7ff ff6b 	bl	800275c <enable_spad_bit>
		currentSpad++;
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	3301      	adds	r3, #1
 800288a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	3301      	adds	r3, #1
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
 8002892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002896:	429a      	cmp	r2, r3
 8002898:	d3cf      	bcc.n	800283a <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	6a3a      	ldr	r2, [r7, #32]
 800289e:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80028a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff ff8d 	bl	80027ca <set_ref_spad_map>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80028b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d121      	bne.n	8002902 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff ff93 	bl	80027f0 <get_ref_spad_map>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80028d4:	e011      	b.n	80028fa <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	4413      	add	r3, r2
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	f107 0114 	add.w	r1, r7, #20
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	440b      	add	r3, r1
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d003      	beq.n	80028f4 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80028ec:	23ce      	movs	r3, #206	; 0xce
 80028ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80028f2:	e006      	b.n	8002902 <enable_ref_spads+0xec>
			}
			i++;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3e9      	bcc.n	80028d6 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8002902:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002906:	4618      	mov	r0, r3
 8002908:	3730      	adds	r7, #48	; 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b08a      	sub	sp, #40	; 0x28
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800292a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800292e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002936:	22c0      	movs	r2, #192	; 0xc0
 8002938:	2101      	movs	r1, #1
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f003 f862 	bl	8005a04 <VL53L0X_WrByte>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002946:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fc49 	bl	80021ec <VL53L0X_PerformSingleRangingMeasurement>
 800295a:	4603      	mov	r3, r0
 800295c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002968:	2201      	movs	r2, #1
 800296a:	21ff      	movs	r1, #255	; 0xff
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f003 f849 	bl	8005a04 <VL53L0X_WrByte>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	21b6      	movs	r1, #182	; 0xb6
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f003 f8e9 	bl	8005b5c <VL53L0X_RdWord>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002994:	2b00      	cmp	r3, #0
 8002996:	d107      	bne.n	80029a8 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002998:	2200      	movs	r2, #0
 800299a:	21ff      	movs	r1, #255	; 0xff
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f003 f831 	bl	8005a04 <VL53L0X_WrByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80029a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d112      	bne.n	80029d6 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80029b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029b4:	461a      	mov	r2, r3
 80029b6:	2101      	movs	r1, #1
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f003 f823 	bl	8005a04 <VL53L0X_WrByte>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80029c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80029d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80029d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80029e2:	b590      	push	{r4, r7, lr}
 80029e4:	b09d      	sub	sp, #116	; 0x74
 80029e6:	af06      	add	r7, sp, #24
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80029f4:	23b4      	movs	r3, #180	; 0xb4
 80029f6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80029fa:	2303      	movs	r3, #3
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80029fe:	232c      	movs	r3, #44	; 0x2c
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002a0e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002a12:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8002a1c:	2306      	movs	r3, #6
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a4c:	e009      	b.n	8002a62 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5e:	3301      	adds	r3, #1
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d3f1      	bcc.n	8002a4e <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	21ff      	movs	r1, #255	; 0xff
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f002 ffc8 	bl	8005a04 <VL53L0X_WrByte>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002a7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002a82:	2200      	movs	r2, #0
 8002a84:	214f      	movs	r1, #79	; 0x4f
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f002 ffbc 	bl	8005a04 <VL53L0X_WrByte>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002a92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002a9a:	222c      	movs	r2, #44	; 0x2c
 8002a9c:	214e      	movs	r1, #78	; 0x4e
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f002 ffb0 	bl	8005a04 <VL53L0X_WrByte>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002aaa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	21ff      	movs	r1, #255	; 0xff
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f002 ffa4 	bl	8005a04 <VL53L0X_WrByte>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002ac2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8002aca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002ace:	461a      	mov	r2, r3
 8002ad0:	21b6      	movs	r1, #182	; 0xb6
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f002 ff96 	bl	8005a04 <VL53L0X_WrByte>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8002ade:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f002 ff8a 	bl	8005a04 <VL53L0X_WrByte>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8002af6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002afe:	f107 0210 	add.w	r2, r7, #16
 8002b02:	f107 0111 	add.w	r1, r7, #17
 8002b06:	2300      	movs	r3, #0
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fbbb 	bl	8003284 <VL53L0X_perform_ref_calibration>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8002b14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d121      	bne.n	8002b60 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8002b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b22:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002b38:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002b3c:	f107 0218 	add.w	r2, r7, #24
 8002b40:	9204      	str	r2, [sp, #16]
 8002b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b44:	9203      	str	r2, [sp, #12]
 8002b46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4623      	mov	r3, r4
 8002b52:	4602      	mov	r2, r0
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fe5e 	bl	8002816 <enable_ref_spads>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d174      	bne.n	8002c52 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002b6c:	f107 0312 	add.w	r3, r7, #18
 8002b70:	4619      	mov	r1, r3
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fecb 	bl	800290e <perform_ref_signal_measurement>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002b7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d161      	bne.n	8002c4a <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002b86:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002b88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d25d      	bcs.n	8002c4a <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b92:	e009      	b.n	8002ba8 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3f1      	bcc.n	8002b94 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002bb0:	e002      	b.n	8002bb8 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002bb8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fdb1 	bl	8002728 <is_aperture>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002bcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3ee      	bcc.n	8002bb2 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bda:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8002be8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002bec:	f107 0218 	add.w	r2, r7, #24
 8002bf0:	9204      	str	r2, [sp, #16]
 8002bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf4:	9203      	str	r2, [sp, #12]
 8002bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bf8:	9202      	str	r2, [sp, #8]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4623      	mov	r3, r4
 8002c02:	4602      	mov	r2, r0
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fe06 	bl	8002816 <enable_ref_spads>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002c10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11b      	bne.n	8002c50 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002c1c:	f107 0312 	add.w	r3, r7, #18
 8002c20:	4619      	mov	r1, r3
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff fe73 	bl	800290e <perform_ref_signal_measurement>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002c2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002c36:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002c38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d208      	bcs.n	8002c50 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8002c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002c48:	e002      	b.n	8002c50 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4e:	e000      	b.n	8002c52 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002c50:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002c52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80af 	bne.w	8002dba <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002c5c:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002c5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c60:	429a      	cmp	r2, r3
 8002c62:	f240 80aa 	bls.w	8002dba <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 fe1b 	bl	80098b8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002c82:	8a7b      	ldrh	r3, [r7, #18]
 8002c84:	461a      	mov	r2, r3
 8002c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfb8      	it	lt
 8002c8e:	425b      	neglt	r3, r3
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8002c98:	e086      	b.n	8002da8 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca8:	f7ff fce0 	bl	800266c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d103      	bne.n	8002cbc <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002cb4:	23ce      	movs	r3, #206	; 0xce
 8002cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8002cba:	e07e      	b.n	8002dba <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002cbc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fd2f 	bl	8002728 <is_aperture>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8002cda:	e06e      	b.n	8002dba <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cde:	3301      	adds	r3, #1
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8002cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fd33 	bl	800275c <enable_spad_bit>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002cfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d06:	3301      	adds	r3, #1
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8002d10:	4619      	mov	r1, r3
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff fd59 	bl	80027ca <set_ref_spad_map>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002d1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d146      	bne.n	8002db4 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002d26:	f107 0312 	add.w	r3, r7, #18
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fdee 	bl	800290e <perform_ref_signal_measurement>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002d38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d13b      	bne.n	8002db8 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002d40:	8a7b      	ldrh	r3, [r7, #18]
 8002d42:	461a      	mov	r2, r3
 8002d44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bfb8      	it	lt
 8002d4c:	425b      	neglt	r3, r3
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8002d50:	8a7b      	ldrh	r3, [r7, #18]
 8002d52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d21c      	bcs.n	8002d92 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d914      	bls.n	8002d8a <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4619      	mov	r1, r3
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fd2f 	bl	80027ca <set_ref_spad_map>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8002d78:	f107 011c 	add.w	r1, r7, #28
 8002d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f006 fd9a 	bl	80098b8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8002d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d86:	3b01      	subs	r3, #1
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002d90:	e00a      	b.n	8002da8 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da2:	4618      	mov	r0, r3
 8002da4:	f006 fd88 	bl	80098b8 <memcpy>
		while (!complete) {
 8002da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f43f af74 	beq.w	8002c9a <VL53L0X_perform_ref_spad_management+0x2b8>
 8002db2:	e002      	b.n	8002dba <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002db8:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002dba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d115      	bne.n	8002dee <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc6:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002dce:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8002dee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	375c      	adds	r7, #92	; 0x5c
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}

08002dfa <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8002dfa:	b590      	push	{r4, r7, lr}
 8002dfc:	b093      	sub	sp, #76	; 0x4c
 8002dfe:	af06      	add	r7, sp, #24
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8002e12:	23b4      	movs	r3, #180	; 0xb4
 8002e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8002e18:	2306      	movs	r3, #6
 8002e1a:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8002e1c:	232c      	movs	r3, #44	; 0x2c
 8002e1e:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002e20:	2201      	movs	r2, #1
 8002e22:	21ff      	movs	r1, #255	; 0xff
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f002 fded 	bl	8005a04 <VL53L0X_WrByte>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8002e38:	2200      	movs	r2, #0
 8002e3a:	214f      	movs	r1, #79	; 0x4f
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f002 fde1 	bl	8005a04 <VL53L0X_WrByte>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002e48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8002e50:	222c      	movs	r2, #44	; 0x2c
 8002e52:	214e      	movs	r1, #78	; 0x4e
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f002 fdd5 	bl	8005a04 <VL53L0X_WrByte>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	21ff      	movs	r1, #255	; 0xff
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f002 fdc9 	bl	8005a04 <VL53L0X_WrByte>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8002e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e84:	461a      	mov	r2, r3
 8002e86:	21b6      	movs	r1, #182	; 0xb6
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f002 fdbb 	bl	8005a04 <VL53L0X_WrByte>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	e009      	b.n	8002eae <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	3301      	adds	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d3f1      	bcc.n	8002e9a <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d011      	beq.n	8002ee0 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002ebc:	e002      	b.n	8002ec4 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002ec4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fc2b 	bl	8002728 <is_aperture>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <VL53L0X_set_reference_spads+0xe6>
 8002ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d3ee      	bcc.n	8002ebe <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8002eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ef0:	79f9      	ldrb	r1, [r7, #7]
 8002ef2:	f107 0214 	add.w	r2, r7, #20
 8002ef6:	9204      	str	r2, [sp, #16]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	9203      	str	r2, [sp, #12]
 8002efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efe:	9202      	str	r2, [sp, #8]
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4623      	mov	r3, r4
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff fc83 	bl	8002816 <enable_ref_spads>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8002f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	79fa      	ldrb	r2, [r7, #7]
 8002f34:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8002f38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3734      	adds	r7, #52	; 0x34
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}

08002f44 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	2100      	movs	r1, #0
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f002 fd4b 	bl	8005a04 <VL53L0X_WrByte>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9bf 	bl	80032fe <VL53L0X_measurement_poll_for_completion>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fab6 	bl	8002500 <VL53L0X_ClearInterruptMask>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f002 fd2d 	bl	8005a04 <VL53L0X_WrByte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

	return Status;
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	4608      	mov	r0, r1
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4603      	mov	r3, r0
 8002fca:	70fb      	strb	r3, [r7, #3]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70bb      	strb	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	21ff      	movs	r1, #255	; 0xff
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f002 fd0f 	bl	8005a04 <VL53L0X_WrByte>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f002 fd05 	bl	8005a04 <VL53L0X_WrByte>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	4313      	orrs	r3, r2
 8003002:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003004:	2200      	movs	r2, #0
 8003006:	21ff      	movs	r1, #255	; 0xff
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f002 fcfb 	bl	8005a04 <VL53L0X_WrByte>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	4313      	orrs	r3, r2
 8003016:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01e      	beq.n	800305c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800301e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	21cb      	movs	r1, #203	; 0xcb
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f002 fd6c 	bl	8005b08 <VL53L0X_RdByte>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	4313      	orrs	r3, r2
 8003038:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800303a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02a      	beq.n	8003098 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003042:	f107 030e 	add.w	r3, r7, #14
 8003046:	461a      	mov	r2, r3
 8003048:	21ee      	movs	r1, #238	; 0xee
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f002 fd5c 	bl	8005b08 <VL53L0X_RdByte>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	4313      	orrs	r3, r2
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	e01d      	b.n	8003098 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800305c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8003064:	78bb      	ldrb	r3, [r7, #2]
 8003066:	461a      	mov	r2, r3
 8003068:	21cb      	movs	r1, #203	; 0xcb
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f002 fcca 	bl	8005a04 <VL53L0X_WrByte>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4313      	orrs	r3, r2
 8003078:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800307a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003082:	787b      	ldrb	r3, [r7, #1]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	21ee      	movs	r1, #238	; 0xee
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f002 fd09 	bl	8005aa0 <VL53L0X_UpdateByte>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	4313      	orrs	r3, r2
 8003096:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003098:	2201      	movs	r2, #1
 800309a:	21ff      	movs	r1, #255	; 0xff
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f002 fcb1 	bl	8005a04 <VL53L0X_WrByte>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f002 fca7 	bl	8005a04 <VL53L0X_WrByte>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	4313      	orrs	r3, r2
 80030be:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030c0:	2200      	movs	r2, #0
 80030c2:	21ff      	movs	r1, #255	; 0xff
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f002 fc9d 	bl	8005a04 <VL53L0X_WrByte>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	f023 0310 	bic.w	r3, r3, #16
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	701a      	strb	r2, [r3, #0]

	return Status;
 80030e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	460b      	mov	r3, r1
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	4613      	mov	r3, r2
 8003100:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003122:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8003124:	2201      	movs	r2, #1
 8003126:	2101      	movs	r1, #1
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f002 fc6b 	bl	8005a04 <VL53L0X_WrByte>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003132:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800313a:	2140      	movs	r1, #64	; 0x40
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ff01 	bl	8002f44 <VL53L0X_perform_single_ref_calibration>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <VL53L0X_perform_vhv_calibration+0x8e>
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d112      	bne.n	800317a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003154:	7d39      	ldrb	r1, [r7, #20]
 8003156:	7d7a      	ldrb	r2, [r7, #21]
 8003158:	2300      	movs	r3, #0
 800315a:	9303      	str	r3, [sp, #12]
 800315c:	2301      	movs	r3, #1
 800315e:	9302      	str	r3, [sp, #8]
 8003160:	f107 0313 	add.w	r3, r7, #19
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	460b      	mov	r3, r1
 800316c:	2101      	movs	r1, #1
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff23 	bl	8002fba <VL53L0X_ref_calibration_io>
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]
 8003178:	e002      	b.n	8003180 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d112      	bne.n	80031ae <VL53L0X_perform_vhv_calibration+0xc2>
 8003188:	79bb      	ldrb	r3, [r7, #6]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00f      	beq.n	80031ae <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800318e:	7dbb      	ldrb	r3, [r7, #22]
 8003190:	461a      	mov	r2, r3
 8003192:	2101      	movs	r1, #1
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f002 fc35 	bl	8005a04 <VL53L0X_WrByte>
 800319a:	4603      	mov	r3, r0
 800319c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800319e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	7dba      	ldrb	r2, [r7, #22]
 80031aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80031ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b08a      	sub	sp, #40	; 0x28
 80031be:	af04      	add	r7, sp, #16
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	4611      	mov	r1, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	71fb      	strb	r3, [r7, #7]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80031e0:	79bb      	ldrb	r3, [r7, #6]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80031ec:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80031ee:	2202      	movs	r2, #2
 80031f0:	2101      	movs	r1, #1
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f002 fc06 	bl	8005a04 <VL53L0X_WrByte>
 80031f8:	4603      	mov	r3, r0
 80031fa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80031fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8003204:	2100      	movs	r1, #0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fe9c 	bl	8002f44 <VL53L0X_perform_single_ref_calibration>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d115      	bne.n	8003244 <VL53L0X_perform_phase_calibration+0x8a>
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d112      	bne.n	8003244 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800321e:	7d39      	ldrb	r1, [r7, #20]
 8003220:	7d7a      	ldrb	r2, [r7, #21]
 8003222:	2301      	movs	r3, #1
 8003224:	9303      	str	r3, [sp, #12]
 8003226:	2300      	movs	r3, #0
 8003228:	9302      	str	r3, [sp, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	f107 0313 	add.w	r3, r7, #19
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	460b      	mov	r3, r1
 8003236:	2101      	movs	r1, #1
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff febe 	bl	8002fba <VL53L0X_ref_calibration_io>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]
 8003242:	e002      	b.n	800324a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800324a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d112      	bne.n	8003278 <VL53L0X_perform_phase_calibration+0xbe>
 8003252:	79bb      	ldrb	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003258:	7dbb      	ldrb	r3, [r7, #22]
 800325a:	461a      	mov	r2, r3
 800325c:	2101      	movs	r1, #1
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f002 fbd0 	bl	8005a04 <VL53L0X_WrByte>
 8003264:	4603      	mov	r3, r0
 8003266:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	7dba      	ldrb	r2, [r7, #22]
 8003274:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80032a0:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	2300      	movs	r3, #0
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff ff1f 	bl	80030ec <VL53L0X_perform_vhv_calibration>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80032b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	2300      	movs	r3, #0
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff ff7a 	bl	80031ba <VL53L0X_perform_phase_calibration>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80032ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80032d2:	7dbb      	ldrb	r3, [r7, #22]
 80032d4:	461a      	mov	r2, r3
 80032d6:	2101      	movs	r1, #1
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f002 fb93 	bl	8005a04 <VL53L0X_WrByte>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80032e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	7dba      	ldrb	r2, [r7, #22]
 80032ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80032f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003312:	f107 030f 	add.w	r3, r7, #15
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fe fe03 	bl	8001f24 <VL53L0X_GetMeasurementDataReady>
 800331e:	4603      	mov	r3, r0
 8003320:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8003322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d110      	bne.n	800334c <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d00f      	beq.n	8003350 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3301      	adds	r3, #1
 8003334:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800333c:	d302      	bcc.n	8003344 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800333e:	23f9      	movs	r3, #249	; 0xf9
 8003340:	75fb      	strb	r3, [r7, #23]
			break;
 8003342:	e006      	b.n	8003352 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f002 fc7d 	bl	8005c44 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800334a:	e7e2      	b.n	8003312 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8003350:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8003352:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	3301      	adds	r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80033b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033b6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80033b8:	e002      	b.n	80033c0 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d8f8      	bhi.n	80033ba <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80033c8:	e017      	b.n	80033fa <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4413      	add	r3, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d30b      	bcc.n	80033ee <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4413      	add	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e002      	b.n	80033f4 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e4      	bne.n	80033ca <VL53L0X_isqrt+0x24>
	}

	return res;
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8003418:	2200      	movs	r2, #0
 800341a:	2183      	movs	r1, #131	; 0x83
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f002 faf1 	bl	8005a04 <VL53L0X_WrByte>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	4313      	orrs	r3, r2
 800342a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800342c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d11e      	bne.n	8003472 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8003438:	f107 030f 	add.w	r3, r7, #15
 800343c:	461a      	mov	r2, r3
 800343e:	2183      	movs	r1, #131	; 0x83
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f002 fb61 	bl	8005b08 <VL53L0X_RdByte>
 8003446:	4603      	mov	r3, r0
 8003448:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <VL53L0X_device_read_strobe+0x5a>
 8003450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3301      	adds	r3, #1
 800345c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003464:	d3e8      	bcc.n	8003438 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800346c:	d301      	bcc.n	8003472 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800346e:	23f9      	movs	r3, #249	; 0xf9
 8003470:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8003472:	2201      	movs	r2, #1
 8003474:	2183      	movs	r1, #131	; 0x83
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f002 fac4 	bl	8005a04 <VL53L0X_WrByte>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	4313      	orrs	r3, r2
 8003484:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8003486:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b098      	sub	sp, #96	; 0x60
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80034c2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80034c6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80034da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80034de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034e2:	2b07      	cmp	r3, #7
 80034e4:	f000 8408 	beq.w	8003cf8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80034e8:	2201      	movs	r2, #1
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f002 fa89 	bl	8005a04 <VL53L0X_WrByte>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003500:	2201      	movs	r2, #1
 8003502:	21ff      	movs	r1, #255	; 0xff
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f002 fa7d 	bl	8005a04 <VL53L0X_WrByte>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003512:	4313      	orrs	r3, r2
 8003514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003518:	2200      	movs	r2, #0
 800351a:	2100      	movs	r1, #0
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f002 fa71 	bl	8005a04 <VL53L0X_WrByte>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800352a:	4313      	orrs	r3, r2
 800352c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003530:	2206      	movs	r2, #6
 8003532:	21ff      	movs	r1, #255	; 0xff
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f002 fa65 	bl	8005a04 <VL53L0X_WrByte>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003542:	4313      	orrs	r3, r2
 8003544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003548:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800354c:	461a      	mov	r2, r3
 800354e:	2183      	movs	r1, #131	; 0x83
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f002 fad9 	bl	8005b08 <VL53L0X_RdByte>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800355e:	4313      	orrs	r3, r2
 8003560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	2183      	movs	r1, #131	; 0x83
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f002 fa46 	bl	8005a04 <VL53L0X_WrByte>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003580:	4313      	orrs	r3, r2
 8003582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003586:	2207      	movs	r2, #7
 8003588:	21ff      	movs	r1, #255	; 0xff
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f002 fa3a 	bl	8005a04 <VL53L0X_WrByte>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003598:	4313      	orrs	r3, r2
 800359a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800359e:	2201      	movs	r2, #1
 80035a0:	2181      	movs	r1, #129	; 0x81
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f002 fa2e 	bl	8005a04 <VL53L0X_WrByte>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f002 fb44 	bl	8005c44 <VL53L0X_PollingDelay>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80035ca:	2201      	movs	r2, #1
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f002 fa18 	bl	8005a04 <VL53L0X_WrByte>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035dc:	4313      	orrs	r3, r2
 80035de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8098 	beq.w	800371e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80035ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035f2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8091 	bne.w	800371e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80035fc:	226b      	movs	r2, #107	; 0x6b
 80035fe:	2194      	movs	r1, #148	; 0x94
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f002 f9ff 	bl	8005a04 <VL53L0X_WrByte>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800360e:	4313      	orrs	r3, r2
 8003610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fef9 	bl	800340c <VL53L0X_device_read_strobe>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003622:	4313      	orrs	r3, r2
 8003624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362c:	461a      	mov	r2, r3
 800362e:	2190      	movs	r1, #144	; 0x90
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f002 facb 	bl	8005bcc <VL53L0X_RdDWord>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800363e:	4313      	orrs	r3, r2
 8003640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800364e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	0bdb      	lsrs	r3, r3, #15
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003660:	2224      	movs	r2, #36	; 0x24
 8003662:	2194      	movs	r1, #148	; 0x94
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f002 f9cd 	bl	8005a04 <VL53L0X_WrByte>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003672:	4313      	orrs	r3, r2
 8003674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fec7 	bl	800340c <VL53L0X_device_read_strobe>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003686:	4313      	orrs	r3, r2
 8003688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800368c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003690:	461a      	mov	r2, r3
 8003692:	2190      	movs	r1, #144	; 0x90
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f002 fa99 	bl	8005bcc <VL53L0X_RdDWord>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	0e1b      	lsrs	r3, r3, #24
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80036c6:	2225      	movs	r2, #37	; 0x25
 80036c8:	2194      	movs	r1, #148	; 0x94
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f002 f99a 	bl	8005a04 <VL53L0X_WrByte>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036d8:	4313      	orrs	r3, r2
 80036da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe94 	bl	800340c <VL53L0X_device_read_strobe>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80036f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036f6:	461a      	mov	r2, r3
 80036f8:	2190      	movs	r1, #144	; 0x90
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f002 fa66 	bl	8005bcc <VL53L0X_RdDWord>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003708:	4313      	orrs	r3, r2
 800370a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	0e1b      	lsrs	r3, r3, #24
 8003712:	b2db      	uxtb	r3, r3
 8003714:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8189 	beq.w	8003a3c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800372a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800372e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 8182 	bne.w	8003a3c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8003738:	2202      	movs	r2, #2
 800373a:	2194      	movs	r1, #148	; 0x94
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f002 f961 	bl	8005a04 <VL53L0X_WrByte>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800374a:	4313      	orrs	r3, r2
 800374c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fe5b 	bl	800340c <VL53L0X_device_read_strobe>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800375e:	4313      	orrs	r3, r2
 8003760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003764:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8003768:	461a      	mov	r2, r3
 800376a:	2190      	movs	r1, #144	; 0x90
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f002 f9cb 	bl	8005b08 <VL53L0X_RdByte>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800377a:	4313      	orrs	r3, r2
 800377c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003780:	227b      	movs	r2, #123	; 0x7b
 8003782:	2194      	movs	r1, #148	; 0x94
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f002 f93d 	bl	8005a04 <VL53L0X_WrByte>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003792:	4313      	orrs	r3, r2
 8003794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fe37 	bl	800340c <VL53L0X_device_read_strobe>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80037ac:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80037b0:	461a      	mov	r2, r3
 80037b2:	2190      	movs	r1, #144	; 0x90
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f002 f9a7 	bl	8005b08 <VL53L0X_RdByte>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80037c8:	2277      	movs	r2, #119	; 0x77
 80037ca:	2194      	movs	r1, #148	; 0x94
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f002 f919 	bl	8005a04 <VL53L0X_WrByte>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037da:	4313      	orrs	r3, r2
 80037dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fe13 	bl	800340c <VL53L0X_device_read_strobe>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80037f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037f8:	461a      	mov	r2, r3
 80037fa:	2190      	movs	r1, #144	; 0x90
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f002 f9e5 	bl	8005bcc <VL53L0X_RdDWord>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800380a:	4313      	orrs	r3, r2
 800380c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	0e5b      	lsrs	r3, r3, #25
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800381a:	b2db      	uxtb	r3, r3
 800381c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	0c9b      	lsrs	r3, r3, #18
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003828:	b2db      	uxtb	r3, r3
 800382a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	0adb      	lsrs	r3, r3, #11
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003836:	b2db      	uxtb	r3, r3
 8003838:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003844:	b2db      	uxtb	r3, r3
 8003846:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	b2db      	uxtb	r3, r3
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800385a:	2278      	movs	r2, #120	; 0x78
 800385c:	2194      	movs	r1, #148	; 0x94
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f002 f8d0 	bl	8005a04 <VL53L0X_WrByte>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800386c:	4313      	orrs	r3, r2
 800386e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fdca 	bl	800340c <VL53L0X_device_read_strobe>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003880:	4313      	orrs	r3, r2
 8003882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800388a:	461a      	mov	r2, r3
 800388c:	2190      	movs	r1, #144	; 0x90
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f002 f99c 	bl	8005bcc <VL53L0X_RdDWord>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800389c:	4313      	orrs	r3, r2
 800389e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	0f5b      	lsrs	r3, r3, #29
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80038ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038b2:	4413      	add	r3, r2
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	0d9b      	lsrs	r3, r3, #22
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	0bdb      	lsrs	r3, r3, #15
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003902:	2279      	movs	r2, #121	; 0x79
 8003904:	2194      	movs	r1, #148	; 0x94
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f002 f87c 	bl	8005a04 <VL53L0X_WrByte>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003914:	4313      	orrs	r3, r2
 8003916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fd76 	bl	800340c <VL53L0X_device_read_strobe>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003928:	4313      	orrs	r3, r2
 800392a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800392e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003932:	461a      	mov	r2, r3
 8003934:	2190      	movs	r1, #144	; 0x90
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f002 f948 	bl	8005bcc <VL53L0X_RdDWord>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003944:	4313      	orrs	r3, r2
 8003946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003954:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8003956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800395a:	4413      	add	r3, r2
 800395c:	b2db      	uxtb	r3, r3
 800395e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	0cdb      	lsrs	r3, r3, #19
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396a:	b2db      	uxtb	r3, r3
 800396c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	0b1b      	lsrs	r3, r3, #12
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003978:	b2db      	uxtb	r3, r3
 800397a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003986:	b2db      	uxtb	r3, r3
 8003988:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	b2db      	uxtb	r3, r3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800399c:	227a      	movs	r2, #122	; 0x7a
 800399e:	2194      	movs	r1, #148	; 0x94
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f002 f82f 	bl	8005a04 <VL53L0X_WrByte>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fd29 	bl	800340c <VL53L0X_device_read_strobe>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039cc:	461a      	mov	r2, r3
 80039ce:	2190      	movs	r1, #144	; 0x90
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f002 f8fb 	bl	8005bcc <VL53L0X_RdDWord>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039de:	4313      	orrs	r3, r2
 80039e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	0f9b      	lsrs	r3, r3, #30
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ee:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80039f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039f4:	4413      	add	r3, r2
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	0ddb      	lsrs	r3, r3, #23
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	0a5b      	lsrs	r3, r3, #9
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80f1 	beq.w	8003c2a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a4c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 80ea 	bne.w	8003c2a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003a56:	227b      	movs	r2, #123	; 0x7b
 8003a58:	2194      	movs	r1, #148	; 0x94
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f001 ffd2 	bl	8005a04 <VL53L0X_WrByte>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fccc 	bl	800340c <VL53L0X_device_read_strobe>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a86:	461a      	mov	r2, r3
 8003a88:	2190      	movs	r1, #144	; 0x90
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f002 f89e 	bl	8005bcc <VL53L0X_RdDWord>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003a9e:	227c      	movs	r2, #124	; 0x7c
 8003aa0:	2194      	movs	r1, #148	; 0x94
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f001 ffae 	bl	8005a04 <VL53L0X_WrByte>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fca8 	bl	800340c <VL53L0X_device_read_strobe>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2190      	movs	r1, #144	; 0x90
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f002 f87a 	bl	8005bcc <VL53L0X_RdDWord>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003ae6:	2273      	movs	r2, #115	; 0x73
 8003ae8:	2194      	movs	r1, #148	; 0x94
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f001 ff8a 	bl	8005a04 <VL53L0X_WrByte>
 8003af0:	4603      	mov	r3, r0
 8003af2:	461a      	mov	r2, r3
 8003af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fc84 	bl	800340c <VL53L0X_device_read_strobe>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b16:	461a      	mov	r2, r3
 8003b18:	2190      	movs	r1, #144	; 0x90
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f002 f856 	bl	8005bcc <VL53L0X_RdDWord>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003b36:	2274      	movs	r2, #116	; 0x74
 8003b38:	2194      	movs	r1, #148	; 0x94
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 ff62 	bl	8005a04 <VL53L0X_WrByte>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fc5c 	bl	800340c <VL53L0X_device_read_strobe>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b66:	461a      	mov	r2, r3
 8003b68:	2190      	movs	r1, #144	; 0x90
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f002 f82e 	bl	8005bcc <VL53L0X_RdDWord>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b84:	4313      	orrs	r3, r2
 8003b86:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003b88:	2275      	movs	r2, #117	; 0x75
 8003b8a:	2194      	movs	r1, #148	; 0x94
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 ff39 	bl	8005a04 <VL53L0X_WrByte>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fc33 	bl	800340c <VL53L0X_device_read_strobe>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2190      	movs	r1, #144	; 0x90
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f002 f805 	bl	8005bcc <VL53L0X_RdDWord>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003bd8:	2276      	movs	r2, #118	; 0x76
 8003bda:	2194      	movs	r1, #148	; 0x94
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f001 ff11 	bl	8005a04 <VL53L0X_WrByte>
 8003be2:	4603      	mov	r3, r0
 8003be4:	461a      	mov	r2, r3
 8003be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fc0b 	bl	800340c <VL53L0X_device_read_strobe>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2190      	movs	r1, #144	; 0x90
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f001 ffdd 	bl	8005bcc <VL53L0X_RdDWord>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c26:	4313      	orrs	r3, r2
 8003c28:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2181      	movs	r1, #129	; 0x81
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f001 fee8 	bl	8005a04 <VL53L0X_WrByte>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003c42:	2206      	movs	r2, #6
 8003c44:	21ff      	movs	r1, #255	; 0xff
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 fedc 	bl	8005a04 <VL53L0X_WrByte>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003c5a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2183      	movs	r1, #131	; 0x83
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f001 ff50 	bl	8005b08 <VL53L0X_RdByte>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	2183      	movs	r1, #131	; 0x83
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f001 febd 	bl	8005a04 <VL53L0X_WrByte>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	21ff      	movs	r1, #255	; 0xff
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 feb1 	bl	8005a04 <VL53L0X_WrByte>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f001 fea5 	bl	8005a04 <VL53L0X_WrByte>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	21ff      	movs	r1, #255	; 0xff
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f001 fe99 	bl	8005a04 <VL53L0X_WrByte>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f001 fe8d 	bl	8005a04 <VL53L0X_WrByte>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003cf8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 808f 	bne.w	8003e20 <VL53L0X_get_info_from_device+0x98e>
 8003d02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d06:	2b07      	cmp	r3, #7
 8003d08:	f000 808a 	beq.w	8003e20 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003d16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d1a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11e      	bne.n	8003d60 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003d28:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003d32:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3a:	e00e      	b.n	8003d5a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8003d3c:	f107 0208 	add.w	r2, r7, #8
 8003d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d42:	4413      	add	r3, r2
 8003d44:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8003d50:	460a      	mov	r2, r1
 8003d52:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d56:	3301      	adds	r3, #1
 8003d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	dded      	ble.n	8003d3c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d6e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d112      	bne.n	8003d9c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d80:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	33f3      	adds	r3, #243	; 0xf3
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003d90:	f107 0310 	add.w	r3, r7, #16
 8003d94:	4619      	mov	r1, r3
 8003d96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d98:	f005 fdbc 	bl	8009914 <strcpy>

		}

		if (((option & 4) == 4) &&
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d030      	beq.n	8003e08 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003da6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003daa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d12a      	bne.n	8003e08 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc4:	025b      	lsls	r3, r3, #9
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dcc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8003dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8003ddc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8003df0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8003df4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003df8:	425b      	negs	r3, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8003e00:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8003e08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8003e16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e20:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3760      	adds	r7, #96	; 0x60
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8003e38:	f240 6277 	movw	r2, #1655	; 0x677
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8003e44:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003e48:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b087      	sub	sp, #28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003e86:	e005      	b.n	8003e94 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	3301      	adds	r3, #1
 8003e92:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f4      	bne.n	8003e88 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8003e9e:	89fb      	ldrh	r3, [r7, #14]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8003eac:	4413      	add	r3, r2
 8003eae:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8003eb0:	8afb      	ldrh	r3, [r7, #22]

}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	0a12      	lsrs	r2, r2, #8
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
	...

08003ee8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	4619      	mov	r1, r3
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ff94 	bl	8003e2c <VL53L0X_calc_macro_period_ps>
 8003f04:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <VL53L0X_calc_timeout_mclks+0x50>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f1c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	441a      	add	r2, r3
	timeout_period_mclks =
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	10624dd3 	.word	0x10624dd3

08003f3c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003f50:	787b      	ldrb	r3, [r7, #1]
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff69 	bl	8003e2c <VL53L0X_calc_macro_period_ps>
 8003f5a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <VL53L0X_calc_timeout_us+0x50>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	099b      	lsrs	r3, r3, #6
 8003f6a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8003f6c:	887b      	ldrh	r3, [r7, #2]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <VL53L0X_calc_timeout_us+0x50>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8003f82:	697b      	ldr	r3, [r7, #20]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	10624dd3 	.word	0x10624dd3

08003f90 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	; 0x30
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <get_sequence_step_timeout+0x38>
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d002      	beq.n	8003fc8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8003fc2:	7afb      	ldrb	r3, [r7, #11]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d128      	bne.n	800401a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003fc8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2100      	movs	r1, #0
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7fd fa86 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8003fdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8003fe4:	f107 0320 	add.w	r3, r7, #32
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2146      	movs	r1, #70	; 0x46
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f001 fd8b 	bl	8005b08 <VL53L0X_RdByte>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8003ff8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff5c 	bl	8003ebc <VL53L0X_decode_timeout>
 8004004:	4603      	mov	r3, r0
 8004006:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004008:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800400c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800400e:	4619      	mov	r1, r3
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff93 	bl	8003f3c <VL53L0X_calc_timeout_us>
 8004016:	62b8      	str	r0, [r7, #40]	; 0x28
 8004018:	e092      	b.n	8004140 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d135      	bne.n	800408c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004020:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004024:	461a      	mov	r2, r3
 8004026:	2100      	movs	r1, #0
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7fd fa5a 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004034:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8081 	bne.w	8004140 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800403e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004042:	461a      	mov	r2, r3
 8004044:	2100      	movs	r1, #0
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7fd fa4b 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8004052:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800405a:	f107 031e 	add.w	r3, r7, #30
 800405e:	461a      	mov	r2, r3
 8004060:	2151      	movs	r1, #81	; 0x51
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f001 fd7a 	bl	8005b5c <VL53L0X_RdWord>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800406e:	8bfb      	ldrh	r3, [r7, #30]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff23 	bl	8003ebc <VL53L0X_decode_timeout>
 8004076:	4603      	mov	r3, r0
 8004078:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800407a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800407e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004080:	4619      	mov	r1, r3
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff ff5a 	bl	8003f3c <VL53L0X_calc_timeout_us>
 8004088:	62b8      	str	r0, [r7, #40]	; 0x28
 800408a:	e059      	b.n	8004140 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800408c:	7afb      	ldrb	r3, [r7, #11]
 800408e:	2b04      	cmp	r3, #4
 8004090:	d156      	bne.n	8004140 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	4619      	mov	r1, r3
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7fd fb2d 	bl	80016f8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01d      	beq.n	80040e4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80040ac:	461a      	mov	r2, r3
 80040ae:	2100      	movs	r1, #0
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7fd fa16 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80040bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80040c4:	f107 031e 	add.w	r3, r7, #30
 80040c8:	461a      	mov	r2, r3
 80040ca:	2151      	movs	r1, #81	; 0x51
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f001 fd45 	bl	8005b5c <VL53L0X_RdWord>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80040d8:	8bfb      	ldrh	r3, [r7, #30]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff feee 	bl	8003ebc <VL53L0X_decode_timeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80040e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7fd f9f4 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10f      	bne.n	8004128 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8004108:	f107 031c 	add.w	r3, r7, #28
 800410c:	461a      	mov	r2, r3
 800410e:	2171      	movs	r1, #113	; 0x71
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f001 fd23 	bl	8005b5c <VL53L0X_RdWord>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800411c:	8bbb      	ldrh	r3, [r7, #28]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fecc 	bl	8003ebc <VL53L0X_decode_timeout>
 8004124:	4603      	mov	r3, r0
 8004126:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004128:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800412a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004130:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004136:	4619      	mov	r1, r3
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff feff 	bl	8003f3c <VL53L0X_calc_timeout_us>
 800413e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004144:	601a      	str	r2, [r3, #0]

	return Status;
 8004146:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800414a:	4618      	mov	r0, r3
 800414c:	3730      	adds	r7, #48	; 0x30
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08a      	sub	sp, #40	; 0x28
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	460b      	mov	r3, r1
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <set_sequence_step_timeout+0x26>
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d002      	beq.n	8004178 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d138      	bne.n	80041ea <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004178:	f107 031b 	add.w	r3, r7, #27
 800417c:	461a      	mov	r2, r3
 800417e:	2100      	movs	r1, #0
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7fd f9ae 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800418c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11a      	bne.n	80041ca <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004194:	7efb      	ldrb	r3, [r7, #27]
 8004196:	461a      	mov	r2, r3
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff fea4 	bl	8003ee8 <VL53L0X_calc_timeout_mclks>
 80041a0:	4603      	mov	r3, r0
 80041a2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80041a4:	8bbb      	ldrh	r3, [r7, #28]
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d903      	bls.n	80041b4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80041ac:	23ff      	movs	r3, #255	; 0xff
 80041ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80041b2:	e004      	b.n	80041be <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80041b4:	8bbb      	ldrh	r3, [r7, #28]
 80041b6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80041b8:	3b01      	subs	r3, #1
 80041ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80041be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80041ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 80ab 	bne.w	800432a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80041d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041d8:	461a      	mov	r2, r3
 80041da:	2146      	movs	r1, #70	; 0x46
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f001 fc11 	bl	8005a04 <VL53L0X_WrByte>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80041e8:	e09f      	b.n	800432a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80041ea:	7afb      	ldrb	r3, [r7, #11]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d135      	bne.n	800425c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80041f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11b      	bne.n	8004230 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80041f8:	f107 031b 	add.w	r3, r7, #27
 80041fc:	461a      	mov	r2, r3
 80041fe:	2100      	movs	r1, #0
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7fd f96e 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800420c:	7efb      	ldrb	r3, [r7, #27]
 800420e:	461a      	mov	r2, r3
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fe68 	bl	8003ee8 <VL53L0X_calc_timeout_mclks>
 8004218:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800421a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800421c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fe21 	bl	8003e66 <VL53L0X_encode_timeout>
 8004224:	4603      	mov	r3, r0
 8004226:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004228:	8b3a      	ldrh	r2, [r7, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004234:	2b00      	cmp	r3, #0
 8004236:	d108      	bne.n	800424a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8004238:	8b3b      	ldrh	r3, [r7, #24]
 800423a:	461a      	mov	r2, r3
 800423c:	2151      	movs	r1, #81	; 0x51
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f001 fc04 	bl	8005a4c <VL53L0X_WrWord>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800424a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800424e:	2b00      	cmp	r3, #0
 8004250:	d16b      	bne.n	800432a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800425a:	e066      	b.n	800432a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d160      	bne.n	8004324 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	4619      	mov	r1, r3
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7fd fa45 	bl	80016f8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01d      	beq.n	80042b4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004278:	f107 031b 	add.w	r3, r7, #27
 800427c:	461a      	mov	r2, r3
 800427e:	2100      	movs	r1, #0
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7fd f92e 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800428c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8004294:	f107 0318 	add.w	r3, r7, #24
 8004298:	461a      	mov	r2, r3
 800429a:	2151      	movs	r1, #81	; 0x51
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f001 fc5d 	bl	8005b5c <VL53L0X_RdWord>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80042a8:	8b3b      	ldrh	r3, [r7, #24]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fe06 	bl	8003ebc <VL53L0X_decode_timeout>
 80042b0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80042b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80042b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80042bc:	f107 031b 	add.w	r3, r7, #27
 80042c0:	461a      	mov	r2, r3
 80042c2:	2101      	movs	r1, #1
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7fd f90c 	bl	80014e2 <VL53L0X_GetVcselPulsePeriod>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80042d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d128      	bne.n	800432a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80042d8:	7efb      	ldrb	r3, [r7, #27]
 80042da:	461a      	mov	r2, r3
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff fe02 	bl	8003ee8 <VL53L0X_calc_timeout_mclks>
 80042e4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80042e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	4413      	add	r3, r2
 80042ec:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80042ee:	6a38      	ldr	r0, [r7, #32]
 80042f0:	f7ff fdb9 	bl	8003e66 <VL53L0X_encode_timeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80042f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8004300:	8bfb      	ldrh	r3, [r7, #30]
 8004302:	461a      	mov	r2, r3
 8004304:	2171      	movs	r1, #113	; 0x71
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f001 fba0 	bl	8005a4c <VL53L0X_WrWord>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8004312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004322:	e002      	b.n	800432a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004324:	23fc      	movs	r3, #252	; 0xfc
 8004326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800432a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08a      	sub	sp, #40	; 0x28
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
 8004342:	4613      	mov	r3, r2
 8004344:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800434c:	230c      	movs	r3, #12
 800434e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8004352:	2312      	movs	r3, #18
 8004354:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800435e:	230e      	movs	r3, #14
 8004360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8004368:	78bb      	ldrb	r3, [r7, #2]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004374:	23fc      	movs	r3, #252	; 0xfc
 8004376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800437a:	e020      	b.n	80043be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <VL53L0X_set_vcsel_pulse_period+0x68>
 8004382:	78ba      	ldrb	r2, [r7, #2]
 8004384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004388:	429a      	cmp	r2, r3
 800438a:	d304      	bcc.n	8004396 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800438c:	78ba      	ldrb	r2, [r7, #2]
 800438e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004392:	429a      	cmp	r2, r3
 8004394:	d903      	bls.n	800439e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004396:	23fc      	movs	r3, #252	; 0xfc
 8004398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800439c:	e00f      	b.n	80043be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <VL53L0X_set_vcsel_pulse_period+0x88>
 80043a4:	78ba      	ldrb	r2, [r7, #2]
 80043a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d304      	bcc.n	80043b8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80043ae:	78ba      	ldrb	r2, [r7, #2]
 80043b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d902      	bls.n	80043be <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043b8:	23fc      	movs	r3, #252	; 0xfc
 80043ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80043be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80043c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043ca:	e239      	b.n	8004840 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d150      	bne.n	8004474 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80043d2:	78bb      	ldrb	r3, [r7, #2]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d110      	bne.n	80043fa <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80043d8:	2218      	movs	r2, #24
 80043da:	2157      	movs	r1, #87	; 0x57
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f001 fb11 	bl	8005a04 <VL53L0X_WrByte>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80043e8:	2208      	movs	r2, #8
 80043ea:	2156      	movs	r1, #86	; 0x56
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f001 fb09 	bl	8005a04 <VL53L0X_WrByte>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043f8:	e17f      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80043fa:	78bb      	ldrb	r3, [r7, #2]
 80043fc:	2b0e      	cmp	r3, #14
 80043fe:	d110      	bne.n	8004422 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8004400:	2230      	movs	r2, #48	; 0x30
 8004402:	2157      	movs	r1, #87	; 0x57
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 fafd 	bl	8005a04 <VL53L0X_WrByte>
 800440a:	4603      	mov	r3, r0
 800440c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8004410:	2208      	movs	r2, #8
 8004412:	2156      	movs	r1, #86	; 0x56
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f001 faf5 	bl	8005a04 <VL53L0X_WrByte>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004420:	e16b      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8004422:	78bb      	ldrb	r3, [r7, #2]
 8004424:	2b10      	cmp	r3, #16
 8004426:	d110      	bne.n	800444a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8004428:	2240      	movs	r2, #64	; 0x40
 800442a:	2157      	movs	r1, #87	; 0x57
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f001 fae9 	bl	8005a04 <VL53L0X_WrByte>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8004438:	2208      	movs	r2, #8
 800443a:	2156      	movs	r1, #86	; 0x56
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 fae1 	bl	8005a04 <VL53L0X_WrByte>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004448:	e157      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800444a:	78bb      	ldrb	r3, [r7, #2]
 800444c:	2b12      	cmp	r3, #18
 800444e:	f040 8154 	bne.w	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004452:	2250      	movs	r2, #80	; 0x50
 8004454:	2157      	movs	r1, #87	; 0x57
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f001 fad4 	bl	8005a04 <VL53L0X_WrByte>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8004462:	2208      	movs	r2, #8
 8004464:	2156      	movs	r1, #86	; 0x56
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 facc 	bl	8005a04 <VL53L0X_WrByte>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004472:	e142      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b01      	cmp	r3, #1
 8004478:	f040 813f 	bne.w	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800447c:	78bb      	ldrb	r3, [r7, #2]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d14c      	bne.n	800451c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8004482:	2210      	movs	r2, #16
 8004484:	2148      	movs	r1, #72	; 0x48
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f001 fabc 	bl	8005a04 <VL53L0X_WrByte>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8004492:	2208      	movs	r2, #8
 8004494:	2147      	movs	r1, #71	; 0x47
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 fab4 	bl	8005a04 <VL53L0X_WrByte>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80044a2:	2202      	movs	r2, #2
 80044a4:	2132      	movs	r1, #50	; 0x32
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f001 faac 	bl	8005a04 <VL53L0X_WrByte>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80044ba:	220c      	movs	r2, #12
 80044bc:	2130      	movs	r1, #48	; 0x30
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 faa0 	bl	8005a04 <VL53L0X_WrByte>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80044d2:	2201      	movs	r2, #1
 80044d4:	21ff      	movs	r1, #255	; 0xff
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fa94 	bl	8005a04 <VL53L0X_WrByte>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80044ea:	2230      	movs	r2, #48	; 0x30
 80044ec:	2130      	movs	r1, #48	; 0x30
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f001 fa88 	bl	8005a04 <VL53L0X_WrByte>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004502:	2200      	movs	r2, #0
 8004504:	21ff      	movs	r1, #255	; 0xff
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f001 fa7c 	bl	8005a04 <VL53L0X_WrByte>
 800450c:	4603      	mov	r3, r0
 800450e:	461a      	mov	r2, r3
 8004510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004514:	4313      	orrs	r3, r2
 8004516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800451a:	e0ee      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800451c:	78bb      	ldrb	r3, [r7, #2]
 800451e:	2b0a      	cmp	r3, #10
 8004520:	d14c      	bne.n	80045bc <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8004522:	2228      	movs	r2, #40	; 0x28
 8004524:	2148      	movs	r1, #72	; 0x48
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 fa6c 	bl	8005a04 <VL53L0X_WrByte>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8004532:	2208      	movs	r2, #8
 8004534:	2147      	movs	r1, #71	; 0x47
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 fa64 	bl	8005a04 <VL53L0X_WrByte>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004542:	2203      	movs	r2, #3
 8004544:	2132      	movs	r1, #50	; 0x32
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 fa5c 	bl	8005a04 <VL53L0X_WrByte>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004554:	4313      	orrs	r3, r2
 8004556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800455a:	2209      	movs	r2, #9
 800455c:	2130      	movs	r1, #48	; 0x30
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f001 fa50 	bl	8005a04 <VL53L0X_WrByte>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800456c:	4313      	orrs	r3, r2
 800456e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004572:	2201      	movs	r2, #1
 8004574:	21ff      	movs	r1, #255	; 0xff
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fa44 	bl	8005a04 <VL53L0X_WrByte>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004584:	4313      	orrs	r3, r2
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800458a:	2220      	movs	r2, #32
 800458c:	2130      	movs	r1, #48	; 0x30
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fa38 	bl	8005a04 <VL53L0X_WrByte>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800459c:	4313      	orrs	r3, r2
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80045a2:	2200      	movs	r2, #0
 80045a4:	21ff      	movs	r1, #255	; 0xff
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 fa2c 	bl	8005a04 <VL53L0X_WrByte>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045ba:	e09e      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80045bc:	78bb      	ldrb	r3, [r7, #2]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d14c      	bne.n	800465c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80045c2:	2238      	movs	r2, #56	; 0x38
 80045c4:	2148      	movs	r1, #72	; 0x48
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 fa1c 	bl	8005a04 <VL53L0X_WrByte>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80045d2:	2208      	movs	r2, #8
 80045d4:	2147      	movs	r1, #71	; 0x47
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f001 fa14 	bl	8005a04 <VL53L0X_WrByte>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80045e2:	2203      	movs	r2, #3
 80045e4:	2132      	movs	r1, #50	; 0x32
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 fa0c 	bl	8005a04 <VL53L0X_WrByte>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80045fa:	2208      	movs	r2, #8
 80045fc:	2130      	movs	r1, #48	; 0x30
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 fa00 	bl	8005a04 <VL53L0X_WrByte>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800460c:	4313      	orrs	r3, r2
 800460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004612:	2201      	movs	r2, #1
 8004614:	21ff      	movs	r1, #255	; 0xff
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 f9f4 	bl	8005a04 <VL53L0X_WrByte>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004624:	4313      	orrs	r3, r2
 8004626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800462a:	2220      	movs	r2, #32
 800462c:	2130      	movs	r1, #48	; 0x30
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f001 f9e8 	bl	8005a04 <VL53L0X_WrByte>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800463c:	4313      	orrs	r3, r2
 800463e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004642:	2200      	movs	r2, #0
 8004644:	21ff      	movs	r1, #255	; 0xff
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f001 f9dc 	bl	8005a04 <VL53L0X_WrByte>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004654:	4313      	orrs	r3, r2
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800465a:	e04e      	b.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800465c:	78bb      	ldrb	r3, [r7, #2]
 800465e:	2b0e      	cmp	r3, #14
 8004660:	d14b      	bne.n	80046fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004662:	2248      	movs	r2, #72	; 0x48
 8004664:	2148      	movs	r1, #72	; 0x48
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f001 f9cc 	bl	8005a04 <VL53L0X_WrByte>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8004672:	2208      	movs	r2, #8
 8004674:	2147      	movs	r1, #71	; 0x47
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 f9c4 	bl	8005a04 <VL53L0X_WrByte>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004682:	2203      	movs	r2, #3
 8004684:	2132      	movs	r1, #50	; 0x32
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f001 f9bc 	bl	8005a04 <VL53L0X_WrByte>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004694:	4313      	orrs	r3, r2
 8004696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800469a:	2207      	movs	r2, #7
 800469c:	2130      	movs	r1, #48	; 0x30
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f001 f9b0 	bl	8005a04 <VL53L0X_WrByte>
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80046b2:	2201      	movs	r2, #1
 80046b4:	21ff      	movs	r1, #255	; 0xff
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 f9a4 	bl	8005a04 <VL53L0X_WrByte>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80046ca:	2220      	movs	r2, #32
 80046cc:	2130      	movs	r1, #48	; 0x30
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 f998 	bl	8005a04 <VL53L0X_WrByte>
 80046d4:	4603      	mov	r3, r0
 80046d6:	461a      	mov	r2, r3
 80046d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046dc:	4313      	orrs	r3, r2
 80046de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80046e2:	2200      	movs	r2, #0
 80046e4:	21ff      	movs	r1, #255	; 0xff
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 f98c 	bl	8005a04 <VL53L0X_WrByte>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80046fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d17f      	bne.n	8004802 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8004702:	78bb      	ldrb	r3, [r7, #2]
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe fe3c 	bl	8003382 <VL53L0X_encode_vcsel_period>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8004716:	2b01      	cmp	r3, #1
 8004718:	d045      	beq.n	80047a6 <VL53L0X_set_vcsel_pulse_period+0x470>
 800471a:	e06e      	b.n	80047fa <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	461a      	mov	r2, r3
 8004722:	2103      	movs	r1, #3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fc33 	bl	8003f90 <get_sequence_step_timeout>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8004738:	f107 0310 	add.w	r3, r7, #16
 800473c:	461a      	mov	r2, r3
 800473e:	2102      	movs	r1, #2
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fc25 	bl	8003f90 <get_sequence_step_timeout>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800474c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8004754:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004758:	461a      	mov	r2, r3
 800475a:	2150      	movs	r1, #80	; 0x50
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 f951 	bl	8005a04 <VL53L0X_WrByte>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004768:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	461a      	mov	r2, r3
 8004774:	2103      	movs	r1, #3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fceb 	bl	8004152 <set_sequence_step_timeout>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8004782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	461a      	mov	r2, r3
 800478e:	2102      	movs	r1, #2
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fcde 	bl	8004152 <set_sequence_step_timeout>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	78ba      	ldrb	r2, [r7, #2]
 80047a0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80047a4:	e02e      	b.n	8004804 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80047a6:	f107 0318 	add.w	r3, r7, #24
 80047aa:	461a      	mov	r2, r3
 80047ac:	2104      	movs	r1, #4
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fbee 	bl	8003f90 <get_sequence_step_timeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80047ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80047c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80047c6:	461a      	mov	r2, r3
 80047c8:	2170      	movs	r1, #112	; 0x70
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 f91a 	bl	8005a04 <VL53L0X_WrByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80047d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	461a      	mov	r2, r3
 80047e2:	2104      	movs	r1, #4
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fcb4 	bl	8004152 <set_sequence_step_timeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	78ba      	ldrb	r2, [r7, #2]
 80047f4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80047f8:	e004      	b.n	8004804 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047fa:	23fc      	movs	r3, #252	; 0xfc
 80047fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004800:	e000      	b.n	8004804 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8004802:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8004804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004812:	69f9      	ldr	r1, [r7, #28]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc fe26 	bl	8001466 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8004820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8004828:	f107 010f 	add.w	r1, r7, #15
 800482c:	2301      	movs	r3, #1
 800482e:	2200      	movs	r2, #0
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fe fcc2 	bl	80031ba <VL53L0X_perform_phase_calibration>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800483c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004840:	4618      	mov	r0, r3
 8004842:	3728      	adds	r7, #40	; 0x28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	460b      	mov	r3, r1
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800485a:	7afb      	ldrb	r3, [r7, #11]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004860:	2b01      	cmp	r3, #1
 8004862:	d00a      	beq.n	800487a <VL53L0X_get_vcsel_pulse_period+0x32>
 8004864:	e013      	b.n	800488e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004866:	f107 0316 	add.w	r3, r7, #22
 800486a:	461a      	mov	r2, r3
 800486c:	2150      	movs	r1, #80	; 0x50
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f001 f94a 	bl	8005b08 <VL53L0X_RdByte>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004878:	e00b      	b.n	8004892 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800487a:	f107 0316 	add.w	r3, r7, #22
 800487e:	461a      	mov	r2, r3
 8004880:	2170      	movs	r1, #112	; 0x70
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f001 f940 	bl	8005b08 <VL53L0X_RdByte>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800488c:	e001      	b.n	8004892 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800488e:	23fc      	movs	r3, #252	; 0xfc
 8004890:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004892:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800489a:	7dbb      	ldrb	r3, [r7, #22]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe fd5e 	bl	800335e <VL53L0X_decode_vcsel_period>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	701a      	strb	r2, [r3, #0]

	return Status;
 80048aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b092      	sub	sp, #72	; 0x48
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80048c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80048ca:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80048cc:	f240 7376 	movw	r3, #1910	; 0x776
 80048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80048d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80048d8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80048de:	f240 234e 	movw	r3, #590	; 0x24e
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80048e4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80048ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80048f0:	f240 2326 	movw	r3, #550	; 0x226
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80048fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80048fe:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	429a      	cmp	r2, r3
 800490a:	d205      	bcs.n	8004918 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800490c:	23fc      	movs	r3, #252	; 0xfc
 800490e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8004912:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004916:	e0aa      	b.n	8004a6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8004918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fee4 	bl	80016f8 <VL53L0X_GetSequenceStepEnables>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8004936:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800493a:	2b00      	cmp	r3, #0
 800493c:	d15b      	bne.n	80049f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800493e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8004944:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800494a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800494c:	2b00      	cmp	r3, #0
 800494e:	d052      	beq.n	80049f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	461a      	mov	r2, r3
 8004956:	2102      	movs	r1, #2
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fb19 	bl	8003f90 <get_sequence_step_timeout>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8004964:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800496c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004970:	e07d      	b.n	8004a6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8004972:	7d3b      	ldrb	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00f      	beq.n	8004998 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004978:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800497a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497c:	4413      	add	r3, r2
 800497e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004984:	429a      	cmp	r2, r3
 8004986:	d204      	bcs.n	8004992 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
 8004990:	e002      	b.n	8004998 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004992:	23fc      	movs	r3, #252	; 0xfc
 8004994:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004998:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80049a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80049a4:	e063      	b.n	8004a6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80049a6:	7dbb      	ldrb	r3, [r7, #22]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d011      	beq.n	80049d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	4413      	add	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d204      	bcs.n	80049c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80049be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
 80049c6:	e016      	b.n	80049f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80049c8:	23fc      	movs	r3, #252	; 0xfc
 80049ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80049ce:	e012      	b.n	80049f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80049d0:	7d7b      	ldrb	r3, [r7, #21]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00f      	beq.n	80049f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049da:	4413      	add	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d204      	bcs.n	80049f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80049e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
 80049ee:	e002      	b.n	80049f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80049f0:	23fc      	movs	r3, #252	; 0xfc
 80049f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80049f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80049fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a02:	e034      	b.n	8004a6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d019      	beq.n	8004a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2103      	movs	r1, #3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fabc 	bl	8003f90 <get_sequence_step_timeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a22:	4413      	add	r3, r2
 8004a24:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d204      	bcs.n	8004a38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
 8004a36:	e002      	b.n	8004a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a38:	23fc      	movs	r3, #252	; 0xfc
 8004a3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8004a3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d111      	bne.n	8004a6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8004a46:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00e      	beq.n	8004a6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8004a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8004a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a56:	2104      	movs	r1, #4
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fb7a 	bl	8004152 <set_sequence_step_timeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004a6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3748      	adds	r7, #72	; 0x48
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b090      	sub	sp, #64	; 0x40
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004a86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004a8a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004a8c:	f240 7376 	movw	r3, #1910	; 0x776
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8004a92:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004a98:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004a9e:	f240 234e 	movw	r3, #590	; 0x24e
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8004aa4:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004aaa:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004ab0:	f240 2326 	movw	r3, #550	; 0x226
 8004ab4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	441a      	add	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004ac4:	f107 0318 	add.w	r3, r7, #24
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fc fe14 	bl	80016f8 <VL53L0X_GetSequenceStepEnables>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8004ad6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004ade:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ae2:	e075      	b.n	8004bd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8004ae4:	7e3b      	ldrb	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8004aea:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8004af0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d030      	beq.n	8004b58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8004af6:	f107 0310 	add.w	r3, r7, #16
 8004afa:	461a      	mov	r2, r3
 8004afc:	2102      	movs	r1, #2
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fa46 	bl	8003f90 <get_sequence_step_timeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004b0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d122      	bne.n	8004b58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8004b12:	7e3b      	ldrb	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004b1c:	6939      	ldr	r1, [r7, #16]
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004b22:	441a      	add	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8004b28:	7ebb      	ldrb	r3, [r7, #26]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8004b32:	6939      	ldr	r1, [r7, #16]
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	440b      	add	r3, r1
 8004b38:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004b3a:	441a      	add	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e00a      	b.n	8004b58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8004b42:	7e7b      	ldrb	r3, [r7, #25]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004b4c:	6939      	ldr	r1, [r7, #16]
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004b52:	441a      	add	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d114      	bne.n	8004b8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8004b60:	7efb      	ldrb	r3, [r7, #27]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8004b66:	f107 030c 	add.w	r3, r7, #12
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2103      	movs	r1, #3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fa0e 	bl	8003f90 <get_sequence_step_timeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004b84:	441a      	add	r2, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d114      	bne.n	8004bbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004b92:	7f3b      	ldrb	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d011      	beq.n	8004bbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff f9f5 	bl	8003f90 <get_sequence_step_timeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004bb6:	441a      	add	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004bbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004bcc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3740      	adds	r7, #64	; 0x40
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004bea:	e0c6      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	74fb      	strb	r3, [r7, #19]
		Index++;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2bff      	cmp	r3, #255	; 0xff
 8004c00:	f040 808d 	bne.w	8004d1e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	747b      	strb	r3, [r7, #17]
			Index++;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	3301      	adds	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8004c14:	7c7b      	ldrb	r3, [r7, #17]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d87e      	bhi.n	8004d18 <VL53L0X_load_tuning_settings+0x140>
 8004c1a:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <VL53L0X_load_tuning_settings+0x48>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c6b 	.word	0x08004c6b
 8004c28:	08004ca5 	.word	0x08004ca5
 8004c2c:	08004cdf 	.word	0x08004cdf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	4413      	add	r3, r2
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	743b      	strb	r3, [r7, #16]
				Index++;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004c50:	7c3b      	ldrb	r3, [r7, #16]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	89ba      	ldrh	r2, [r7, #12]
 8004c64:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8004c68:	e087      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	743b      	strb	r3, [r7, #16]
				Index++;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3301      	adds	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3301      	adds	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004c8a:	7c3b      	ldrb	r3, [r7, #16]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	89ba      	ldrh	r2, [r7, #12]
 8004c9e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8004ca2:	e06a      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	743b      	strb	r3, [r7, #16]
				Index++;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004cc4:	7c3b      	ldrb	r3, [r7, #16]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	89ba      	ldrh	r2, [r7, #12]
 8004cd8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8004cdc:	e04d      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	743b      	strb	r3, [r7, #16]
				Index++;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3301      	adds	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004cfe:	7c3b      	ldrb	r3, [r7, #16]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	89ba      	ldrh	r2, [r7, #12]
 8004d12:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8004d16:	e030      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d18:	23fc      	movs	r3, #252	; 0xfc
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e02d      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8004d1e:	7cfb      	ldrb	r3, [r7, #19]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d828      	bhi.n	8004d76 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4413      	add	r3, r2
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3301      	adds	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	e00f      	b.n	8004d5a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	f107 0208 	add.w	r2, r7, #8
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3301      	adds	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	3301      	adds	r3, #1
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	dbeb      	blt.n	8004d3a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	f107 0208 	add.w	r2, r7, #8
 8004d68:	7cb9      	ldrb	r1, [r7, #18]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fdee 	bl	800594c <VL53L0X_WriteMulti>
 8004d70:	4603      	mov	r3, r0
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e001      	b.n	8004d7a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d76:	23fc      	movs	r3, #252	; 0xfc
 8004d78:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	4413      	add	r3, r2
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <VL53L0X_load_tuning_settings+0x1b8>
 8004d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f43f af2e 	beq.w	8004bec <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8004db2:	f107 0313 	add.w	r3, r7, #19
 8004db6:	4619      	mov	r1, r3
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7fc fd29 	bl	8001810 <VL53L0X_GetXTalkCompensationEnable>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8004dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d111      	bne.n	8004dee <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	8a9b      	ldrh	r3, [r3, #20]
 8004dda:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3380      	adds	r3, #128	; 0x80
 8004de8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8004dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8004e12:	f107 0310 	add.w	r3, r7, #16
 8004e16:	461a      	mov	r2, r3
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff ffbe 	bl	8004d9c <VL53L0X_get_total_xtalk_rate>
 8004e20:	4603      	mov	r3, r0
 8004e22:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8004e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	441a      	add	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	601a      	str	r2, [r3, #0]

	return Status;
 8004e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b09a      	sub	sp, #104	; 0x68
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8004e52:	2312      	movs	r3, #18
 8004e54:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8004e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e5a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8004e5c:	2342      	movs	r3, #66	; 0x42
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8004e60:	2306      	movs	r3, #6
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8004e64:	2307      	movs	r3, #7
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	3380      	adds	r3, #128	; 0x80
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01a      	beq.n	8004eda <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	029b      	lsls	r3, r3, #10
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8004eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb0:	4413      	add	r3, r2
 8004eb2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8004eb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8004ebe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eca:	fb03 f303 	mul.w	r3, r3, r3
 8004ece:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8004ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	fb03 f303 	mul.w	r3, r3, r3
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8004ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8004f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f02:	085a      	lsrs	r2, r3, #1
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	441a      	add	r2, r3
 8004f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d302      	bcc.n	8004f28 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8004f22:	4b54      	ldr	r3, [pc, #336]	; (8005074 <VL53L0X_calc_dmax+0x230>)
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
 8004f26:	e015      	b.n	8004f54 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8004f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2a:	085a      	lsrs	r2, r3, #1
 8004f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2e:	441a      	add	r2, r3
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8004f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8004f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8004f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f4e:	fb03 f303 	mul.w	r3, r3, r3
 8004f52:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8004f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f56:	039b      	lsls	r3, r3, #14
 8004f58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f5c:	4a46      	ldr	r2, [pc, #280]	; (8005078 <VL53L0X_calc_dmax+0x234>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	fb03 f303 	mul.w	r3, r3, r3
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8004f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f70:	fb03 f303 	mul.w	r3, r3, r3
 8004f74:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f98:	0b9b      	lsrs	r3, r3, #14
 8004f9a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8004f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa0:	4413      	add	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8004fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4413      	add	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	039b      	lsls	r3, r3, #14
 8004fbc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004fe2:	4a25      	ldr	r2, [pc, #148]	; (8005078 <VL53L0X_calc_dmax+0x234>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <VL53L0X_calc_dmax+0x234>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8005002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005004:	3380      	adds	r3, #128	; 0x80
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	085a      	lsrs	r2, r3, #1
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	441a      	add	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005020:	e001      	b.n	8005026 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8005026:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005028:	f7fe f9bd 	bl	80033a6 <VL53L0X_isqrt>
 800502c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	085a      	lsrs	r2, r3, #1
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	441a      	add	r2, r3
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005044:	e001      	b.n	800504a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800504a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800504c:	f7fe f9ab 	bl	80033a6 <VL53L0X_isqrt>
 8005050:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8005052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505c:	429a      	cmp	r2, r3
 800505e:	d902      	bls.n	8005066 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8005060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005064:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8005066:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800506a:	4618      	mov	r0, r3
 800506c:	3768      	adds	r7, #104	; 0x68
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	fff00000 	.word	0xfff00000
 8005078:	10624dd3 	.word	0x10624dd3

0800507c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b0b4      	sub	sp, #208	; 0xd0
 8005080:	af04      	add	r7, sp, #16
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800508a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800508e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8005092:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800509a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800509e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80050a2:	f241 235c 	movw	r3, #4700	; 0x125c
 80050a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80050aa:	4b9e      	ldr	r3, [pc, #632]	; (8005324 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80050ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80050b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80050b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80050b6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80050ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80050c4:	4b98      	ldr	r3, [pc, #608]	; (8005328 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80050c6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80050c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050cc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80050ce:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80050d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80050d4:	f240 6377 	movw	r3, #1655	; 0x677
 80050d8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80050fc:	f107 0310 	add.w	r3, r7, #16
 8005100:	461a      	mov	r2, r3
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fe78 	bl	8004dfa <VL53L0X_get_total_signal_rate>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	461a      	mov	r2, r3
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff fe3f 	bl	8004d9c <VL53L0X_get_total_xtalk_rate>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005132:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005148:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800514c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514e:	429a      	cmp	r2, r3
 8005150:	d902      	bls.n	8005158 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005158:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800515c:	2b00      	cmp	r3, #0
 800515e:	d168      	bne.n	8005232 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005170:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005174:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005178:	461a      	mov	r2, r3
 800517a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7fe feb2 	bl	8003ee8 <VL53L0X_calc_timeout_mclks>
 8005184:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800518c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005196:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800519a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800519e:	461a      	mov	r2, r3
 80051a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7fe fe9f 	bl	8003ee8 <VL53L0X_calc_timeout_mclks>
 80051aa:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80051ac:	2303      	movs	r3, #3
 80051ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80051b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d102      	bne.n	80051c0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80051ba:	2302      	movs	r3, #2
 80051bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80051c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80051c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	02db      	lsls	r3, r3, #11
 80051d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80051d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051dc:	4a53      	ldr	r2, [pc, #332]	; (800532c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80051e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ee:	fb02 f303 	mul.w	r3, r2, r3
 80051f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80051f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051fe:	4a4b      	ldr	r2, [pc, #300]	; (800532c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3380      	adds	r3, #128	; 0x80
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005218:	fb02 f303 	mul.w	r3, r2, r3
 800521c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005224:	3380      	adds	r3, #128	; 0x80
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005232:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800523a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800523e:	e15e      	b.n	80054fe <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8005240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10c      	bne.n	8005260 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800524c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005254:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e14c      	b.n	80054fa <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8005268:	2301      	movs	r3, #1
 800526a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800526e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005272:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005276:	041a      	lsls	r2, r3, #16
 8005278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8005282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005288:	429a      	cmp	r2, r3
 800528a:	d902      	bls.n	8005292 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800528c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8005292:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005296:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80052a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052a6:	4613      	mov	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe f879 	bl	80033a6 <VL53L0X_isqrt>
 80052b4:	4603      	mov	r3, r0
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	891b      	ldrh	r3, [r3, #8]
 80052be:	461a      	mov	r2, r3
 80052c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80052c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ca:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80052cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052d0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80052d2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80052d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80052e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80052ea:	4a10      	ldr	r2, [pc, #64]	; (800532c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	099b      	lsrs	r3, r3, #6
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80052fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	bfb8      	it	lt
 8005306:	425b      	neglt	r3, r3
 8005308:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	7e1b      	ldrb	r3, [r3, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00b      	beq.n	8005330 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8005318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800531c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005320:	e033      	b.n	800538a <VL53L0X_calc_sigma_estimate+0x30e>
 8005322:	bf00      	nop
 8005324:	028f87ae 	.word	0x028f87ae
 8005328:	0006999a 	.word	0x0006999a
 800532c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800533e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005340:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8005344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005356:	4413      	add	r3, r2
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800535e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005362:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800536a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005378:	fb03 f303 	mul.w	r3, r3, r3
 800537c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005384:	0b9b      	lsrs	r3, r3, #14
 8005386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800538a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800538e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005390:	fb02 f303 	mul.w	r3, r2, r3
 8005394:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	fb03 f303 	mul.w	r3, r3, r3
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80053a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	fb03 f303 	mul.w	r3, r3, r3
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	4413      	add	r3, r2
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80053c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ca:	f7fd ffec 	bl	80033a6 <VL53L0X_isqrt>
 80053ce:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	3332      	adds	r3, #50	; 0x32
 80053da:	4a4b      	ldr	r2, [pc, #300]	; (8005508 <VL53L0X_calc_sigma_estimate+0x48c>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	095a      	lsrs	r2, r3, #5
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80053ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053f0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80053fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005400:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005404:	3308      	adds	r3, #8
 8005406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800540a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800540e:	4a3f      	ldr	r2, [pc, #252]	; (800550c <VL53L0X_calc_sigma_estimate+0x490>)
 8005410:	fba2 2303 	umull	r2, r3, r2, r3
 8005414:	0b5b      	lsrs	r3, r3, #13
 8005416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800541a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800541e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005420:	429a      	cmp	r2, r3
 8005422:	d902      	bls.n	800542a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8005424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800542a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800542e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005432:	4413      	add	r3, r2
 8005434:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8005438:	4a35      	ldr	r2, [pc, #212]	; (8005510 <VL53L0X_calc_sigma_estimate+0x494>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8005446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800544a:	441a      	add	r2, r3
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd ffa7 	bl	80033a6 <VL53L0X_isqrt>
 8005458:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005466:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <VL53L0X_calc_sigma_estimate+0x494>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	099b      	lsrs	r3, r3, #6
 800546e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005474:	fb03 f303 	mul.w	r3, r3, r3
 8005478:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	fb03 f303 	mul.w	r3, r3, r3
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8005482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	4413      	add	r3, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f7fd ff8c 	bl	80033a6 <VL53L0X_isqrt>
 800548e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800549e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <VL53L0X_calc_sigma_estimate+0x43c>
 80054a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <VL53L0X_calc_sigma_estimate+0x43c>
 80054ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80054b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d903      	bls.n	80054c0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80054b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80054c6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80054d2:	6939      	ldr	r1, [r7, #16]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	9303      	str	r3, [sp, #12]
 80054d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054dc:	9302      	str	r3, [sp, #8]
 80054de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff fca8 	bl	8004e44 <VL53L0X_calc_dmax>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80054fe:	4618      	mov	r0, r3
 8005500:	37c0      	adds	r7, #192	; 0xc0
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	51eb851f 	.word	0x51eb851f
 800550c:	d1b71759 	.word	0xd1b71759
 8005510:	10624dd3 	.word	0x10624dd3

08005514 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b090      	sub	sp, #64	; 0x40
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	461a      	mov	r2, r3
 8005520:	460b      	mov	r3, r1
 8005522:	72fb      	strb	r3, [r7, #11]
 8005524:	4613      	mov	r3, r2
 8005526:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	10db      	asrs	r3, r3, #3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005574:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d017      	beq.n	80055ac <VL53L0X_get_pal_range_status+0x98>
 800557c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005580:	2b05      	cmp	r3, #5
 8005582:	d013      	beq.n	80055ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005584:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005588:	2b07      	cmp	r3, #7
 800558a:	d00f      	beq.n	80055ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800558c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d00b      	beq.n	80055ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005594:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005598:	2b0d      	cmp	r3, #13
 800559a:	d007      	beq.n	80055ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800559c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80055a0:	2b0e      	cmp	r3, #14
 80055a2:	d003      	beq.n	80055ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80055a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d103      	bne.n	80055b4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80055b2:	e002      	b.n	80055ba <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80055ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80055c2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80055c6:	461a      	mov	r2, r3
 80055c8:	2100      	movs	r1, #0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7fc f9f4 	bl	80019b8 <VL53L0X_GetLimitCheckEnable>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80055d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d02e      	beq.n	800563c <VL53L0X_get_pal_range_status+0x128>
 80055de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d12a      	bne.n	800563c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80055e6:	f107 0310 	add.w	r3, r7, #16
 80055ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fd43 	bl	800507c <VL53L0X_calc_sigma_estimate>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80055fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	b29a      	uxth	r2, r3
 8005608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800560c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005610:	2b00      	cmp	r3, #0
 8005612:	d113      	bne.n	800563c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8005614:	f107 0320 	add.w	r3, r7, #32
 8005618:	461a      	mov	r2, r3
 800561a:	2100      	movs	r1, #0
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7fc fa4f 	bl	8001ac0 <VL53L0X_GetLimitCheckValue>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d006      	beq.n	800563c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800562e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005630:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8005632:	429a      	cmp	r2, r3
 8005634:	d902      	bls.n	800563c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800563c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005644:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8005648:	461a      	mov	r2, r3
 800564a:	2102      	movs	r1, #2
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7fc f9b3 	bl	80019b8 <VL53L0X_GetLimitCheckEnable>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8005658:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800565c:	2b00      	cmp	r3, #0
 800565e:	d044      	beq.n	80056ea <VL53L0X_get_pal_range_status+0x1d6>
 8005660:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005664:	2b00      	cmp	r3, #0
 8005666:	d140      	bne.n	80056ea <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005668:	f107 031c 	add.w	r3, r7, #28
 800566c:	461a      	mov	r2, r3
 800566e:	2102      	movs	r1, #2
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fc fa25 	bl	8001ac0 <VL53L0X_GetLimitCheckValue>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800567c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005680:	2b00      	cmp	r3, #0
 8005682:	d107      	bne.n	8005694 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005684:	2201      	movs	r2, #1
 8005686:	21ff      	movs	r1, #255	; 0xff
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f9bb 	bl	8005a04 <VL53L0X_WrByte>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8005694:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800569c:	f107 0316 	add.w	r3, r7, #22
 80056a0:	461a      	mov	r2, r3
 80056a2:	21b6      	movs	r1, #182	; 0xb6
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fa59 	bl	8005b5c <VL53L0X_RdWord>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80056b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80056b8:	2200      	movs	r2, #0
 80056ba:	21ff      	movs	r1, #255	; 0xff
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f9a1 	bl	8005a04 <VL53L0X_WrByte>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80056c8:	8afb      	ldrh	r3, [r7, #22]
 80056ca:	025b      	lsls	r3, r3, #9
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80056dc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80056de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d902      	bls.n	80056ea <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80056ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80056f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f6:	461a      	mov	r2, r3
 80056f8:	2103      	movs	r1, #3
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7fc f95c 	bl	80019b8 <VL53L0X_GetLimitCheckEnable>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8005706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d023      	beq.n	8005756 <VL53L0X_get_pal_range_status+0x242>
 800570e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005712:	2b00      	cmp	r3, #0
 8005714:	d11f      	bne.n	8005756 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8005716:	893b      	ldrh	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
 8005720:	e005      	b.n	800572e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	021a      	lsls	r2, r3, #8
 8005726:	893b      	ldrh	r3, [r7, #8]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800572e:	f107 0318 	add.w	r3, r7, #24
 8005732:	461a      	mov	r2, r3
 8005734:	2103      	movs	r1, #3
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7fc f9c2 	bl	8001ac0 <VL53L0X_GetLimitCheckValue>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8005748:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800574a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800574c:	429a      	cmp	r2, r3
 800574e:	d202      	bcs.n	8005756 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800575a:	2b00      	cmp	r3, #0
 800575c:	d14a      	bne.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800575e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005762:	2b01      	cmp	r3, #1
 8005764:	d103      	bne.n	800576e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8005766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e042      	b.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800576e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005772:	2b01      	cmp	r3, #1
 8005774:	d007      	beq.n	8005786 <VL53L0X_get_pal_range_status+0x272>
 8005776:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800577a:	2b02      	cmp	r3, #2
 800577c:	d003      	beq.n	8005786 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800577e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005782:	2b03      	cmp	r3, #3
 8005784:	d103      	bne.n	800578e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8005786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005788:	2205      	movs	r2, #5
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e032      	b.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800578e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005792:	2b06      	cmp	r3, #6
 8005794:	d003      	beq.n	800579e <VL53L0X_get_pal_range_status+0x28a>
 8005796:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800579a:	2b09      	cmp	r3, #9
 800579c:	d103      	bne.n	80057a6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	2204      	movs	r2, #4
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e026      	b.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80057a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d007      	beq.n	80057be <VL53L0X_get_pal_range_status+0x2aa>
 80057ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057b2:	2b0a      	cmp	r3, #10
 80057b4:	d003      	beq.n	80057be <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80057b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d103      	bne.n	80057c6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	2203      	movs	r2, #3
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e016      	b.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80057c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d003      	beq.n	80057d6 <VL53L0X_get_pal_range_status+0x2c2>
 80057ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d103      	bne.n	80057de <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80057d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d8:	2202      	movs	r2, #2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e00a      	b.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80057de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d103      	bne.n	80057ee <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e002      	b.n	80057f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d102      	bne.n	8005802 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	2200      	movs	r2, #0
 8005800:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005802:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005806:	461a      	mov	r2, r3
 8005808:	2101      	movs	r1, #1
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7fc f8d4 	bl	80019b8 <VL53L0X_GetLimitCheckEnable>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8005816:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800581a:	2b00      	cmp	r3, #0
 800581c:	d14f      	bne.n	80058be <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800581e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <VL53L0X_get_pal_range_status+0x31a>
 8005826:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800582a:	2b01      	cmp	r3, #1
 800582c:	d103      	bne.n	8005836 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005834:	e002      	b.n	800583c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005842:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8005846:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800584a:	2b04      	cmp	r3, #4
 800584c:	d003      	beq.n	8005856 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800584e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585c:	e002      	b.n	8005864 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800586a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800586e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <VL53L0X_get_pal_range_status+0x36a>
 8005876:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d103      	bne.n	8005886 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005884:	e002      	b.n	800588c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <VL53L0X_get_pal_range_status+0x392>
 800589e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d103      	bne.n	80058ae <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ac:	e002      	b.n	80058b4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80058ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3740      	adds	r7, #64	; 0x40
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af02      	add	r7, sp, #8
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	330a      	adds	r3, #10
 80058da:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80058e8:	b299      	uxth	r1, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	f001 fb43 	bl	8006f80 <HAL_I2C_Master_Transmit>
 80058fa:	4603      	mov	r3, r0
 80058fc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80058fe:	693b      	ldr	r3, [r7, #16]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	330a      	adds	r3, #10
 8005918:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	b299      	uxth	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	b29a      	uxth	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	f001 fc1f 	bl	800717c <HAL_I2C_Master_Receive>
 800593e:	4603      	mov	r3, r0
 8005940:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005942:	693b      	ldr	r3, [r7, #16]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	607a      	str	r2, [r7, #4]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	460b      	mov	r3, r1
 800595a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800595c:	2300      	movs	r3, #0
 800595e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b3f      	cmp	r3, #63	; 0x3f
 8005964:	d902      	bls.n	800596c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8005966:	f06f 0303 	mvn.w	r3, #3
 800596a:	e016      	b.n	800599a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800596c:	4a0d      	ldr	r2, [pc, #52]	; (80059a4 <VL53L0X_WriteMulti+0x58>)
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <VL53L0X_WriteMulti+0x5c>)
 8005978:	f003 ff9e 	bl	80098b8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	461a      	mov	r2, r3
 8005982:	4908      	ldr	r1, [pc, #32]	; (80059a4 <VL53L0X_WriteMulti+0x58>)
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ffa0 	bl	80058ca <_I2CWrite>
 800598a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005992:	23ec      	movs	r3, #236	; 0xec
 8005994:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005996:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000620 	.word	0x20000620
 80059a8:	20000621 	.word	0x20000621

080059ac <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	460b      	mov	r3, r1
 80059ba:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059bc:	2300      	movs	r3, #0
 80059be:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80059c0:	f107 030b 	add.w	r3, r7, #11
 80059c4:	2201      	movs	r2, #1
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff7e 	bl	80058ca <_I2CWrite>
 80059ce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80059d6:	23ec      	movs	r3, #236	; 0xec
 80059d8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80059da:	e00c      	b.n	80059f6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff91 	bl	8005908 <_I2CRead>
 80059e6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80059ee:	23ec      	movs	r3, #236	; 0xec
 80059f0:	75fb      	strb	r3, [r7, #23]
 80059f2:	e000      	b.n	80059f6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80059f4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80059f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
 8005a10:	4613      	mov	r3, r2
 8005a12:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005a18:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <VL53L0X_WrByte+0x44>)
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <VL53L0X_WrByte+0x44>)
 8005a20:	78bb      	ldrb	r3, [r7, #2]
 8005a22:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005a24:	2202      	movs	r2, #2
 8005a26:	4908      	ldr	r1, [pc, #32]	; (8005a48 <VL53L0X_WrByte+0x44>)
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ff4e 	bl	80058ca <_I2CWrite>
 8005a2e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a36:	23ec      	movs	r3, #236	; 0xec
 8005a38:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000620 	.word	0x20000620

08005a4c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <VL53L0X_WrWord+0x50>)
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8005a66:	883b      	ldrh	r3, [r7, #0]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <VL53L0X_WrWord+0x50>)
 8005a70:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8005a72:	883b      	ldrh	r3, [r7, #0]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <VL53L0X_WrWord+0x50>)
 8005a78:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	4907      	ldr	r1, [pc, #28]	; (8005a9c <VL53L0X_WrWord+0x50>)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ff23 	bl	80058ca <_I2CWrite>
 8005a84:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a8c:	23ec      	movs	r3, #236	; 0xec
 8005a8e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000620 	.word	0x20000620

08005aa0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	70fb      	strb	r3, [r7, #3]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70bb      	strb	r3, [r7, #2]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8005abe:	f107 020e 	add.w	r2, r7, #14
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f81e 	bl	8005b08 <VL53L0X_RdByte>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8005ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d110      	bne.n	8005afa <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8005ad8:	7bba      	ldrb	r2, [r7, #14]
 8005ada:	78bb      	ldrb	r3, [r7, #2]
 8005adc:	4013      	ands	r3, r2
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	787b      	ldrb	r3, [r7, #1]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8005ae8:	7bba      	ldrb	r2, [r7, #14]
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ff88 	bl	8005a04 <VL53L0X_WrByte>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
 8005af8:	e000      	b.n	8005afc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8005afa:	bf00      	nop
done:
    return Status;
 8005afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	460b      	mov	r3, r1
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005b1a:	f107 030b 	add.w	r3, r7, #11
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4619      	mov	r1, r3
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff fed1 	bl	80058ca <_I2CWrite>
 8005b28:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b30:	23ec      	movs	r3, #236	; 0xec
 8005b32:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005b34:	e00c      	b.n	8005b50 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005b36:	2201      	movs	r2, #1
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff fee4 	bl	8005908 <_I2CRead>
 8005b40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b48:	23ec      	movs	r3, #236	; 0xec
 8005b4a:	75fb      	strb	r3, [r7, #23]
 8005b4c:	e000      	b.n	8005b50 <VL53L0X_RdByte+0x48>
    }
done:
 8005b4e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	460b      	mov	r3, r1
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005b6e:	f107 030b 	add.w	r3, r7, #11
 8005b72:	2201      	movs	r2, #1
 8005b74:	4619      	mov	r1, r3
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff fea7 	bl	80058ca <_I2CWrite>
 8005b7c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b84:	23ec      	movs	r3, #236	; 0xec
 8005b86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005b88:	e017      	b.n	8005bba <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	490e      	ldr	r1, [pc, #56]	; (8005bc8 <VL53L0X_RdWord+0x6c>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff feba 	bl	8005908 <_I2CRead>
 8005b94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b9c:	23ec      	movs	r3, #236	; 0xec
 8005b9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005ba0:	e00b      	b.n	8005bba <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <VL53L0X_RdWord+0x6c>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <VL53L0X_RdWord+0x6c>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000620 	.word	0x20000620

08005bcc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005bde:	f107 030b 	add.w	r3, r7, #11
 8005be2:	2201      	movs	r2, #1
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fe6f 	bl	80058ca <_I2CWrite>
 8005bec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005bf4:	23ec      	movs	r3, #236	; 0xec
 8005bf6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005bf8:	e01b      	b.n	8005c32 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	4910      	ldr	r1, [pc, #64]	; (8005c40 <VL53L0X_RdDWord+0x74>)
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fe82 	bl	8005908 <_I2CRead>
 8005c04:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c0c:	23ec      	movs	r3, #236	; 0xec
 8005c0e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005c10:	e00f      	b.n	8005c32 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <VL53L0X_RdDWord+0x74>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	061a      	lsls	r2, r3, #24
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <VL53L0X_RdDWord+0x74>)
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	441a      	add	r2, r3
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <VL53L0X_RdDWord+0x74>)
 8005c22:	789b      	ldrb	r3, [r3, #2]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	4413      	add	r3, r2
 8005c28:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <VL53L0X_RdDWord+0x74>)
 8005c2a:	78d2      	ldrb	r2, [r2, #3]
 8005c2c:	441a      	add	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8005c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000620 	.word	0x20000620

08005c44 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8005c50:	2002      	movs	r0, #2
 8005c52:	f000 f88f 	bl	8005d74 <HAL_Delay>
    return status;
 8005c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c64:	480c      	ldr	r0, [pc, #48]	; (8005c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c66:	490d      	ldr	r1, [pc, #52]	; (8005c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c68:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c6c:	e002      	b.n	8005c74 <LoopCopyDataInit>

08005c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c72:	3304      	adds	r3, #4

08005c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c78:	d3f9      	bcc.n	8005c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c7c:	4c0a      	ldr	r4, [pc, #40]	; (8005ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c80:	e001      	b.n	8005c86 <LoopFillZerobss>

08005c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c84:	3204      	adds	r2, #4

08005c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c88:	d3fb      	bcc.n	8005c82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c8a:	f7fa fff3 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c8e:	f003 fdef 	bl	8009870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c92:	f7fa fb23 	bl	80002dc <main>
  bx lr
 8005c96:	4770      	bx	lr
  ldr r0, =_sdata
 8005c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c9c:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8005ca0:	0800a93c 	.word	0x0800a93c
  ldr r2, =_sbss
 8005ca4:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8005ca8:	20000674 	.word	0x20000674

08005cac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cac:	e7fe      	b.n	8005cac <CAN1_RX1_IRQHandler>
	...

08005cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <HAL_Init+0x28>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <HAL_Init+0x28>)
 8005cba:	f043 0310 	orr.w	r3, r3, #16
 8005cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cc0:	2003      	movs	r0, #3
 8005cc2:	f000 fd8b 	bl	80067dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cc6:	200f      	movs	r0, #15
 8005cc8:	f000 f808 	bl	8005cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ccc:	f7fa fd50 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40022000 	.word	0x40022000

08005cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ce4:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <HAL_InitTick+0x54>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <HAL_InitTick+0x58>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fda3 	bl	8006846 <HAL_SYSTICK_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e00e      	b.n	8005d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b0f      	cmp	r3, #15
 8005d0e:	d80a      	bhi.n	8005d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d10:	2200      	movs	r2, #0
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	f000 fd6b 	bl	80067f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d1c:	4a06      	ldr	r2, [pc, #24]	; (8005d38 <HAL_InitTick+0x5c>)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e000      	b.n	8005d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000004 	.word	0x20000004
 8005d34:	200002c8 	.word	0x200002c8
 8005d38:	200002c4 	.word	0x200002c4

08005d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_IncTick+0x1c>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <HAL_IncTick+0x20>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	4a03      	ldr	r2, [pc, #12]	; (8005d5c <HAL_IncTick+0x20>)
 8005d4e:	6013      	str	r3, [r2, #0]
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr
 8005d58:	200002c8 	.word	0x200002c8
 8005d5c:	20000660 	.word	0x20000660

08005d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  return uwTick;
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <HAL_GetTick+0x10>)
 8005d66:	681b      	ldr	r3, [r3, #0]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	20000660 	.word	0x20000660

08005d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d7c:	f7ff fff0 	bl	8005d60 <HAL_GetTick>
 8005d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d005      	beq.n	8005d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <HAL_Delay+0x44>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d9a:	bf00      	nop
 8005d9c:	f7ff ffe0 	bl	8005d60 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d8f7      	bhi.n	8005d9c <HAL_Delay+0x28>
  {
  }
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200002c8 	.word	0x200002c8

08005dbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0be      	b.n	8005f5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fa fcea 	bl	80007d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fad9 	bl	80063b8 <ADC_ConversionStop_Disable>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 8099 	bne.w	8005f4a <HAL_ADC_Init+0x18e>
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 8095 	bne.w	8005f4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e28:	f023 0302 	bic.w	r3, r3, #2
 8005e2c:	f043 0202 	orr.w	r2, r3, #2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005e3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7b1b      	ldrb	r3, [r3, #12]
 8005e42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005e44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e54:	d003      	beq.n	8005e5e <HAL_ADC_Init+0xa2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <HAL_ADC_Init+0xa8>
 8005e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e62:	e000      	b.n	8005e66 <HAL_ADC_Init+0xaa>
 8005e64:	2300      	movs	r3, #0
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7d1b      	ldrb	r3, [r3, #20]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d119      	bne.n	8005ea8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7b1b      	ldrb	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	035a      	lsls	r2, r3, #13
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e00b      	b.n	8005ea8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f043 0220 	orr.w	r2, r3, #32
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f043 0201 	orr.w	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <HAL_ADC_Init+0x1a8>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed8:	d003      	beq.n	8005ee2 <HAL_ADC_Init+0x126>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d104      	bne.n	8005eec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	051b      	lsls	r3, r3, #20
 8005eea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <HAL_ADC_Init+0x1ac>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d10b      	bne.n	8005f28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005f26:	e018      	b.n	8005f5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f023 0312 	bic.w	r3, r3, #18
 8005f30:	f043 0210 	orr.w	r2, r3, #16
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005f48:	e007      	b.n	8005f5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	f043 0210 	orr.w	r2, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	ffe1f7fd 	.word	0xffe1f7fd
 8005f68:	ff1f0efe 	.word	0xff1f0efe

08005f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d140      	bne.n	800601c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d139      	bne.n	800601c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005fca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005fce:	d11d      	bne.n	800600c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d119      	bne.n	800600c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0220 	bic.w	r2, r2, #32
 8005fe6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	f043 0201 	orr.w	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fa f931 	bl	8000274 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f06f 0212 	mvn.w	r2, #18
 800601a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d14f      	bne.n	80060ca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b04      	cmp	r3, #4
 8006036:	d148      	bne.n	80060ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800605a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800605e:	d012      	beq.n	8006086 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800606a:	2b00      	cmp	r3, #0
 800606c:	d125      	bne.n	80060ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006078:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800607c:	d11d      	bne.n	80060ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006082:	2b00      	cmp	r3, #0
 8006084:	d119      	bne.n	80060ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006094:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	f043 0201 	orr.w	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9bd 	bl	800643a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 020c 	mvn.w	r2, #12
 80060c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	d114      	bne.n	8006102 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10d      	bne.n	8006102 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f809 	bl	800610a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0201 	mvn.w	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr

0800611c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_ADC_ConfigChannel+0x20>
 8006138:	2302      	movs	r3, #2
 800613a:	e0dc      	b.n	80062f6 <HAL_ADC_ConfigChannel+0x1da>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d81c      	bhi.n	8006186 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	3b05      	subs	r3, #5
 800615e:	221f      	movs	r2, #31
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	4019      	ands	r1, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	3b05      	subs	r3, #5
 8006178:	fa00 f203 	lsl.w	r2, r0, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	635a      	str	r2, [r3, #52]	; 0x34
 8006184:	e03c      	b.n	8006200 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b0c      	cmp	r3, #12
 800618c:	d81c      	bhi.n	80061c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	3b23      	subs	r3, #35	; 0x23
 80061a0:	221f      	movs	r2, #31
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	4019      	ands	r1, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	3b23      	subs	r3, #35	; 0x23
 80061ba:	fa00 f203 	lsl.w	r2, r0, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
 80061c6:	e01b      	b.n	8006200 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	3b41      	subs	r3, #65	; 0x41
 80061da:	221f      	movs	r2, #31
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	4019      	ands	r1, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	3b41      	subs	r3, #65	; 0x41
 80061f4:	fa00 f203 	lsl.w	r2, r0, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b09      	cmp	r3, #9
 8006206:	d91c      	bls.n	8006242 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68d9      	ldr	r1, [r3, #12]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4413      	add	r3, r2
 8006218:	3b1e      	subs	r3, #30
 800621a:	2207      	movs	r2, #7
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	4019      	ands	r1, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6898      	ldr	r0, [r3, #8]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	3b1e      	subs	r3, #30
 8006234:	fa00 f203 	lsl.w	r2, r0, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	60da      	str	r2, [r3, #12]
 8006240:	e019      	b.n	8006276 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6919      	ldr	r1, [r3, #16]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	4413      	add	r3, r2
 8006252:	2207      	movs	r2, #7
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	43db      	mvns	r3, r3
 800625a:	4019      	ands	r1, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6898      	ldr	r0, [r3, #8]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4413      	add	r3, r2
 800626a:	fa00 f203 	lsl.w	r2, r0, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b10      	cmp	r3, #16
 800627c:	d003      	beq.n	8006286 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006282:	2b11      	cmp	r3, #17
 8006284:	d132      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_ADC_ConfigChannel+0x1e4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d125      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d126      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80062ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	d11a      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062b6:	4b13      	ldr	r3, [pc, #76]	; (8006304 <HAL_ADC_ConfigChannel+0x1e8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_ADC_ConfigChannel+0x1ec>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	0c9a      	lsrs	r2, r3, #18
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80062cc:	e002      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f9      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x1b2>
 80062da:	e007      	b.n	80062ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	40012400 	.word	0x40012400
 8006304:	20000004 	.word	0x20000004
 8006308:	431bde83 	.word	0x431bde83

0800630c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a24      	ldr	r2, [pc, #144]	; (80063ac <HAL_ADC_AnalogWDGConfig+0xa0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006324:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8006326:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_ADC_AnalogWDGConfig+0x2a>
 8006332:	2302      	movs	r3, #2
 8006334:	e035      	b.n	80063a2 <HAL_ADC_AnalogWDGConfig+0x96>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	7a1b      	ldrb	r3, [r3, #8]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d108      	bne.n	8006358 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006354:	605a      	str	r2, [r3, #4]
 8006356:	e007      	b.n	8006368 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006366:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8006370:	4013      	ands	r3, r2
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	6811      	ldr	r1, [r2, #0]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	6852      	ldr	r2, [r2, #4]
 800637a:	4311      	orrs	r1, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	430b      	orrs	r3, r1
 8006382:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	68d2      	ldr	r2, [r2, #12]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	6912      	ldr	r2, [r2, #16]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	00800200 	.word	0x00800200
 80063b0:	00400200 	.word	0x00400200
 80063b4:	ff3ffde0 	.word	0xff3ffde0

080063b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d12e      	bne.n	8006430 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063e2:	f7ff fcbd 	bl	8005d60 <HAL_GetTick>
 80063e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80063e8:	e01b      	b.n	8006422 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063ea:	f7ff fcb9 	bl	8005d60 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d914      	bls.n	8006422 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d10d      	bne.n	8006422 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	f043 0210 	orr.w	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	f043 0201 	orr.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e007      	b.n	8006432 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d0dc      	beq.n	80063ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e0ed      	b.n	800663a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fa f9f6 	bl	800085c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006480:	f7ff fc6e 	bl	8005d60 <HAL_GetTick>
 8006484:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006486:	e012      	b.n	80064ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006488:	f7ff fc6a 	bl	8005d60 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b0a      	cmp	r3, #10
 8006494:	d90b      	bls.n	80064ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2205      	movs	r2, #5
 80064a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e0c5      	b.n	800663a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0e5      	beq.n	8006488 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0202 	bic.w	r2, r2, #2
 80064ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064cc:	f7ff fc48 	bl	8005d60 <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80064d2:	e012      	b.n	80064fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80064d4:	f7ff fc44 	bl	8005d60 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b0a      	cmp	r3, #10
 80064e0:	d90b      	bls.n	80064fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2205      	movs	r2, #5
 80064f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e09f      	b.n	800663a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e5      	bne.n	80064d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7e1b      	ldrb	r3, [r3, #24]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d108      	bne.n	8006522 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e007      	b.n	8006532 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7e5b      	ldrb	r3, [r3, #25]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d108      	bne.n	800654c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e007      	b.n	800655c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7e9b      	ldrb	r3, [r3, #26]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d108      	bne.n	8006576 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0220 	orr.w	r2, r2, #32
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e007      	b.n	8006586 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0220 	bic.w	r2, r2, #32
 8006584:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7edb      	ldrb	r3, [r3, #27]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d108      	bne.n	80065a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0210 	bic.w	r2, r2, #16
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e007      	b.n	80065b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0210 	orr.w	r2, r2, #16
 80065ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7f1b      	ldrb	r3, [r3, #28]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d108      	bne.n	80065ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0208 	orr.w	r2, r2, #8
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e007      	b.n	80065da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0208 	bic.w	r2, r2, #8
 80065d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7f5b      	ldrb	r3, [r3, #29]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d108      	bne.n	80065f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0204 	orr.w	r2, r2, #4
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	e007      	b.n	8006604 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0204 	bic.w	r2, r2, #4
 8006602:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	ea42 0103 	orr.w	r1, r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	1e5a      	subs	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <__NVIC_SetPriorityGrouping+0x44>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006660:	4013      	ands	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800666c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006676:	4a04      	ldr	r2, [pc, #16]	; (8006688 <__NVIC_SetPriorityGrouping+0x44>)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	60d3      	str	r3, [r2, #12]
}
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	e000ed00 	.word	0xe000ed00

0800668c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	f003 0307 	and.w	r3, r3, #7
}
 800669a:	4618      	mov	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	e000ed00 	.word	0xe000ed00

080066a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	db0b      	blt.n	80066d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	f003 021f 	and.w	r2, r3, #31
 80066c0:	4906      	ldr	r1, [pc, #24]	; (80066dc <__NVIC_EnableIRQ+0x34>)
 80066c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	2001      	movs	r0, #1
 80066ca:	fa00 f202 	lsl.w	r2, r0, r2
 80066ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr
 80066dc:	e000e100 	.word	0xe000e100

080066e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db0a      	blt.n	800670a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	490c      	ldr	r1, [pc, #48]	; (800672c <__NVIC_SetPriority+0x4c>)
 80066fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fe:	0112      	lsls	r2, r2, #4
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	440b      	add	r3, r1
 8006704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006708:	e00a      	b.n	8006720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4908      	ldr	r1, [pc, #32]	; (8006730 <__NVIC_SetPriority+0x50>)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	3b04      	subs	r3, #4
 8006718:	0112      	lsls	r2, r2, #4
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	440b      	add	r3, r1
 800671e:	761a      	strb	r2, [r3, #24]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	e000e100 	.word	0xe000e100
 8006730:	e000ed00 	.word	0xe000ed00

08006734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f1c3 0307 	rsb	r3, r3, #7
 800674e:	2b04      	cmp	r3, #4
 8006750:	bf28      	it	cs
 8006752:	2304      	movcs	r3, #4
 8006754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3304      	adds	r3, #4
 800675a:	2b06      	cmp	r3, #6
 800675c:	d902      	bls.n	8006764 <NVIC_EncodePriority+0x30>
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3b03      	subs	r3, #3
 8006762:	e000      	b.n	8006766 <NVIC_EncodePriority+0x32>
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43da      	mvns	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	401a      	ands	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800677c:	f04f 31ff 	mov.w	r1, #4294967295
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43d9      	mvns	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800678c:	4313      	orrs	r3, r2
         );
}
 800678e:	4618      	mov	r0, r3
 8006790:	3724      	adds	r7, #36	; 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067a8:	d301      	bcc.n	80067ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067aa:	2301      	movs	r3, #1
 80067ac:	e00f      	b.n	80067ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067ae:	4a0a      	ldr	r2, [pc, #40]	; (80067d8 <SysTick_Config+0x40>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067b6:	210f      	movs	r1, #15
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	f7ff ff90 	bl	80066e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <SysTick_Config+0x40>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067c6:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <SysTick_Config+0x40>)
 80067c8:	2207      	movs	r2, #7
 80067ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	e000e010 	.word	0xe000e010

080067dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ff2d 	bl	8006644 <__NVIC_SetPriorityGrouping>
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	4603      	mov	r3, r0
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006804:	f7ff ff42 	bl	800668c <__NVIC_GetPriorityGrouping>
 8006808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	6978      	ldr	r0, [r7, #20]
 8006810:	f7ff ff90 	bl	8006734 <NVIC_EncodePriority>
 8006814:	4602      	mov	r2, r0
 8006816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ff5f 	bl	80066e0 <__NVIC_SetPriority>
}
 8006822:	bf00      	nop
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	4603      	mov	r3, r0
 8006832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff ff35 	bl	80066a8 <__NVIC_EnableIRQ>
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ffa2 	bl	8006798 <SysTick_Config>
 8006854:	4603      	mov	r3, r0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006870:	2b02      	cmp	r3, #2
 8006872:	d008      	beq.n	8006886 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2204      	movs	r2, #4
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e020      	b.n	80068c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 020e 	bic.w	r2, r2, #14
 8006894:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	2101      	movs	r1, #1
 80068b0:	fa01 f202 	lsl.w	r2, r1, r2
 80068b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
	...

080068d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d005      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e051      	b.n	800699a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 020e 	bic.w	r2, r2, #14
 8006904:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a22      	ldr	r2, [pc, #136]	; (80069a4 <HAL_DMA_Abort_IT+0xd0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d029      	beq.n	8006974 <HAL_DMA_Abort_IT+0xa0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <HAL_DMA_Abort_IT+0xd4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_DMA_Abort_IT+0x9c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1f      	ldr	r2, [pc, #124]	; (80069ac <HAL_DMA_Abort_IT+0xd8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01a      	beq.n	800696a <HAL_DMA_Abort_IT+0x96>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_DMA_Abort_IT+0xdc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d012      	beq.n	8006964 <HAL_DMA_Abort_IT+0x90>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_DMA_Abort_IT+0xe0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00a      	beq.n	800695e <HAL_DMA_Abort_IT+0x8a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <HAL_DMA_Abort_IT+0xe4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d102      	bne.n	8006958 <HAL_DMA_Abort_IT+0x84>
 8006952:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006956:	e00e      	b.n	8006976 <HAL_DMA_Abort_IT+0xa2>
 8006958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800695c:	e00b      	b.n	8006976 <HAL_DMA_Abort_IT+0xa2>
 800695e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006962:	e008      	b.n	8006976 <HAL_DMA_Abort_IT+0xa2>
 8006964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006968:	e005      	b.n	8006976 <HAL_DMA_Abort_IT+0xa2>
 800696a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800696e:	e002      	b.n	8006976 <HAL_DMA_Abort_IT+0xa2>
 8006970:	2310      	movs	r3, #16
 8006972:	e000      	b.n	8006976 <HAL_DMA_Abort_IT+0xa2>
 8006974:	2301      	movs	r3, #1
 8006976:	4a11      	ldr	r2, [pc, #68]	; (80069bc <HAL_DMA_Abort_IT+0xe8>)
 8006978:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
    } 
  }
  return status;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40020008 	.word	0x40020008
 80069a8:	4002001c 	.word	0x4002001c
 80069ac:	40020030 	.word	0x40020030
 80069b0:	40020044 	.word	0x40020044
 80069b4:	40020058 	.word	0x40020058
 80069b8:	4002006c 	.word	0x4002006c
 80069bc:	40020000 	.word	0x40020000

080069c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b08b      	sub	sp, #44	; 0x2c
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069d2:	e169      	b.n	8006ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069d4:	2201      	movs	r2, #1
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	4013      	ands	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	f040 8158 	bne.w	8006ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4a9a      	ldr	r2, [pc, #616]	; (8006c60 <HAL_GPIO_Init+0x2a0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d05e      	beq.n	8006aba <HAL_GPIO_Init+0xfa>
 80069fc:	4a98      	ldr	r2, [pc, #608]	; (8006c60 <HAL_GPIO_Init+0x2a0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d875      	bhi.n	8006aee <HAL_GPIO_Init+0x12e>
 8006a02:	4a98      	ldr	r2, [pc, #608]	; (8006c64 <HAL_GPIO_Init+0x2a4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d058      	beq.n	8006aba <HAL_GPIO_Init+0xfa>
 8006a08:	4a96      	ldr	r2, [pc, #600]	; (8006c64 <HAL_GPIO_Init+0x2a4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d86f      	bhi.n	8006aee <HAL_GPIO_Init+0x12e>
 8006a0e:	4a96      	ldr	r2, [pc, #600]	; (8006c68 <HAL_GPIO_Init+0x2a8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d052      	beq.n	8006aba <HAL_GPIO_Init+0xfa>
 8006a14:	4a94      	ldr	r2, [pc, #592]	; (8006c68 <HAL_GPIO_Init+0x2a8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d869      	bhi.n	8006aee <HAL_GPIO_Init+0x12e>
 8006a1a:	4a94      	ldr	r2, [pc, #592]	; (8006c6c <HAL_GPIO_Init+0x2ac>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d04c      	beq.n	8006aba <HAL_GPIO_Init+0xfa>
 8006a20:	4a92      	ldr	r2, [pc, #584]	; (8006c6c <HAL_GPIO_Init+0x2ac>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d863      	bhi.n	8006aee <HAL_GPIO_Init+0x12e>
 8006a26:	4a92      	ldr	r2, [pc, #584]	; (8006c70 <HAL_GPIO_Init+0x2b0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d046      	beq.n	8006aba <HAL_GPIO_Init+0xfa>
 8006a2c:	4a90      	ldr	r2, [pc, #576]	; (8006c70 <HAL_GPIO_Init+0x2b0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d85d      	bhi.n	8006aee <HAL_GPIO_Init+0x12e>
 8006a32:	2b12      	cmp	r3, #18
 8006a34:	d82a      	bhi.n	8006a8c <HAL_GPIO_Init+0xcc>
 8006a36:	2b12      	cmp	r3, #18
 8006a38:	d859      	bhi.n	8006aee <HAL_GPIO_Init+0x12e>
 8006a3a:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <HAL_GPIO_Init+0x80>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006abb 	.word	0x08006abb
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006aa7 	.word	0x08006aa7
 8006a4c:	08006ae9 	.word	0x08006ae9
 8006a50:	08006aef 	.word	0x08006aef
 8006a54:	08006aef 	.word	0x08006aef
 8006a58:	08006aef 	.word	0x08006aef
 8006a5c:	08006aef 	.word	0x08006aef
 8006a60:	08006aef 	.word	0x08006aef
 8006a64:	08006aef 	.word	0x08006aef
 8006a68:	08006aef 	.word	0x08006aef
 8006a6c:	08006aef 	.word	0x08006aef
 8006a70:	08006aef 	.word	0x08006aef
 8006a74:	08006aef 	.word	0x08006aef
 8006a78:	08006aef 	.word	0x08006aef
 8006a7c:	08006aef 	.word	0x08006aef
 8006a80:	08006aef 	.word	0x08006aef
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	4a79      	ldr	r2, [pc, #484]	; (8006c74 <HAL_GPIO_Init+0x2b4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a92:	e02c      	b.n	8006aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	623b      	str	r3, [r7, #32]
          break;
 8006a9a:	e029      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	623b      	str	r3, [r7, #32]
          break;
 8006aa4:	e024      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	623b      	str	r3, [r7, #32]
          break;
 8006aae:	e01f      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	623b      	str	r3, [r7, #32]
          break;
 8006ab8:	e01a      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	623b      	str	r3, [r7, #32]
          break;
 8006ac6:	e013      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d105      	bne.n	8006adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	611a      	str	r2, [r3, #16]
          break;
 8006ada:	e009      	b.n	8006af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006adc:	2308      	movs	r3, #8
 8006ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	615a      	str	r2, [r3, #20]
          break;
 8006ae6:	e003      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	623b      	str	r3, [r7, #32]
          break;
 8006aec:	e000      	b.n	8006af0 <HAL_GPIO_Init+0x130>
          break;
 8006aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2bff      	cmp	r3, #255	; 0xff
 8006af4:	d801      	bhi.n	8006afa <HAL_GPIO_Init+0x13a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	e001      	b.n	8006afe <HAL_GPIO_Init+0x13e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3304      	adds	r3, #4
 8006afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2bff      	cmp	r3, #255	; 0xff
 8006b04:	d802      	bhi.n	8006b0c <HAL_GPIO_Init+0x14c>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	e002      	b.n	8006b12 <HAL_GPIO_Init+0x152>
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	3b08      	subs	r3, #8
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	210f      	movs	r1, #15
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	6a39      	ldr	r1, [r7, #32]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80b1 	beq.w	8006ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b40:	4b4d      	ldr	r3, [pc, #308]	; (8006c78 <HAL_GPIO_Init+0x2b8>)
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	4a4c      	ldr	r2, [pc, #304]	; (8006c78 <HAL_GPIO_Init+0x2b8>)
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	6193      	str	r3, [r2, #24]
 8006b4c:	4b4a      	ldr	r3, [pc, #296]	; (8006c78 <HAL_GPIO_Init+0x2b8>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b58:	4a48      	ldr	r2, [pc, #288]	; (8006c7c <HAL_GPIO_Init+0x2bc>)
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	3302      	adds	r3, #2
 8006b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	220f      	movs	r2, #15
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a40      	ldr	r2, [pc, #256]	; (8006c80 <HAL_GPIO_Init+0x2c0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_GPIO_Init+0x1ec>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3f      	ldr	r2, [pc, #252]	; (8006c84 <HAL_GPIO_Init+0x2c4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_GPIO_Init+0x1e8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3e      	ldr	r2, [pc, #248]	; (8006c88 <HAL_GPIO_Init+0x2c8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <HAL_GPIO_Init+0x1e4>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3d      	ldr	r2, [pc, #244]	; (8006c8c <HAL_GPIO_Init+0x2cc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_GPIO_Init+0x1e0>
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e006      	b.n	8006bae <HAL_GPIO_Init+0x1ee>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	e004      	b.n	8006bae <HAL_GPIO_Init+0x1ee>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e002      	b.n	8006bae <HAL_GPIO_Init+0x1ee>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <HAL_GPIO_Init+0x1ee>
 8006bac:	2300      	movs	r3, #0
 8006bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb0:	f002 0203 	and.w	r2, r2, #3
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	4093      	lsls	r3, r2
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bbe:	492f      	ldr	r1, [pc, #188]	; (8006c7c <HAL_GPIO_Init+0x2bc>)
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	089b      	lsrs	r3, r3, #2
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006bd8:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	492c      	ldr	r1, [pc, #176]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006be6:	4b2a      	ldr	r3, [pc, #168]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	4928      	ldr	r1, [pc, #160]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c00:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	4922      	ldr	r1, [pc, #136]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
 8006c0c:	e006      	b.n	8006c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c0e:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	491e      	ldr	r1, [pc, #120]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c28:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	4918      	ldr	r1, [pc, #96]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	608b      	str	r3, [r1, #8]
 8006c34:	e006      	b.n	8006c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	4914      	ldr	r1, [pc, #80]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d021      	beq.n	8006c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	490e      	ldr	r1, [pc, #56]	; (8006c90 <HAL_GPIO_Init+0x2d0>)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60cb      	str	r3, [r1, #12]
 8006c5c:	e021      	b.n	8006ca2 <HAL_GPIO_Init+0x2e2>
 8006c5e:	bf00      	nop
 8006c60:	10320000 	.word	0x10320000
 8006c64:	10310000 	.word	0x10310000
 8006c68:	10220000 	.word	0x10220000
 8006c6c:	10210000 	.word	0x10210000
 8006c70:	10120000 	.word	0x10120000
 8006c74:	10110000 	.word	0x10110000
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	40010800 	.word	0x40010800
 8006c84:	40010c00 	.word	0x40010c00
 8006c88:	40011000 	.word	0x40011000
 8006c8c:	40011400 	.word	0x40011400
 8006c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c94:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	4909      	ldr	r1, [pc, #36]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f47f ae8e 	bne.w	80069d4 <HAL_GPIO_Init+0x14>
  }
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	372c      	adds	r7, #44	; 0x2c
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr
 8006cc4:	40010400 	.word	0x40010400

08006cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cd8:	787b      	ldrb	r3, [r7, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cde:	887a      	ldrh	r2, [r7, #2]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ce4:	e003      	b.n	8006cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	041a      	lsls	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e12b      	b.n	8006f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7f9 fde8 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	; 0x24
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d5c:	f001 fb6e 	bl	800843c <HAL_RCC_GetPCLK1Freq>
 8006d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4a81      	ldr	r2, [pc, #516]	; (8006f6c <HAL_I2C_Init+0x274>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d807      	bhi.n	8006d7c <HAL_I2C_Init+0x84>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a80      	ldr	r2, [pc, #512]	; (8006f70 <HAL_I2C_Init+0x278>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	bf94      	ite	ls
 8006d74:	2301      	movls	r3, #1
 8006d76:	2300      	movhi	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	e006      	b.n	8006d8a <HAL_I2C_Init+0x92>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a7d      	ldr	r2, [pc, #500]	; (8006f74 <HAL_I2C_Init+0x27c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	bf94      	ite	ls
 8006d84:	2301      	movls	r3, #1
 8006d86:	2300      	movhi	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e0e7      	b.n	8006f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a78      	ldr	r2, [pc, #480]	; (8006f78 <HAL_I2C_Init+0x280>)
 8006d96:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9a:	0c9b      	lsrs	r3, r3, #18
 8006d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a6a      	ldr	r2, [pc, #424]	; (8006f6c <HAL_I2C_Init+0x274>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d802      	bhi.n	8006dcc <HAL_I2C_Init+0xd4>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	e009      	b.n	8006de0 <HAL_I2C_Init+0xe8>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	4a69      	ldr	r2, [pc, #420]	; (8006f7c <HAL_I2C_Init+0x284>)
 8006dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ddc:	099b      	lsrs	r3, r3, #6
 8006dde:	3301      	adds	r3, #1
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	495c      	ldr	r1, [pc, #368]	; (8006f6c <HAL_I2C_Init+0x274>)
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	d819      	bhi.n	8006e34 <HAL_I2C_Init+0x13c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	1e59      	subs	r1, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e0e:	1c59      	adds	r1, r3, #1
 8006e10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e14:	400b      	ands	r3, r1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_I2C_Init+0x138>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1e59      	subs	r1, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e28:	3301      	adds	r3, #1
 8006e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2e:	e051      	b.n	8006ed4 <HAL_I2C_Init+0x1dc>
 8006e30:	2304      	movs	r3, #4
 8006e32:	e04f      	b.n	8006ed4 <HAL_I2C_Init+0x1dc>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d111      	bne.n	8006e60 <HAL_I2C_Init+0x168>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	1e58      	subs	r0, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6859      	ldr	r1, [r3, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	440b      	add	r3, r1
 8006e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e4e:	3301      	adds	r3, #1
 8006e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e012      	b.n	8006e86 <HAL_I2C_Init+0x18e>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	1e58      	subs	r0, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6859      	ldr	r1, [r3, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	0099      	lsls	r1, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e76:	3301      	adds	r3, #1
 8006e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <HAL_I2C_Init+0x196>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e022      	b.n	8006ed4 <HAL_I2C_Init+0x1dc>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10e      	bne.n	8006eb4 <HAL_I2C_Init+0x1bc>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1e58      	subs	r0, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6859      	ldr	r1, [r3, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	440b      	add	r3, r1
 8006ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb2:	e00f      	b.n	8006ed4 <HAL_I2C_Init+0x1dc>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1e58      	subs	r0, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6859      	ldr	r1, [r3, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	0099      	lsls	r1, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eca:	3301      	adds	r3, #1
 8006ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	6809      	ldr	r1, [r1, #0]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6911      	ldr	r1, [r2, #16]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68d2      	ldr	r2, [r2, #12]
 8006f0e:	4311      	orrs	r1, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	430b      	orrs	r3, r1
 8006f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	000186a0 	.word	0x000186a0
 8006f70:	001e847f 	.word	0x001e847f
 8006f74:	003d08ff 	.word	0x003d08ff
 8006f78:	431bde83 	.word	0x431bde83
 8006f7c:	10624dd3 	.word	0x10624dd3

08006f80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	817b      	strh	r3, [r7, #10]
 8006f90:	4613      	mov	r3, r2
 8006f92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f94:	f7fe fee4 	bl	8005d60 <HAL_GetTick>
 8006f98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	f040 80e0 	bne.w	8007168 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	2319      	movs	r3, #25
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4970      	ldr	r1, [pc, #448]	; (8007174 <HAL_I2C_Master_Transmit+0x1f4>)
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fc92 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e0d3      	b.n	800716a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_I2C_Master_Transmit+0x50>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0cc      	b.n	800716a <HAL_I2C_Master_Transmit+0x1ea>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d007      	beq.n	8006ff6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2221      	movs	r2, #33	; 0x21
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2210      	movs	r2, #16
 8007012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	893a      	ldrh	r2, [r7, #8]
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a50      	ldr	r2, [pc, #320]	; (8007178 <HAL_I2C_Master_Transmit+0x1f8>)
 8007036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007038:	8979      	ldrh	r1, [r7, #10]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	6a3a      	ldr	r2, [r7, #32]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fafc 	bl	800763c <I2C_MasterRequestWrite>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e08d      	b.n	800716a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800704e:	2300      	movs	r3, #0
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007064:	e066      	b.n	8007134 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	6a39      	ldr	r1, [r7, #32]
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fd0c 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00d      	beq.n	8007092 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	2b04      	cmp	r3, #4
 800707c:	d107      	bne.n	800708e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800708c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e06b      	b.n	800716a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d11b      	bne.n	8007108 <HAL_I2C_Master_Transmit+0x188>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	6a39      	ldr	r1, [r7, #32]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fcfc 	bl	8007b0a <I2C_WaitOnBTFFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00d      	beq.n	8007134 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	2b04      	cmp	r3, #4
 800711e:	d107      	bne.n	8007130 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e01a      	b.n	800716a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d194      	bne.n	8007066 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007168:	2302      	movs	r3, #2
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	00100002 	.word	0x00100002
 8007178:	ffff0000 	.word	0xffff0000

0800717c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08c      	sub	sp, #48	; 0x30
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	461a      	mov	r2, r3
 8007188:	460b      	mov	r3, r1
 800718a:	817b      	strh	r3, [r7, #10]
 800718c:	4613      	mov	r3, r2
 800718e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007194:	f7fe fde4 	bl	8005d60 <HAL_GetTick>
 8007198:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	f040 823f 	bne.w	8007626 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2319      	movs	r3, #25
 80071ae:	2201      	movs	r2, #1
 80071b0:	497f      	ldr	r1, [pc, #508]	; (80073b0 <HAL_I2C_Master_Receive+0x234>)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fb92 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80071be:	2302      	movs	r3, #2
 80071c0:	e232      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_I2C_Master_Receive+0x54>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e22b      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d007      	beq.n	80071f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0201 	orr.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007204:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2222      	movs	r2, #34	; 0x22
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2210      	movs	r2, #16
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	893a      	ldrh	r2, [r7, #8]
 8007226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a5f      	ldr	r2, [pc, #380]	; (80073b4 <HAL_I2C_Master_Receive+0x238>)
 8007236:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007238:	8979      	ldrh	r1, [r7, #10]
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fa7e 	bl	8007740 <I2C_MasterRequestRead>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e1ec      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d113      	bne.n	800727e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e1c0      	b.n	8007600 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007282:	2b01      	cmp	r3, #1
 8007284:	d11e      	bne.n	80072c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007294:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007296:	b672      	cpsid	i
}
 8007298:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800729a:	2300      	movs	r3, #0
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80072c0:	b662      	cpsie	i
}
 80072c2:	e035      	b.n	8007330 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d11e      	bne.n	800730a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80072dc:	b672      	cpsid	i
}
 80072de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007304:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007306:	b662      	cpsie	i
}
 8007308:	e012      	b.n	8007330 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007330:	e166      	b.n	8007600 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007336:	2b03      	cmp	r3, #3
 8007338:	f200 811f 	bhi.w	800757a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007340:	2b01      	cmp	r3, #1
 8007342:	d123      	bne.n	800738c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fc1f 	bl	8007b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e167      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	855a      	strh	r2, [r3, #42]	; 0x2a
 800738a:	e139      	b.n	8007600 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007390:	2b02      	cmp	r3, #2
 8007392:	d152      	bne.n	800743a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2200      	movs	r2, #0
 800739c:	4906      	ldr	r1, [pc, #24]	; (80073b8 <HAL_I2C_Master_Receive+0x23c>)
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fa9c 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e13c      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
 80073ae:	bf00      	nop
 80073b0:	00100002 	.word	0x00100002
 80073b4:	ffff0000 	.word	0xffff0000
 80073b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80073bc:	b672      	cpsid	i
}
 80073be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007402:	b662      	cpsie	i
}
 8007404:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007438:	e0e2      	b.n	8007600 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2200      	movs	r2, #0
 8007442:	497b      	ldr	r1, [pc, #492]	; (8007630 <HAL_I2C_Master_Receive+0x4b4>)
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fa49 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0e9      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007462:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007464:	b672      	cpsid	i
}
 8007466:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007490:	b29b      	uxth	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800749a:	4b66      	ldr	r3, [pc, #408]	; (8007634 <HAL_I2C_Master_Receive+0x4b8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	4a65      	ldr	r2, [pc, #404]	; (8007638 <HAL_I2C_Master_Receive+0x4bc>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	0a1a      	lsrs	r2, r3, #8
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	00da      	lsls	r2, r3, #3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d118      	bne.n	80074f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f043 0220 	orr.w	r2, r3, #32
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80074e2:	b662      	cpsie	i
}
 80074e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e09a      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d1d9      	bne.n	80074b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007542:	b662      	cpsie	i
}
 8007544:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007578:	e042      	b.n	8007600 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fb04 	bl	8007b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e04c      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d118      	bne.n	8007600 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f ae94 	bne.w	8007332 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	4618      	mov	r0, r3
 800762a:	3728      	adds	r7, #40	; 0x28
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	00010004 	.word	0x00010004
 8007634:	20000004 	.word	0x20000004
 8007638:	14f8b589 	.word	0x14f8b589

0800763c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af02      	add	r7, sp, #8
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	460b      	mov	r3, r1
 800764a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b08      	cmp	r3, #8
 8007656:	d006      	beq.n	8007666 <I2C_MasterRequestWrite+0x2a>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d003      	beq.n	8007666 <I2C_MasterRequestWrite+0x2a>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007664:	d108      	bne.n	8007678 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e00b      	b.n	8007690 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	2b12      	cmp	r3, #18
 800767e:	d107      	bne.n	8007690 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800768e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f91d 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00d      	beq.n	80076c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b6:	d103      	bne.n	80076c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e035      	b.n	8007730 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076cc:	d108      	bne.n	80076e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ce:	897b      	ldrh	r3, [r7, #10]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	461a      	mov	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076dc:	611a      	str	r2, [r3, #16]
 80076de:	e01b      	b.n	8007718 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076e0:	897b      	ldrh	r3, [r7, #10]
 80076e2:	11db      	asrs	r3, r3, #7
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0306 	and.w	r3, r3, #6
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f063 030f 	orn	r3, r3, #15
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	490e      	ldr	r1, [pc, #56]	; (8007738 <I2C_MasterRequestWrite+0xfc>)
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f943 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e010      	b.n	8007730 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800770e:	897b      	ldrh	r3, [r7, #10]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4907      	ldr	r1, [pc, #28]	; (800773c <I2C_MasterRequestWrite+0x100>)
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f933 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	00010008 	.word	0x00010008
 800773c:	00010002 	.word	0x00010002

08007740 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	460b      	mov	r3, r1
 800774e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007764:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d006      	beq.n	800777a <I2C_MasterRequestRead+0x3a>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d003      	beq.n	800777a <I2C_MasterRequestRead+0x3a>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007778:	d108      	bne.n	800778c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e00b      	b.n	80077a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b11      	cmp	r3, #17
 8007792:	d107      	bne.n	80077a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f893 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00d      	beq.n	80077d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d103      	bne.n	80077d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e079      	b.n	80078cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e0:	d108      	bne.n	80077f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077e2:	897b      	ldrh	r3, [r7, #10]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f043 0301 	orr.w	r3, r3, #1
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	611a      	str	r2, [r3, #16]
 80077f2:	e05f      	b.n	80078b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80077f4:	897b      	ldrh	r3, [r7, #10]
 80077f6:	11db      	asrs	r3, r3, #7
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f063 030f 	orn	r3, r3, #15
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4930      	ldr	r1, [pc, #192]	; (80078d4 <I2C_MasterRequestRead+0x194>)
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f8b9 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e054      	b.n	80078cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4929      	ldr	r1, [pc, #164]	; (80078d8 <I2C_MasterRequestRead+0x198>)
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f8a9 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e044      	b.n	80078cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007866:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f831 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00d      	beq.n	800789c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788e:	d103      	bne.n	8007898 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007896:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e017      	b.n	80078cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800789c:	897b      	ldrh	r3, [r7, #10]
 800789e:	11db      	asrs	r3, r3, #7
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0306 	and.w	r3, r3, #6
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f063 030e 	orn	r3, r3, #14
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4907      	ldr	r1, [pc, #28]	; (80078d8 <I2C_MasterRequestRead+0x198>)
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f865 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	00010008 	.word	0x00010008
 80078d8:	00010002 	.word	0x00010002

080078dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ec:	e025      	b.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d021      	beq.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fe fa33 	bl	8005d60 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d116      	bne.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e023      	b.n	8007982 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10d      	bne.n	8007960 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	43da      	mvns	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4013      	ands	r3, r2
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf0c      	ite	eq
 8007956:	2301      	moveq	r3, #1
 8007958:	2300      	movne	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	e00c      	b.n	800797a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	43da      	mvns	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d0b6      	beq.n	80078ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007998:	e051      	b.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a8:	d123      	bne.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e046      	b.n	8007a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d021      	beq.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7fe f9b1 	bl	8005d60 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d116      	bne.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e020      	b.n	8007a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d10c      	bne.n	8007a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	43da      	mvns	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4013      	ands	r3, r2
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bf14      	ite	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	2300      	moveq	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	e00b      	b.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	43da      	mvns	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf14      	ite	ne
 8007a74:	2301      	movne	r3, #1
 8007a76:	2300      	moveq	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d18d      	bne.n	800799a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a94:	e02d      	b.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8ce 	bl	8007c38 <I2C_IsAcknowledgeFailed>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e02d      	b.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d021      	beq.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7fe f957 	bl	8005d60 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d116      	bne.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e007      	b.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d1ca      	bne.n	8007a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b16:	e02d      	b.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f88d 	bl	8007c38 <I2C_IsAcknowledgeFailed>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e02d      	b.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d021      	beq.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b30:	f7fe f916 	bl	8005d60 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f043 0220 	orr.w	r2, r3, #32
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e007      	b.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d1ca      	bne.n	8007b18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b98:	e042      	b.n	8007c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d119      	bne.n	8007bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0210 	mvn.w	r2, #16
 8007bb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e029      	b.n	8007c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bdc:	f7fe f8c0 	bl	8005d60 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d302      	bcc.n	8007bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d116      	bne.n	8007c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	f043 0220 	orr.w	r2, r3, #32
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e007      	b.n	8007c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d1b5      	bne.n	8007b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4e:	d11b      	bne.n	8007c88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f043 0204 	orr.w	r2, r3, #4
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e272      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8087 	beq.w	8007dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cb4:	4b92      	ldr	r3, [pc, #584]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 030c 	and.w	r3, r3, #12
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d00c      	beq.n	8007cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007cc0:	4b8f      	ldr	r3, [pc, #572]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f003 030c 	and.w	r3, r3, #12
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d112      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x5e>
 8007ccc:	4b8c      	ldr	r3, [pc, #560]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cda:	4b89      	ldr	r3, [pc, #548]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d06c      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x12c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d168      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e24c      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCC_OscConfig+0x76>
 8007cfc:	4b80      	ldr	r3, [pc, #512]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a7f      	ldr	r2, [pc, #508]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e02e      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0x98>
 8007d12:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a7a      	ldr	r2, [pc, #488]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b78      	ldr	r3, [pc, #480]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a77      	ldr	r2, [pc, #476]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e01d      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCC_OscConfig+0xbc>
 8007d36:	4b72      	ldr	r3, [pc, #456]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a71      	ldr	r2, [pc, #452]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	4b6f      	ldr	r3, [pc, #444]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a6e      	ldr	r2, [pc, #440]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e00b      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d50:	4b6b      	ldr	r3, [pc, #428]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a6a      	ldr	r2, [pc, #424]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	4b68      	ldr	r3, [pc, #416]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a67      	ldr	r2, [pc, #412]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d013      	beq.n	8007d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d70:	f7fd fff6 	bl	8005d60 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d78:	f7fd fff2 	bl	8005d60 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b64      	cmp	r3, #100	; 0x64
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e200      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d8a:	4b5d      	ldr	r3, [pc, #372]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0xe4>
 8007d96:	e014      	b.n	8007dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d98:	f7fd ffe2 	bl	8005d60 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007da0:	f7fd ffde 	bl	8005d60 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	; 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e1ec      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007db2:	4b53      	ldr	r3, [pc, #332]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x10c>
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d063      	beq.n	8007e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dce:	4b4c      	ldr	r3, [pc, #304]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 030c 	and.w	r3, r3, #12
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007dda:	4b49      	ldr	r3, [pc, #292]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f003 030c 	and.w	r3, r3, #12
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d11c      	bne.n	8007e20 <HAL_RCC_OscConfig+0x18c>
 8007de6:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d116      	bne.n	8007e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007df2:	4b43      	ldr	r3, [pc, #268]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <HAL_RCC_OscConfig+0x176>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d001      	beq.n	8007e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e1c0      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0a:	4b3d      	ldr	r3, [pc, #244]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4939      	ldr	r1, [pc, #228]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1e:	e03a      	b.n	8007e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d020      	beq.n	8007e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e28:	4b36      	ldr	r3, [pc, #216]	; (8007f04 <HAL_RCC_OscConfig+0x270>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2e:	f7fd ff97 	bl	8005d60 <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e36:	f7fd ff93 	bl	8005d60 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e1a1      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e48:	4b2d      	ldr	r3, [pc, #180]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0f0      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e54:	4b2a      	ldr	r3, [pc, #168]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	4927      	ldr	r1, [pc, #156]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	600b      	str	r3, [r1, #0]
 8007e68:	e015      	b.n	8007e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e6a:	4b26      	ldr	r3, [pc, #152]	; (8007f04 <HAL_RCC_OscConfig+0x270>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e70:	f7fd ff76 	bl	8005d60 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e78:	f7fd ff72 	bl	8005d60 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e180      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f0      	bne.n	8007e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d03a      	beq.n	8007f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d019      	beq.n	8007ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eaa:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <HAL_RCC_OscConfig+0x274>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eb0:	f7fd ff56 	bl	8005d60 <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eb8:	f7fd ff52 	bl	8005d60 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e160      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eca:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <HAL_RCC_OscConfig+0x26c>)
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 fad8 	bl	800848c <RCC_Delay>
 8007edc:	e01c      	b.n	8007f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ede:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <HAL_RCC_OscConfig+0x274>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ee4:	f7fd ff3c 	bl	8005d60 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eea:	e00f      	b.n	8007f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eec:	f7fd ff38 	bl	8005d60 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d908      	bls.n	8007f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e146      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
 8007efe:	bf00      	nop
 8007f00:	40021000 	.word	0x40021000
 8007f04:	42420000 	.word	0x42420000
 8007f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f0c:	4b92      	ldr	r3, [pc, #584]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e9      	bne.n	8007eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80a6 	beq.w	8008072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f2a:	4b8b      	ldr	r3, [pc, #556]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10d      	bne.n	8007f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f36:	4b88      	ldr	r3, [pc, #544]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	4a87      	ldr	r2, [pc, #540]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f40:	61d3      	str	r3, [r2, #28]
 8007f42:	4b85      	ldr	r3, [pc, #532]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	60bb      	str	r3, [r7, #8]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f52:	4b82      	ldr	r3, [pc, #520]	; (800815c <HAL_RCC_OscConfig+0x4c8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d118      	bne.n	8007f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f5e:	4b7f      	ldr	r3, [pc, #508]	; (800815c <HAL_RCC_OscConfig+0x4c8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a7e      	ldr	r2, [pc, #504]	; (800815c <HAL_RCC_OscConfig+0x4c8>)
 8007f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f6a:	f7fd fef9 	bl	8005d60 <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f72:	f7fd fef5 	bl	8005d60 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b64      	cmp	r3, #100	; 0x64
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e103      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f84:	4b75      	ldr	r3, [pc, #468]	; (800815c <HAL_RCC_OscConfig+0x4c8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0f0      	beq.n	8007f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d106      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x312>
 8007f98:	4b6f      	ldr	r3, [pc, #444]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	4a6e      	ldr	r2, [pc, #440]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	6213      	str	r3, [r2, #32]
 8007fa4:	e02d      	b.n	8008002 <HAL_RCC_OscConfig+0x36e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10c      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x334>
 8007fae:	4b6a      	ldr	r3, [pc, #424]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	4a69      	ldr	r2, [pc, #420]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	6213      	str	r3, [r2, #32]
 8007fba:	4b67      	ldr	r3, [pc, #412]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	4a66      	ldr	r2, [pc, #408]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fc0:	f023 0304 	bic.w	r3, r3, #4
 8007fc4:	6213      	str	r3, [r2, #32]
 8007fc6:	e01c      	b.n	8008002 <HAL_RCC_OscConfig+0x36e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d10c      	bne.n	8007fea <HAL_RCC_OscConfig+0x356>
 8007fd0:	4b61      	ldr	r3, [pc, #388]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	4a60      	ldr	r2, [pc, #384]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fd6:	f043 0304 	orr.w	r3, r3, #4
 8007fda:	6213      	str	r3, [r2, #32]
 8007fdc:	4b5e      	ldr	r3, [pc, #376]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	4a5d      	ldr	r2, [pc, #372]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	6213      	str	r3, [r2, #32]
 8007fe8:	e00b      	b.n	8008002 <HAL_RCC_OscConfig+0x36e>
 8007fea:	4b5b      	ldr	r3, [pc, #364]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	4a5a      	ldr	r2, [pc, #360]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	6213      	str	r3, [r2, #32]
 8007ff6:	4b58      	ldr	r3, [pc, #352]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	4a57      	ldr	r2, [pc, #348]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8007ffc:	f023 0304 	bic.w	r3, r3, #4
 8008000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d015      	beq.n	8008036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800800a:	f7fd fea9 	bl	8005d60 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008010:	e00a      	b.n	8008028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008012:	f7fd fea5 	bl	8005d60 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008020:	4293      	cmp	r3, r2
 8008022:	d901      	bls.n	8008028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e0b1      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008028:	4b4b      	ldr	r3, [pc, #300]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0ee      	beq.n	8008012 <HAL_RCC_OscConfig+0x37e>
 8008034:	e014      	b.n	8008060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008036:	f7fd fe93 	bl	8005d60 <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800803c:	e00a      	b.n	8008054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800803e:	f7fd fe8f 	bl	8005d60 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	f241 3288 	movw	r2, #5000	; 0x1388
 800804c:	4293      	cmp	r3, r2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e09b      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008054:	4b40      	ldr	r3, [pc, #256]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1ee      	bne.n	800803e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d105      	bne.n	8008072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008066:	4b3c      	ldr	r3, [pc, #240]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	4a3b      	ldr	r2, [pc, #236]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 800806c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8087 	beq.w	800818a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800807c:	4b36      	ldr	r3, [pc, #216]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f003 030c 	and.w	r3, r3, #12
 8008084:	2b08      	cmp	r3, #8
 8008086:	d061      	beq.n	800814c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d146      	bne.n	800811e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008090:	4b33      	ldr	r3, [pc, #204]	; (8008160 <HAL_RCC_OscConfig+0x4cc>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008096:	f7fd fe63 	bl	8005d60 <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800809e:	f7fd fe5f 	bl	8005d60 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e06d      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080b0:	4b29      	ldr	r3, [pc, #164]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f0      	bne.n	800809e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c4:	d108      	bne.n	80080d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80080c6:	4b24      	ldr	r3, [pc, #144]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	4921      	ldr	r1, [pc, #132]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a19      	ldr	r1, [r3, #32]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	430b      	orrs	r3, r1
 80080ea:	491b      	ldr	r1, [pc, #108]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080f0:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <HAL_RCC_OscConfig+0x4cc>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f6:	f7fd fe33 	bl	8005d60 <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080fc:	e008      	b.n	8008110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080fe:	f7fd fe2f 	bl	8005d60 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e03d      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008110:	4b11      	ldr	r3, [pc, #68]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0f0      	beq.n	80080fe <HAL_RCC_OscConfig+0x46a>
 800811c:	e035      	b.n	800818a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811e:	4b10      	ldr	r3, [pc, #64]	; (8008160 <HAL_RCC_OscConfig+0x4cc>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008124:	f7fd fe1c 	bl	8005d60 <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800812c:	f7fd fe18 	bl	8005d60 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e026      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <HAL_RCC_OscConfig+0x4c4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0x498>
 800814a:	e01e      	b.n	800818a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d107      	bne.n	8008164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e019      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
 8008158:	40021000 	.word	0x40021000
 800815c:	40007000 	.word	0x40007000
 8008160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008164:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCC_OscConfig+0x500>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	429a      	cmp	r2, r3
 8008176:	d106      	bne.n	8008186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008182:	429a      	cmp	r2, r3
 8008184:	d001      	beq.n	800818a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40021000 	.word	0x40021000

08008198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0d0      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081ac:	4b6a      	ldr	r3, [pc, #424]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d910      	bls.n	80081dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ba:	4b67      	ldr	r3, [pc, #412]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f023 0207 	bic.w	r2, r3, #7
 80081c2:	4965      	ldr	r1, [pc, #404]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ca:	4b63      	ldr	r3, [pc, #396]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d001      	beq.n	80081dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0b8      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d020      	beq.n	800822a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081f4:	4b59      	ldr	r3, [pc, #356]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	4a58      	ldr	r2, [pc, #352]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 80081fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80081fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800820c:	4b53      	ldr	r3, [pc, #332]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a52      	ldr	r2, [pc, #328]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008212:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008218:	4b50      	ldr	r3, [pc, #320]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	494d      	ldr	r1, [pc, #308]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008226:	4313      	orrs	r3, r2
 8008228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d040      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d107      	bne.n	800824e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800823e:	4b47      	ldr	r3, [pc, #284]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d115      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e07f      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d107      	bne.n	8008266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008256:	4b41      	ldr	r3, [pc, #260]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e073      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008266:	4b3d      	ldr	r3, [pc, #244]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e06b      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008276:	4b39      	ldr	r3, [pc, #228]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f023 0203 	bic.w	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4936      	ldr	r1, [pc, #216]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008284:	4313      	orrs	r3, r2
 8008286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008288:	f7fd fd6a 	bl	8005d60 <HAL_GetTick>
 800828c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828e:	e00a      	b.n	80082a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008290:	f7fd fd66 	bl	8005d60 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f241 3288 	movw	r2, #5000	; 0x1388
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e053      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	4b2d      	ldr	r3, [pc, #180]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 020c 	and.w	r2, r3, #12
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d1eb      	bne.n	8008290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082b8:	4b27      	ldr	r3, [pc, #156]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d210      	bcs.n	80082e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b24      	ldr	r3, [pc, #144]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 0207 	bic.w	r2, r3, #7
 80082ce:	4922      	ldr	r1, [pc, #136]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d6:	4b20      	ldr	r3, [pc, #128]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d001      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e032      	b.n	800834e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082f4:	4b19      	ldr	r3, [pc, #100]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	4916      	ldr	r1, [pc, #88]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008302:	4313      	orrs	r3, r2
 8008304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	490e      	ldr	r1, [pc, #56]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008322:	4313      	orrs	r3, r2
 8008324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008326:	f000 f821 	bl	800836c <HAL_RCC_GetSysClockFreq>
 800832a:	4602      	mov	r2, r0
 800832c:	4b0b      	ldr	r3, [pc, #44]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	490a      	ldr	r1, [pc, #40]	; (8008360 <HAL_RCC_ClockConfig+0x1c8>)
 8008338:	5ccb      	ldrb	r3, [r1, r3]
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	4a09      	ldr	r2, [pc, #36]	; (8008364 <HAL_RCC_ClockConfig+0x1cc>)
 8008340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <HAL_RCC_ClockConfig+0x1d0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fd fcc8 	bl	8005cdc <HAL_InitTick>

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40022000 	.word	0x40022000
 800835c:	40021000 	.word	0x40021000
 8008360:	0800a884 	.word	0x0800a884
 8008364:	20000004 	.word	0x20000004
 8008368:	200002c4 	.word	0x200002c4

0800836c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800836c:	b490      	push	{r4, r7}
 800836e:	b08a      	sub	sp, #40	; 0x28
 8008370:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008372:	4b29      	ldr	r3, [pc, #164]	; (8008418 <HAL_RCC_GetSysClockFreq+0xac>)
 8008374:	1d3c      	adds	r4, r7, #4
 8008376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800837c:	f240 2301 	movw	r3, #513	; 0x201
 8008380:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	2300      	movs	r3, #0
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008396:	4b21      	ldr	r3, [pc, #132]	; (800841c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f003 030c 	and.w	r3, r3, #12
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d002      	beq.n	80083ac <HAL_RCC_GetSysClockFreq+0x40>
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d003      	beq.n	80083b2 <HAL_RCC_GetSysClockFreq+0x46>
 80083aa:	e02b      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083ac:	4b1c      	ldr	r3, [pc, #112]	; (8008420 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083ae:	623b      	str	r3, [r7, #32]
      break;
 80083b0:	e02b      	b.n	800840a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	0c9b      	lsrs	r3, r3, #18
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	3328      	adds	r3, #40	; 0x28
 80083bc:	443b      	add	r3, r7
 80083be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80083c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d012      	beq.n	80083f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083ce:	4b13      	ldr	r3, [pc, #76]	; (800841c <HAL_RCC_GetSysClockFreq+0xb0>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	0c5b      	lsrs	r3, r3, #17
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	3328      	adds	r3, #40	; 0x28
 80083da:	443b      	add	r3, r7
 80083dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80083e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	4a0e      	ldr	r2, [pc, #56]	; (8008420 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083e6:	fb03 f202 	mul.w	r2, r3, r2
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
 80083f2:	e004      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	4a0b      	ldr	r2, [pc, #44]	; (8008424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083f8:	fb02 f303 	mul.w	r3, r2, r3
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	623b      	str	r3, [r7, #32]
      break;
 8008402:	e002      	b.n	800840a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008406:	623b      	str	r3, [r7, #32]
      break;
 8008408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800840a:	6a3b      	ldr	r3, [r7, #32]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3728      	adds	r7, #40	; 0x28
 8008410:	46bd      	mov	sp, r7
 8008412:	bc90      	pop	{r4, r7}
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	0800a874 	.word	0x0800a874
 800841c:	40021000 	.word	0x40021000
 8008420:	007a1200 	.word	0x007a1200
 8008424:	003d0900 	.word	0x003d0900

08008428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <HAL_RCC_GetHCLKFreq+0x10>)
 800842e:	681b      	ldr	r3, [r3, #0]
}
 8008430:	4618      	mov	r0, r3
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr
 8008438:	20000004 	.word	0x20000004

0800843c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008440:	f7ff fff2 	bl	8008428 <HAL_RCC_GetHCLKFreq>
 8008444:	4602      	mov	r2, r0
 8008446:	4b05      	ldr	r3, [pc, #20]	; (800845c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	0a1b      	lsrs	r3, r3, #8
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	4903      	ldr	r1, [pc, #12]	; (8008460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008452:	5ccb      	ldrb	r3, [r1, r3]
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008458:	4618      	mov	r0, r3
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40021000 	.word	0x40021000
 8008460:	0800a894 	.word	0x0800a894

08008464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008468:	f7ff ffde 	bl	8008428 <HAL_RCC_GetHCLKFreq>
 800846c:	4602      	mov	r2, r0
 800846e:	4b05      	ldr	r3, [pc, #20]	; (8008484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	0adb      	lsrs	r3, r3, #11
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	4903      	ldr	r1, [pc, #12]	; (8008488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800847a:	5ccb      	ldrb	r3, [r1, r3]
 800847c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008480:	4618      	mov	r0, r3
 8008482:	bd80      	pop	{r7, pc}
 8008484:	40021000 	.word	0x40021000
 8008488:	0800a894 	.word	0x0800a894

0800848c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <RCC_Delay+0x34>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a0a      	ldr	r2, [pc, #40]	; (80084c4 <RCC_Delay+0x38>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	0a5b      	lsrs	r3, r3, #9
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80084a8:	bf00      	nop
  }
  while (Delay --);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	60fa      	str	r2, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f9      	bne.n	80084a8 <RCC_Delay+0x1c>
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr
 80084c0:	20000004 	.word	0x20000004
 80084c4:	10624dd3 	.word	0x10624dd3

080084c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d07d      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80084e4:	2300      	movs	r3, #0
 80084e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084e8:	4b4f      	ldr	r3, [pc, #316]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10d      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f4:	4b4c      	ldr	r3, [pc, #304]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	4a4b      	ldr	r2, [pc, #300]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fe:	61d3      	str	r3, [r2, #28]
 8008500:	4b49      	ldr	r3, [pc, #292]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800850c:	2301      	movs	r3, #1
 800850e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008510:	4b46      	ldr	r3, [pc, #280]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008518:	2b00      	cmp	r3, #0
 800851a:	d118      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800851c:	4b43      	ldr	r3, [pc, #268]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a42      	ldr	r2, [pc, #264]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008528:	f7fd fc1a 	bl	8005d60 <HAL_GetTick>
 800852c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800852e:	e008      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008530:	f7fd fc16 	bl	8005d60 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b64      	cmp	r3, #100	; 0x64
 800853c:	d901      	bls.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e06d      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008542:	4b3a      	ldr	r3, [pc, #232]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f0      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800854e:	4b36      	ldr	r3, [pc, #216]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008556:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d02e      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	429a      	cmp	r2, r3
 800856a:	d027      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800856c:	4b2e      	ldr	r3, [pc, #184]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008574:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008576:	4b2e      	ldr	r3, [pc, #184]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008578:	2201      	movs	r2, #1
 800857a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800857c:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008582:	4a29      	ldr	r2, [pc, #164]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d014      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008592:	f7fd fbe5 	bl	8005d60 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008598:	e00a      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800859a:	f7fd fbe1 	bl	8005d60 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e036      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b0:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ee      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085bc:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4917      	ldr	r1, [pc, #92]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d105      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085d4:	4b14      	ldr	r3, [pc, #80]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	4a13      	ldr	r2, [pc, #76]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	490b      	ldr	r1, [pc, #44]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	4904      	ldr	r1, [pc, #16]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008618:	4313      	orrs	r3, r2
 800861a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40021000 	.word	0x40021000
 800862c:	40007000 	.word	0x40007000
 8008630:	42420440 	.word	0x42420440

08008634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e041      	b.n	80086ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7f8 f988 	bl	8000970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f000 f8ec 	bl	8008850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d101      	bne.n	80086ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80086ea:	2302      	movs	r3, #2
 80086ec:	e0ac      	b.n	8008848 <HAL_TIM_PWM_ConfigChannel+0x174>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b0c      	cmp	r3, #12
 80086fa:	f200 809f 	bhi.w	800883c <HAL_TIM_PWM_ConfigChannel+0x168>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008739 	.word	0x08008739
 8008708:	0800883d 	.word	0x0800883d
 800870c:	0800883d 	.word	0x0800883d
 8008710:	0800883d 	.word	0x0800883d
 8008714:	08008779 	.word	0x08008779
 8008718:	0800883d 	.word	0x0800883d
 800871c:	0800883d 	.word	0x0800883d
 8008720:	0800883d 	.word	0x0800883d
 8008724:	080087bb 	.word	0x080087bb
 8008728:	0800883d 	.word	0x0800883d
 800872c:	0800883d 	.word	0x0800883d
 8008730:	0800883d 	.word	0x0800883d
 8008734:	080087fb 	.word	0x080087fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f8e8 	bl	8008914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f042 0208 	orr.w	r2, r2, #8
 8008752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0204 	bic.w	r2, r2, #4
 8008762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6999      	ldr	r1, [r3, #24]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	691a      	ldr	r2, [r3, #16]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	619a      	str	r2, [r3, #24]
      break;
 8008776:	e062      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f92e 	bl	80089e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6999      	ldr	r1, [r3, #24]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	021a      	lsls	r2, r3, #8
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	619a      	str	r2, [r3, #24]
      break;
 80087b8:	e041      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f977 	bl	8008ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0208 	orr.w	r2, r2, #8
 80087d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0204 	bic.w	r2, r2, #4
 80087e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69d9      	ldr	r1, [r3, #28]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	61da      	str	r2, [r3, #28]
      break;
 80087f8:	e021      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f9c1 	bl	8008b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69d9      	ldr	r1, [r3, #28]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	021a      	lsls	r2, r3, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	61da      	str	r2, [r3, #28]
      break;
 800883a:	e000      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800883c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a29      	ldr	r2, [pc, #164]	; (8008908 <TIM_Base_SetConfig+0xb8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00b      	beq.n	8008880 <TIM_Base_SetConfig+0x30>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886e:	d007      	beq.n	8008880 <TIM_Base_SetConfig+0x30>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a26      	ldr	r2, [pc, #152]	; (800890c <TIM_Base_SetConfig+0xbc>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_Base_SetConfig+0x30>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a25      	ldr	r2, [pc, #148]	; (8008910 <TIM_Base_SetConfig+0xc0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d108      	bne.n	8008892 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1c      	ldr	r2, [pc, #112]	; (8008908 <TIM_Base_SetConfig+0xb8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_Base_SetConfig+0x62>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a0:	d007      	beq.n	80088b2 <TIM_Base_SetConfig+0x62>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <TIM_Base_SetConfig+0xbc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_Base_SetConfig+0x62>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <TIM_Base_SetConfig+0xc0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d108      	bne.n	80088c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a07      	ldr	r2, [pc, #28]	; (8008908 <TIM_Base_SetConfig+0xb8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d103      	bne.n	80088f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	615a      	str	r2, [r3, #20]
}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr
 8008908:	40012c00 	.word	0x40012c00
 800890c:	40000400 	.word	0x40000400
 8008910:	40000800 	.word	0x40000800

08008914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f023 0201 	bic.w	r2, r3, #1
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 0302 	bic.w	r3, r3, #2
 800895c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <TIM_OC1_SetConfig+0xc8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d10c      	bne.n	800898a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f023 0308 	bic.w	r3, r3, #8
 8008976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f023 0304 	bic.w	r3, r3, #4
 8008988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a13      	ldr	r2, [pc, #76]	; (80089dc <TIM_OC1_SetConfig+0xc8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d111      	bne.n	80089b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	621a      	str	r2, [r3, #32]
}
 80089d0:	bf00      	nop
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40012c00 	.word	0x40012c00

080089e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f023 0210 	bic.w	r2, r3, #16
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0320 	bic.w	r3, r3, #32
 8008a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1d      	ldr	r2, [pc, #116]	; (8008ab0 <TIM_OC2_SetConfig+0xd0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10d      	bne.n	8008a5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a14      	ldr	r2, [pc, #80]	; (8008ab0 <TIM_OC2_SetConfig+0xd0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d113      	bne.n	8008a8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr
 8008ab0:	40012c00 	.word	0x40012c00

08008ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0303 	bic.w	r3, r3, #3
 8008aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	; (8008b84 <TIM_OC3_SetConfig+0xd0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d10d      	bne.n	8008b2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a14      	ldr	r2, [pc, #80]	; (8008b84 <TIM_OC3_SetConfig+0xd0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d113      	bne.n	8008b5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	621a      	str	r2, [r3, #32]
}
 8008b78:	bf00      	nop
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40012c00 	.word	0x40012c00

08008b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	031b      	lsls	r3, r3, #12
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a0f      	ldr	r2, [pc, #60]	; (8008c20 <TIM_OC4_SetConfig+0x98>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d109      	bne.n	8008bfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	019b      	lsls	r3, r3, #6
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr
 8008c20:	40012c00 	.word	0x40012c00

08008c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e046      	b.n	8008cca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00e      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c88:	d009      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a12      	ldr	r2, [pc, #72]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d004      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a10      	ldr	r2, [pc, #64]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d10c      	bne.n	8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr
 8008cd4:	40012c00 	.word	0x40012c00
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800

08008ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e03d      	b.n	8008d78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	4770      	bx	lr

08008d82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e03f      	b.n	8008e14 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7f7 fe33 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2224      	movs	r2, #36	; 0x24
 8008db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fcbe 	bl	8009748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	695a      	ldr	r2, [r3, #20]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dfa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	; 0x28
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d17c      	bne.n	8008f36 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_UART_Transmit+0x2c>
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e075      	b.n	8008f38 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_UART_Transmit+0x3e>
 8008e56:	2302      	movs	r3, #2
 8008e58:	e06e      	b.n	8008f38 <HAL_UART_Transmit+0x11c>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2221      	movs	r2, #33	; 0x21
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e70:	f7fc ff76 	bl	8005d60 <HAL_GetTick>
 8008e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	88fa      	ldrh	r2, [r7, #6]
 8008e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	88fa      	ldrh	r2, [r7, #6]
 8008e80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8a:	d108      	bne.n	8008e9e <HAL_UART_Transmit+0x82>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	e003      	b.n	8008ea6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008eae:	e02a      	b.n	8008f06 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2180      	movs	r1, #128	; 0x80
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 faa9 	bl	8009412 <UART_WaitOnFlagUntilTimeout>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e036      	b.n	8008f38 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10b      	bne.n	8008ee8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ede:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e007      	b.n	8008ef8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1cf      	bne.n	8008eb0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	2200      	movs	r2, #0
 8008f18:	2140      	movs	r1, #64	; 0x40
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fa79 	bl	8009412 <UART_WaitOnFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e006      	b.n	8008f38 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	e000      	b.n	8008f38 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008f36:	2302      	movs	r3, #2
  }
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	f040 808c 	bne.w	800907a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <HAL_UART_Receive+0x2e>
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e084      	b.n	800907c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_UART_Receive+0x40>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e07d      	b.n	800907c <HAL_UART_Receive+0x13c>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2222      	movs	r2, #34	; 0x22
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f9c:	f7fc fee0 	bl	8005d60 <HAL_GetTick>
 8008fa0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb6:	d108      	bne.n	8008fca <HAL_UART_Receive+0x8a>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	e003      	b.n	8008fd2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008fda:	e043      	b.n	8009064 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2120      	movs	r1, #32
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 fa13 	bl	8009412 <UART_WaitOnFlagUntilTimeout>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e042      	b.n	800907c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10c      	bne.n	8009016 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	b29b      	uxth	r3, r3
 8009004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009008:	b29a      	uxth	r2, r3
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	3302      	adds	r3, #2
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e01f      	b.n	8009056 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d007      	beq.n	8009030 <HAL_UART_Receive+0xf0>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <HAL_UART_Receive+0xfe>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d106      	bne.n	800903e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	701a      	strb	r2, [r3, #0]
 800903c:	e008      	b.n	8009050 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	b2da      	uxtb	r2, r3
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3301      	adds	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1b6      	bne.n	8008fdc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2220      	movs	r2, #32
 8009072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e000      	b.n	800907c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800907a:	2302      	movs	r3, #2
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3720      	adds	r7, #32
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08a      	sub	sp, #40	; 0x28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10d      	bne.n	80090d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	f003 0320 	and.w	r3, r3, #32
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <HAL_UART_IRQHandler+0x52>
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa90 	bl	80095f4 <UART_Receive_IT>
      return;
 80090d4:	e17b      	b.n	80093ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80b1 	beq.w	8009240 <HAL_UART_IRQHandler+0x1bc>
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d105      	bne.n	80090f4 <HAL_UART_IRQHandler+0x70>
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 80a6 	beq.w	8009240 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <HAL_UART_IRQHandler+0x90>
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910c:	f043 0201 	orr.w	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <HAL_UART_IRQHandler+0xb0>
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	f043 0202 	orr.w	r2, r3, #2
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <HAL_UART_IRQHandler+0xd0>
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f043 0204 	orr.w	r2, r3, #4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	f003 0308 	and.w	r3, r3, #8
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00f      	beq.n	800917e <HAL_UART_IRQHandler+0xfa>
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <HAL_UART_IRQHandler+0xee>
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	f043 0208 	orr.w	r2, r3, #8
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 811e 	beq.w	80093c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <HAL_UART_IRQHandler+0x11e>
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa29 	bl	80095f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bf14      	ite	ne
 80091b0:	2301      	movne	r3, #1
 80091b2:	2300      	moveq	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	f003 0308 	and.w	r3, r3, #8
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <HAL_UART_IRQHandler+0x146>
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d031      	beq.n	800922e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f96b 	bl	80094a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d023      	beq.n	8009226 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d013      	beq.n	800921e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	4a76      	ldr	r2, [pc, #472]	; (80093d4 <HAL_UART_IRQHandler+0x350>)
 80091fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	4618      	mov	r0, r3
 8009204:	f7fd fb66 	bl	80068d4 <HAL_DMA_Abort_IT>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d016      	beq.n	800923c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921c:	e00e      	b.n	800923c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f8e3 	bl	80093ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009224:	e00a      	b.n	800923c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8df 	bl	80093ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922c:	e006      	b.n	800923c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8db 	bl	80093ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800923a:	e0c3      	b.n	80093c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	bf00      	nop
    return;
 800923e:	e0c1      	b.n	80093c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	2b01      	cmp	r3, #1
 8009246:	f040 80a1 	bne.w	800938c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 809b 	beq.w	800938c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8095 	beq.w	800938c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	d04e      	beq.n	8009324 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009290:	8a3b      	ldrh	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 8098 	beq.w	80093c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800929c:	8a3a      	ldrh	r2, [r7, #16]
 800929e:	429a      	cmp	r2, r3
 80092a0:	f080 8092 	bcs.w	80093c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	8a3a      	ldrh	r2, [r7, #16]
 80092a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d02b      	beq.n	800930c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	695a      	ldr	r2, [r3, #20]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0201 	bic.w	r2, r2, #1
 80092d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68da      	ldr	r2, [r3, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0210 	bic.w	r2, r2, #16
 8009300:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	4618      	mov	r0, r3
 8009308:	f7fd faa9 	bl	800685e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009314:	b29b      	uxth	r3, r3
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	b29b      	uxth	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f86d 	bl	80093fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009322:	e051      	b.n	80093c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800932c:	b29b      	uxth	r3, r3
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d047      	beq.n	80093cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800933c:	8a7b      	ldrh	r3, [r7, #18]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d044      	beq.n	80093cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009350:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0201 	bic.w	r2, r2, #1
 8009360:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0210 	bic.w	r2, r2, #16
 800937e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009380:	8a7b      	ldrh	r3, [r7, #18]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f839 	bl	80093fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800938a:	e01f      	b.n	80093cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <HAL_UART_IRQHandler+0x324>
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f8c0 	bl	8009526 <UART_Transmit_IT>
    return;
 80093a6:	e012      	b.n	80093ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00d      	beq.n	80093ce <HAL_UART_IRQHandler+0x34a>
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d008      	beq.n	80093ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f901 	bl	80095c4 <UART_EndTransmit_IT>
    return;
 80093c2:	e004      	b.n	80093ce <HAL_UART_IRQHandler+0x34a>
    return;
 80093c4:	bf00      	nop
 80093c6:	e002      	b.n	80093ce <HAL_UART_IRQHandler+0x34a>
      return;
 80093c8:	bf00      	nop
 80093ca:	e000      	b.n	80093ce <HAL_UART_IRQHandler+0x34a>
      return;
 80093cc:	bf00      	nop
  }
}
 80093ce:	3728      	adds	r7, #40	; 0x28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	080094ff 	.word	0x080094ff

080093d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr

080093ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	603b      	str	r3, [r7, #0]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009422:	e02c      	b.n	800947e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942a:	d028      	beq.n	800947e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d007      	beq.n	8009442 <UART_WaitOnFlagUntilTimeout+0x30>
 8009432:	f7fc fc95 	bl	8005d60 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	429a      	cmp	r2, r3
 8009440:	d21d      	bcs.n	800947e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009450:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695a      	ldr	r2, [r3, #20]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0201 	bic.w	r2, r2, #1
 8009460:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2220      	movs	r2, #32
 800946e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e00f      	b.n	800949e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4013      	ands	r3, r2
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	bf0c      	ite	eq
 800948e:	2301      	moveq	r3, #1
 8009490:	2300      	movne	r3, #0
 8009492:	b2db      	uxtb	r3, r3
 8009494:	461a      	mov	r2, r3
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	429a      	cmp	r2, r3
 800949a:	d0c3      	beq.n	8009424 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695a      	ldr	r2, [r3, #20]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0201 	bic.w	r2, r2, #1
 80094cc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d107      	bne.n	80094e6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 0210 	bic.w	r2, r2, #16
 80094e4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr

080094fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff ff66 	bl	80093ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951e:	bf00      	nop
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b21      	cmp	r3, #33	; 0x21
 8009538:	d13e      	bne.n	80095b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009542:	d114      	bne.n	800956e <UART_Transmit_IT+0x48>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d110      	bne.n	800956e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009560:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	1c9a      	adds	r2, r3, #2
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	621a      	str	r2, [r3, #32]
 800956c:	e008      	b.n	8009580 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	1c59      	adds	r1, r3, #1
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6211      	str	r1, [r2, #32]
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	b29b      	uxth	r3, r3
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4619      	mov	r1, r3
 800958e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10f      	bne.n	80095b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	e000      	b.n	80095ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095b8:	2302      	movs	r3, #2
  }
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	bc80      	pop	{r7}
 80095c2:	4770      	bx	lr

080095c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff fef7 	bl	80093d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b22      	cmp	r3, #34	; 0x22
 8009606:	f040 8099 	bne.w	800973c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009612:	d117      	bne.n	8009644 <UART_Receive_IT+0x50>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d113      	bne.n	8009644 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009624:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	b29b      	uxth	r3, r3
 800962e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009632:	b29a      	uxth	r2, r3
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	1c9a      	adds	r2, r3, #2
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	629a      	str	r2, [r3, #40]	; 0x28
 8009642:	e026      	b.n	8009692 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800964a:	2300      	movs	r3, #0
 800964c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009656:	d007      	beq.n	8009668 <UART_Receive_IT+0x74>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <UART_Receive_IT+0x82>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d106      	bne.n	8009676 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e008      	b.n	8009688 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009682:	b2da      	uxtb	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29b      	uxth	r3, r3
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4619      	mov	r1, r3
 80096a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d148      	bne.n	8009738 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0220 	bic.w	r2, r2, #32
 80096b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695a      	ldr	r2, [r3, #20]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d123      	bne.n	800972e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0210 	bic.w	r2, r2, #16
 80096fa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0310 	and.w	r3, r3, #16
 8009706:	2b10      	cmp	r3, #16
 8009708:	d10a      	bne.n	8009720 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff fe68 	bl	80093fc <HAL_UARTEx_RxEventCallback>
 800972c:	e002      	b.n	8009734 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f6 fdbc 	bl	80002ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	e002      	b.n	800973e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	e000      	b.n	800973e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800973c:	2302      	movs	r3, #2
  }
}
 800973e:	4618      	mov	r0, r3
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	4313      	orrs	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009782:	f023 030c 	bic.w	r3, r3, #12
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6812      	ldr	r2, [r2, #0]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	430b      	orrs	r3, r1
 800978e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a2c      	ldr	r2, [pc, #176]	; (800985c <UART_SetConfig+0x114>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d103      	bne.n	80097b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80097b0:	f7fe fe58 	bl	8008464 <HAL_RCC_GetPCLK2Freq>
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	e002      	b.n	80097be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80097b8:	f7fe fe40 	bl	800843c <HAL_RCC_GetPCLK1Freq>
 80097bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009a      	lsls	r2, r3, #2
 80097c8:	441a      	add	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d4:	4a22      	ldr	r2, [pc, #136]	; (8009860 <UART_SetConfig+0x118>)
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	0119      	lsls	r1, r3, #4
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009a      	lsls	r2, r3, #2
 80097e8:	441a      	add	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80097f4:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <UART_SetConfig+0x118>)
 80097f6:	fba3 0302 	umull	r0, r3, r3, r2
 80097fa:	095b      	lsrs	r3, r3, #5
 80097fc:	2064      	movs	r0, #100	; 0x64
 80097fe:	fb00 f303 	mul.w	r3, r0, r3
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	3332      	adds	r3, #50	; 0x32
 8009808:	4a15      	ldr	r2, [pc, #84]	; (8009860 <UART_SetConfig+0x118>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009814:	4419      	add	r1, r3
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009a      	lsls	r2, r3, #2
 8009820:	441a      	add	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	fbb2 f2f3 	udiv	r2, r2, r3
 800982c:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <UART_SetConfig+0x118>)
 800982e:	fba3 0302 	umull	r0, r3, r3, r2
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	2064      	movs	r0, #100	; 0x64
 8009836:	fb00 f303 	mul.w	r3, r0, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	011b      	lsls	r3, r3, #4
 800983e:	3332      	adds	r3, #50	; 0x32
 8009840:	4a07      	ldr	r2, [pc, #28]	; (8009860 <UART_SetConfig+0x118>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	f003 020f 	and.w	r2, r3, #15
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	440a      	add	r2, r1
 8009852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40013800 	.word	0x40013800
 8009860:	51eb851f 	.word	0x51eb851f

08009864 <__errno>:
 8009864:	4b01      	ldr	r3, [pc, #4]	; (800986c <__errno+0x8>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	200002cc 	.word	0x200002cc

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	2600      	movs	r6, #0
 8009874:	4d0c      	ldr	r5, [pc, #48]	; (80098a8 <__libc_init_array+0x38>)
 8009876:	4c0d      	ldr	r4, [pc, #52]	; (80098ac <__libc_init_array+0x3c>)
 8009878:	1b64      	subs	r4, r4, r5
 800987a:	10a4      	asrs	r4, r4, #2
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	f000 ffcc 	bl	800a81c <_init>
 8009884:	2600      	movs	r6, #0
 8009886:	4d0a      	ldr	r5, [pc, #40]	; (80098b0 <__libc_init_array+0x40>)
 8009888:	4c0a      	ldr	r4, [pc, #40]	; (80098b4 <__libc_init_array+0x44>)
 800988a:	1b64      	subs	r4, r4, r5
 800988c:	10a4      	asrs	r4, r4, #2
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	f855 3b04 	ldr.w	r3, [r5], #4
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	0800a934 	.word	0x0800a934
 80098ac:	0800a934 	.word	0x0800a934
 80098b0:	0800a934 	.word	0x0800a934
 80098b4:	0800a938 	.word	0x0800a938

080098b8 <memcpy>:
 80098b8:	440a      	add	r2, r1
 80098ba:	4291      	cmp	r1, r2
 80098bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c0:	d100      	bne.n	80098c4 <memcpy+0xc>
 80098c2:	4770      	bx	lr
 80098c4:	b510      	push	{r4, lr}
 80098c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d0:	d1f9      	bne.n	80098c6 <memcpy+0xe>
 80098d2:	bd10      	pop	{r4, pc}

080098d4 <memset>:
 80098d4:	4603      	mov	r3, r0
 80098d6:	4402      	add	r2, r0
 80098d8:	4293      	cmp	r3, r2
 80098da:	d100      	bne.n	80098de <memset+0xa>
 80098dc:	4770      	bx	lr
 80098de:	f803 1b01 	strb.w	r1, [r3], #1
 80098e2:	e7f9      	b.n	80098d8 <memset+0x4>

080098e4 <iprintf>:
 80098e4:	b40f      	push	{r0, r1, r2, r3}
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <iprintf+0x2c>)
 80098e8:	b513      	push	{r0, r1, r4, lr}
 80098ea:	681c      	ldr	r4, [r3, #0]
 80098ec:	b124      	cbz	r4, 80098f8 <iprintf+0x14>
 80098ee:	69a3      	ldr	r3, [r4, #24]
 80098f0:	b913      	cbnz	r3, 80098f8 <iprintf+0x14>
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 f86e 	bl	80099d4 <__sinit>
 80098f8:	ab05      	add	r3, sp, #20
 80098fa:	4620      	mov	r0, r4
 80098fc:	9a04      	ldr	r2, [sp, #16]
 80098fe:	68a1      	ldr	r1, [r4, #8]
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	f000 f9c3 	bl	8009c8c <_vfiprintf_r>
 8009906:	b002      	add	sp, #8
 8009908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800990c:	b004      	add	sp, #16
 800990e:	4770      	bx	lr
 8009910:	200002cc 	.word	0x200002cc

08009914 <strcpy>:
 8009914:	4603      	mov	r3, r0
 8009916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800991a:	f803 2b01 	strb.w	r2, [r3], #1
 800991e:	2a00      	cmp	r2, #0
 8009920:	d1f9      	bne.n	8009916 <strcpy+0x2>
 8009922:	4770      	bx	lr

08009924 <std>:
 8009924:	2300      	movs	r3, #0
 8009926:	b510      	push	{r4, lr}
 8009928:	4604      	mov	r4, r0
 800992a:	e9c0 3300 	strd	r3, r3, [r0]
 800992e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009932:	6083      	str	r3, [r0, #8]
 8009934:	8181      	strh	r1, [r0, #12]
 8009936:	6643      	str	r3, [r0, #100]	; 0x64
 8009938:	81c2      	strh	r2, [r0, #14]
 800993a:	6183      	str	r3, [r0, #24]
 800993c:	4619      	mov	r1, r3
 800993e:	2208      	movs	r2, #8
 8009940:	305c      	adds	r0, #92	; 0x5c
 8009942:	f7ff ffc7 	bl	80098d4 <memset>
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <std+0x38>)
 8009948:	6224      	str	r4, [r4, #32]
 800994a:	6263      	str	r3, [r4, #36]	; 0x24
 800994c:	4b04      	ldr	r3, [pc, #16]	; (8009960 <std+0x3c>)
 800994e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009950:	4b04      	ldr	r3, [pc, #16]	; (8009964 <std+0x40>)
 8009952:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009954:	4b04      	ldr	r3, [pc, #16]	; (8009968 <std+0x44>)
 8009956:	6323      	str	r3, [r4, #48]	; 0x30
 8009958:	bd10      	pop	{r4, pc}
 800995a:	bf00      	nop
 800995c:	0800a239 	.word	0x0800a239
 8009960:	0800a25b 	.word	0x0800a25b
 8009964:	0800a293 	.word	0x0800a293
 8009968:	0800a2b7 	.word	0x0800a2b7

0800996c <_cleanup_r>:
 800996c:	4901      	ldr	r1, [pc, #4]	; (8009974 <_cleanup_r+0x8>)
 800996e:	f000 b8af 	b.w	8009ad0 <_fwalk_reent>
 8009972:	bf00      	nop
 8009974:	0800a589 	.word	0x0800a589

08009978 <__sfmoreglue>:
 8009978:	2268      	movs	r2, #104	; 0x68
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	1e4d      	subs	r5, r1, #1
 800997e:	4355      	muls	r5, r2
 8009980:	460e      	mov	r6, r1
 8009982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009986:	f000 f8e5 	bl	8009b54 <_malloc_r>
 800998a:	4604      	mov	r4, r0
 800998c:	b140      	cbz	r0, 80099a0 <__sfmoreglue+0x28>
 800998e:	2100      	movs	r1, #0
 8009990:	e9c0 1600 	strd	r1, r6, [r0]
 8009994:	300c      	adds	r0, #12
 8009996:	60a0      	str	r0, [r4, #8]
 8009998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800999c:	f7ff ff9a 	bl	80098d4 <memset>
 80099a0:	4620      	mov	r0, r4
 80099a2:	bd70      	pop	{r4, r5, r6, pc}

080099a4 <__sfp_lock_acquire>:
 80099a4:	4801      	ldr	r0, [pc, #4]	; (80099ac <__sfp_lock_acquire+0x8>)
 80099a6:	f000 b8b3 	b.w	8009b10 <__retarget_lock_acquire_recursive>
 80099aa:	bf00      	nop
 80099ac:	20000665 	.word	0x20000665

080099b0 <__sfp_lock_release>:
 80099b0:	4801      	ldr	r0, [pc, #4]	; (80099b8 <__sfp_lock_release+0x8>)
 80099b2:	f000 b8ae 	b.w	8009b12 <__retarget_lock_release_recursive>
 80099b6:	bf00      	nop
 80099b8:	20000665 	.word	0x20000665

080099bc <__sinit_lock_acquire>:
 80099bc:	4801      	ldr	r0, [pc, #4]	; (80099c4 <__sinit_lock_acquire+0x8>)
 80099be:	f000 b8a7 	b.w	8009b10 <__retarget_lock_acquire_recursive>
 80099c2:	bf00      	nop
 80099c4:	20000666 	.word	0x20000666

080099c8 <__sinit_lock_release>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__sinit_lock_release+0x8>)
 80099ca:	f000 b8a2 	b.w	8009b12 <__retarget_lock_release_recursive>
 80099ce:	bf00      	nop
 80099d0:	20000666 	.word	0x20000666

080099d4 <__sinit>:
 80099d4:	b510      	push	{r4, lr}
 80099d6:	4604      	mov	r4, r0
 80099d8:	f7ff fff0 	bl	80099bc <__sinit_lock_acquire>
 80099dc:	69a3      	ldr	r3, [r4, #24]
 80099de:	b11b      	cbz	r3, 80099e8 <__sinit+0x14>
 80099e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e4:	f7ff bff0 	b.w	80099c8 <__sinit_lock_release>
 80099e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099ec:	6523      	str	r3, [r4, #80]	; 0x50
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <__sinit+0x68>)
 80099f0:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <__sinit+0x6c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	bf08      	it	eq
 80099fa:	2301      	moveq	r3, #1
 80099fc:	4620      	mov	r0, r4
 80099fe:	bf08      	it	eq
 8009a00:	61a3      	streq	r3, [r4, #24]
 8009a02:	f000 f81f 	bl	8009a44 <__sfp>
 8009a06:	6060      	str	r0, [r4, #4]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 f81b 	bl	8009a44 <__sfp>
 8009a0e:	60a0      	str	r0, [r4, #8]
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 f817 	bl	8009a44 <__sfp>
 8009a16:	2200      	movs	r2, #0
 8009a18:	2104      	movs	r1, #4
 8009a1a:	60e0      	str	r0, [r4, #12]
 8009a1c:	6860      	ldr	r0, [r4, #4]
 8009a1e:	f7ff ff81 	bl	8009924 <std>
 8009a22:	2201      	movs	r2, #1
 8009a24:	2109      	movs	r1, #9
 8009a26:	68a0      	ldr	r0, [r4, #8]
 8009a28:	f7ff ff7c 	bl	8009924 <std>
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	2112      	movs	r1, #18
 8009a30:	68e0      	ldr	r0, [r4, #12]
 8009a32:	f7ff ff77 	bl	8009924 <std>
 8009a36:	2301      	movs	r3, #1
 8009a38:	61a3      	str	r3, [r4, #24]
 8009a3a:	e7d1      	b.n	80099e0 <__sinit+0xc>
 8009a3c:	0800a89c 	.word	0x0800a89c
 8009a40:	0800996d 	.word	0x0800996d

08009a44 <__sfp>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	4607      	mov	r7, r0
 8009a48:	f7ff ffac 	bl	80099a4 <__sfp_lock_acquire>
 8009a4c:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <__sfp+0x84>)
 8009a4e:	681e      	ldr	r6, [r3, #0]
 8009a50:	69b3      	ldr	r3, [r6, #24]
 8009a52:	b913      	cbnz	r3, 8009a5a <__sfp+0x16>
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7ff ffbd 	bl	80099d4 <__sinit>
 8009a5a:	3648      	adds	r6, #72	; 0x48
 8009a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	d503      	bpl.n	8009a6c <__sfp+0x28>
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	b30b      	cbz	r3, 8009aac <__sfp+0x68>
 8009a68:	6836      	ldr	r6, [r6, #0]
 8009a6a:	e7f7      	b.n	8009a5c <__sfp+0x18>
 8009a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a70:	b9d5      	cbnz	r5, 8009aa8 <__sfp+0x64>
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <__sfp+0x88>)
 8009a74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a78:	60e3      	str	r3, [r4, #12]
 8009a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009a7c:	f000 f847 	bl	8009b0e <__retarget_lock_init_recursive>
 8009a80:	f7ff ff96 	bl	80099b0 <__sfp_lock_release>
 8009a84:	2208      	movs	r2, #8
 8009a86:	4629      	mov	r1, r5
 8009a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a90:	6025      	str	r5, [r4, #0]
 8009a92:	61a5      	str	r5, [r4, #24]
 8009a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a98:	f7ff ff1c 	bl	80098d4 <memset>
 8009a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa8:	3468      	adds	r4, #104	; 0x68
 8009aaa:	e7d9      	b.n	8009a60 <__sfp+0x1c>
 8009aac:	2104      	movs	r1, #4
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7ff ff62 	bl	8009978 <__sfmoreglue>
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	6030      	str	r0, [r6, #0]
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d1d5      	bne.n	8009a68 <__sfp+0x24>
 8009abc:	f7ff ff78 	bl	80099b0 <__sfp_lock_release>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	e7ee      	b.n	8009aa4 <__sfp+0x60>
 8009ac6:	bf00      	nop
 8009ac8:	0800a89c 	.word	0x0800a89c
 8009acc:	ffff0001 	.word	0xffff0001

08009ad0 <_fwalk_reent>:
 8009ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	4688      	mov	r8, r1
 8009ad8:	2700      	movs	r7, #0
 8009ada:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ae6:	d505      	bpl.n	8009af4 <_fwalk_reent+0x24>
 8009ae8:	6824      	ldr	r4, [r4, #0]
 8009aea:	2c00      	cmp	r4, #0
 8009aec:	d1f7      	bne.n	8009ade <_fwalk_reent+0xe>
 8009aee:	4638      	mov	r0, r7
 8009af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af4:	89ab      	ldrh	r3, [r5, #12]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d907      	bls.n	8009b0a <_fwalk_reent+0x3a>
 8009afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009afe:	3301      	adds	r3, #1
 8009b00:	d003      	beq.n	8009b0a <_fwalk_reent+0x3a>
 8009b02:	4629      	mov	r1, r5
 8009b04:	4630      	mov	r0, r6
 8009b06:	47c0      	blx	r8
 8009b08:	4307      	orrs	r7, r0
 8009b0a:	3568      	adds	r5, #104	; 0x68
 8009b0c:	e7e9      	b.n	8009ae2 <_fwalk_reent+0x12>

08009b0e <__retarget_lock_init_recursive>:
 8009b0e:	4770      	bx	lr

08009b10 <__retarget_lock_acquire_recursive>:
 8009b10:	4770      	bx	lr

08009b12 <__retarget_lock_release_recursive>:
 8009b12:	4770      	bx	lr

08009b14 <sbrk_aligned>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4e0e      	ldr	r6, [pc, #56]	; (8009b50 <sbrk_aligned+0x3c>)
 8009b18:	460c      	mov	r4, r1
 8009b1a:	6831      	ldr	r1, [r6, #0]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	b911      	cbnz	r1, 8009b26 <sbrk_aligned+0x12>
 8009b20:	f000 fb7a 	bl	800a218 <_sbrk_r>
 8009b24:	6030      	str	r0, [r6, #0]
 8009b26:	4621      	mov	r1, r4
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 fb75 	bl	800a218 <_sbrk_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	d00a      	beq.n	8009b48 <sbrk_aligned+0x34>
 8009b32:	1cc4      	adds	r4, r0, #3
 8009b34:	f024 0403 	bic.w	r4, r4, #3
 8009b38:	42a0      	cmp	r0, r4
 8009b3a:	d007      	beq.n	8009b4c <sbrk_aligned+0x38>
 8009b3c:	1a21      	subs	r1, r4, r0
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f000 fb6a 	bl	800a218 <_sbrk_r>
 8009b44:	3001      	adds	r0, #1
 8009b46:	d101      	bne.n	8009b4c <sbrk_aligned+0x38>
 8009b48:	f04f 34ff 	mov.w	r4, #4294967295
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	2000066c 	.word	0x2000066c

08009b54 <_malloc_r>:
 8009b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	1ccd      	adds	r5, r1, #3
 8009b5a:	f025 0503 	bic.w	r5, r5, #3
 8009b5e:	3508      	adds	r5, #8
 8009b60:	2d0c      	cmp	r5, #12
 8009b62:	bf38      	it	cc
 8009b64:	250c      	movcc	r5, #12
 8009b66:	2d00      	cmp	r5, #0
 8009b68:	4607      	mov	r7, r0
 8009b6a:	db01      	blt.n	8009b70 <_malloc_r+0x1c>
 8009b6c:	42a9      	cmp	r1, r5
 8009b6e:	d905      	bls.n	8009b7c <_malloc_r+0x28>
 8009b70:	230c      	movs	r3, #12
 8009b72:	2600      	movs	r6, #0
 8009b74:	603b      	str	r3, [r7, #0]
 8009b76:	4630      	mov	r0, r6
 8009b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b7c:	4e2e      	ldr	r6, [pc, #184]	; (8009c38 <_malloc_r+0xe4>)
 8009b7e:	f000 fdc5 	bl	800a70c <__malloc_lock>
 8009b82:	6833      	ldr	r3, [r6, #0]
 8009b84:	461c      	mov	r4, r3
 8009b86:	bb34      	cbnz	r4, 8009bd6 <_malloc_r+0x82>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	f7ff ffc2 	bl	8009b14 <sbrk_aligned>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	4604      	mov	r4, r0
 8009b94:	d14d      	bne.n	8009c32 <_malloc_r+0xde>
 8009b96:	6834      	ldr	r4, [r6, #0]
 8009b98:	4626      	mov	r6, r4
 8009b9a:	2e00      	cmp	r6, #0
 8009b9c:	d140      	bne.n	8009c20 <_malloc_r+0xcc>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	eb04 0803 	add.w	r8, r4, r3
 8009ba8:	f000 fb36 	bl	800a218 <_sbrk_r>
 8009bac:	4580      	cmp	r8, r0
 8009bae:	d13a      	bne.n	8009c26 <_malloc_r+0xd2>
 8009bb0:	6821      	ldr	r1, [r4, #0]
 8009bb2:	3503      	adds	r5, #3
 8009bb4:	1a6d      	subs	r5, r5, r1
 8009bb6:	f025 0503 	bic.w	r5, r5, #3
 8009bba:	3508      	adds	r5, #8
 8009bbc:	2d0c      	cmp	r5, #12
 8009bbe:	bf38      	it	cc
 8009bc0:	250c      	movcc	r5, #12
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7ff ffa5 	bl	8009b14 <sbrk_aligned>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d02b      	beq.n	8009c26 <_malloc_r+0xd2>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	442b      	add	r3, r5
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	e00e      	b.n	8009bf4 <_malloc_r+0xa0>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	1b52      	subs	r2, r2, r5
 8009bda:	d41e      	bmi.n	8009c1a <_malloc_r+0xc6>
 8009bdc:	2a0b      	cmp	r2, #11
 8009bde:	d916      	bls.n	8009c0e <_malloc_r+0xba>
 8009be0:	1961      	adds	r1, r4, r5
 8009be2:	42a3      	cmp	r3, r4
 8009be4:	6025      	str	r5, [r4, #0]
 8009be6:	bf18      	it	ne
 8009be8:	6059      	strne	r1, [r3, #4]
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	bf08      	it	eq
 8009bee:	6031      	streq	r1, [r6, #0]
 8009bf0:	5162      	str	r2, [r4, r5]
 8009bf2:	604b      	str	r3, [r1, #4]
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f104 060b 	add.w	r6, r4, #11
 8009bfa:	f000 fd8d 	bl	800a718 <__malloc_unlock>
 8009bfe:	f026 0607 	bic.w	r6, r6, #7
 8009c02:	1d23      	adds	r3, r4, #4
 8009c04:	1af2      	subs	r2, r6, r3
 8009c06:	d0b6      	beq.n	8009b76 <_malloc_r+0x22>
 8009c08:	1b9b      	subs	r3, r3, r6
 8009c0a:	50a3      	str	r3, [r4, r2]
 8009c0c:	e7b3      	b.n	8009b76 <_malloc_r+0x22>
 8009c0e:	6862      	ldr	r2, [r4, #4]
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	bf0c      	ite	eq
 8009c14:	6032      	streq	r2, [r6, #0]
 8009c16:	605a      	strne	r2, [r3, #4]
 8009c18:	e7ec      	b.n	8009bf4 <_malloc_r+0xa0>
 8009c1a:	4623      	mov	r3, r4
 8009c1c:	6864      	ldr	r4, [r4, #4]
 8009c1e:	e7b2      	b.n	8009b86 <_malloc_r+0x32>
 8009c20:	4634      	mov	r4, r6
 8009c22:	6876      	ldr	r6, [r6, #4]
 8009c24:	e7b9      	b.n	8009b9a <_malloc_r+0x46>
 8009c26:	230c      	movs	r3, #12
 8009c28:	4638      	mov	r0, r7
 8009c2a:	603b      	str	r3, [r7, #0]
 8009c2c:	f000 fd74 	bl	800a718 <__malloc_unlock>
 8009c30:	e7a1      	b.n	8009b76 <_malloc_r+0x22>
 8009c32:	6025      	str	r5, [r4, #0]
 8009c34:	e7de      	b.n	8009bf4 <_malloc_r+0xa0>
 8009c36:	bf00      	nop
 8009c38:	20000668 	.word	0x20000668

08009c3c <__sfputc_r>:
 8009c3c:	6893      	ldr	r3, [r2, #8]
 8009c3e:	b410      	push	{r4}
 8009c40:	3b01      	subs	r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	6093      	str	r3, [r2, #8]
 8009c46:	da07      	bge.n	8009c58 <__sfputc_r+0x1c>
 8009c48:	6994      	ldr	r4, [r2, #24]
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	db01      	blt.n	8009c52 <__sfputc_r+0x16>
 8009c4e:	290a      	cmp	r1, #10
 8009c50:	d102      	bne.n	8009c58 <__sfputc_r+0x1c>
 8009c52:	bc10      	pop	{r4}
 8009c54:	f000 bb34 	b.w	800a2c0 <__swbuf_r>
 8009c58:	6813      	ldr	r3, [r2, #0]
 8009c5a:	1c58      	adds	r0, r3, #1
 8009c5c:	6010      	str	r0, [r2, #0]
 8009c5e:	7019      	strb	r1, [r3, #0]
 8009c60:	4608      	mov	r0, r1
 8009c62:	bc10      	pop	{r4}
 8009c64:	4770      	bx	lr

08009c66 <__sfputs_r>:
 8009c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c68:	4606      	mov	r6, r0
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	18d5      	adds	r5, r2, r3
 8009c70:	42ac      	cmp	r4, r5
 8009c72:	d101      	bne.n	8009c78 <__sfputs_r+0x12>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e007      	b.n	8009c88 <__sfputs_r+0x22>
 8009c78:	463a      	mov	r2, r7
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c80:	f7ff ffdc 	bl	8009c3c <__sfputc_r>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d1f3      	bne.n	8009c70 <__sfputs_r+0xa>
 8009c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c8c <_vfiprintf_r>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	460d      	mov	r5, r1
 8009c92:	4614      	mov	r4, r2
 8009c94:	4698      	mov	r8, r3
 8009c96:	4606      	mov	r6, r0
 8009c98:	b09d      	sub	sp, #116	; 0x74
 8009c9a:	b118      	cbz	r0, 8009ca4 <_vfiprintf_r+0x18>
 8009c9c:	6983      	ldr	r3, [r0, #24]
 8009c9e:	b90b      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x18>
 8009ca0:	f7ff fe98 	bl	80099d4 <__sinit>
 8009ca4:	4b89      	ldr	r3, [pc, #548]	; (8009ecc <_vfiprintf_r+0x240>)
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	d11b      	bne.n	8009ce2 <_vfiprintf_r+0x56>
 8009caa:	6875      	ldr	r5, [r6, #4]
 8009cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cae:	07d9      	lsls	r1, r3, #31
 8009cb0:	d405      	bmi.n	8009cbe <_vfiprintf_r+0x32>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	059a      	lsls	r2, r3, #22
 8009cb6:	d402      	bmi.n	8009cbe <_vfiprintf_r+0x32>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cba:	f7ff ff29 	bl	8009b10 <__retarget_lock_acquire_recursive>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	071b      	lsls	r3, r3, #28
 8009cc2:	d501      	bpl.n	8009cc8 <_vfiprintf_r+0x3c>
 8009cc4:	692b      	ldr	r3, [r5, #16]
 8009cc6:	b9eb      	cbnz	r3, 8009d04 <_vfiprintf_r+0x78>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 fb5c 	bl	800a388 <__swsetup_r>
 8009cd0:	b1c0      	cbz	r0, 8009d04 <_vfiprintf_r+0x78>
 8009cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd4:	07dc      	lsls	r4, r3, #31
 8009cd6:	d50e      	bpl.n	8009cf6 <_vfiprintf_r+0x6a>
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	b01d      	add	sp, #116	; 0x74
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	4b7b      	ldr	r3, [pc, #492]	; (8009ed0 <_vfiprintf_r+0x244>)
 8009ce4:	429d      	cmp	r5, r3
 8009ce6:	d101      	bne.n	8009cec <_vfiprintf_r+0x60>
 8009ce8:	68b5      	ldr	r5, [r6, #8]
 8009cea:	e7df      	b.n	8009cac <_vfiprintf_r+0x20>
 8009cec:	4b79      	ldr	r3, [pc, #484]	; (8009ed4 <_vfiprintf_r+0x248>)
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	bf08      	it	eq
 8009cf2:	68f5      	ldreq	r5, [r6, #12]
 8009cf4:	e7da      	b.n	8009cac <_vfiprintf_r+0x20>
 8009cf6:	89ab      	ldrh	r3, [r5, #12]
 8009cf8:	0598      	lsls	r0, r3, #22
 8009cfa:	d4ed      	bmi.n	8009cd8 <_vfiprintf_r+0x4c>
 8009cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cfe:	f7ff ff08 	bl	8009b12 <__retarget_lock_release_recursive>
 8009d02:	e7e9      	b.n	8009cd8 <_vfiprintf_r+0x4c>
 8009d04:	2300      	movs	r3, #0
 8009d06:	9309      	str	r3, [sp, #36]	; 0x24
 8009d08:	2320      	movs	r3, #32
 8009d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d0e:	2330      	movs	r3, #48	; 0x30
 8009d10:	f04f 0901 	mov.w	r9, #1
 8009d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009ed8 <_vfiprintf_r+0x24c>
 8009d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d20:	4623      	mov	r3, r4
 8009d22:	469a      	mov	sl, r3
 8009d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d28:	b10a      	cbz	r2, 8009d2e <_vfiprintf_r+0xa2>
 8009d2a:	2a25      	cmp	r2, #37	; 0x25
 8009d2c:	d1f9      	bne.n	8009d22 <_vfiprintf_r+0x96>
 8009d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d32:	d00b      	beq.n	8009d4c <_vfiprintf_r+0xc0>
 8009d34:	465b      	mov	r3, fp
 8009d36:	4622      	mov	r2, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ff93 	bl	8009c66 <__sfputs_r>
 8009d40:	3001      	adds	r0, #1
 8009d42:	f000 80aa 	beq.w	8009e9a <_vfiprintf_r+0x20e>
 8009d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d48:	445a      	add	r2, fp
 8009d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 80a2 	beq.w	8009e9a <_vfiprintf_r+0x20e>
 8009d56:	2300      	movs	r3, #0
 8009d58:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d60:	f10a 0a01 	add.w	sl, sl, #1
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	9307      	str	r3, [sp, #28]
 8009d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2205      	movs	r2, #5
 8009d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d76:	4858      	ldr	r0, [pc, #352]	; (8009ed8 <_vfiprintf_r+0x24c>)
 8009d78:	f000 fcba 	bl	800a6f0 <memchr>
 8009d7c:	9a04      	ldr	r2, [sp, #16]
 8009d7e:	b9d8      	cbnz	r0, 8009db8 <_vfiprintf_r+0x12c>
 8009d80:	06d1      	lsls	r1, r2, #27
 8009d82:	bf44      	itt	mi
 8009d84:	2320      	movmi	r3, #32
 8009d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8a:	0713      	lsls	r3, r2, #28
 8009d8c:	bf44      	itt	mi
 8009d8e:	232b      	movmi	r3, #43	; 0x2b
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d94:	f89a 3000 	ldrb.w	r3, [sl]
 8009d98:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9a:	d015      	beq.n	8009dc8 <_vfiprintf_r+0x13c>
 8009d9c:	4654      	mov	r4, sl
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f04f 0c0a 	mov.w	ip, #10
 8009da4:	9a07      	ldr	r2, [sp, #28]
 8009da6:	4621      	mov	r1, r4
 8009da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dac:	3b30      	subs	r3, #48	; 0x30
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d94e      	bls.n	8009e50 <_vfiprintf_r+0x1c4>
 8009db2:	b1b0      	cbz	r0, 8009de2 <_vfiprintf_r+0x156>
 8009db4:	9207      	str	r2, [sp, #28]
 8009db6:	e014      	b.n	8009de2 <_vfiprintf_r+0x156>
 8009db8:	eba0 0308 	sub.w	r3, r0, r8
 8009dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	46a2      	mov	sl, r4
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	e7d2      	b.n	8009d6e <_vfiprintf_r+0xe2>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	1d19      	adds	r1, r3, #4
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	9103      	str	r1, [sp, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	bfbb      	ittet	lt
 8009dd4:	425b      	neglt	r3, r3
 8009dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8009dda:	9307      	strge	r3, [sp, #28]
 8009ddc:	9307      	strlt	r3, [sp, #28]
 8009dde:	bfb8      	it	lt
 8009de0:	9204      	strlt	r2, [sp, #16]
 8009de2:	7823      	ldrb	r3, [r4, #0]
 8009de4:	2b2e      	cmp	r3, #46	; 0x2e
 8009de6:	d10c      	bne.n	8009e02 <_vfiprintf_r+0x176>
 8009de8:	7863      	ldrb	r3, [r4, #1]
 8009dea:	2b2a      	cmp	r3, #42	; 0x2a
 8009dec:	d135      	bne.n	8009e5a <_vfiprintf_r+0x1ce>
 8009dee:	9b03      	ldr	r3, [sp, #12]
 8009df0:	3402      	adds	r4, #2
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfb8      	it	lt
 8009dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e00:	9305      	str	r3, [sp, #20]
 8009e02:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009edc <_vfiprintf_r+0x250>
 8009e06:	2203      	movs	r2, #3
 8009e08:	4650      	mov	r0, sl
 8009e0a:	7821      	ldrb	r1, [r4, #0]
 8009e0c:	f000 fc70 	bl	800a6f0 <memchr>
 8009e10:	b140      	cbz	r0, 8009e24 <_vfiprintf_r+0x198>
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	eba0 000a 	sub.w	r0, r0, sl
 8009e18:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	3401      	adds	r4, #1
 8009e20:	4303      	orrs	r3, r0
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e28:	2206      	movs	r2, #6
 8009e2a:	482d      	ldr	r0, [pc, #180]	; (8009ee0 <_vfiprintf_r+0x254>)
 8009e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e30:	f000 fc5e 	bl	800a6f0 <memchr>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d03f      	beq.n	8009eb8 <_vfiprintf_r+0x22c>
 8009e38:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <_vfiprintf_r+0x258>)
 8009e3a:	bb1b      	cbnz	r3, 8009e84 <_vfiprintf_r+0x1f8>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	3307      	adds	r3, #7
 8009e40:	f023 0307 	bic.w	r3, r3, #7
 8009e44:	3308      	adds	r3, #8
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4a:	443b      	add	r3, r7
 8009e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4e:	e767      	b.n	8009d20 <_vfiprintf_r+0x94>
 8009e50:	460c      	mov	r4, r1
 8009e52:	2001      	movs	r0, #1
 8009e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e58:	e7a5      	b.n	8009da6 <_vfiprintf_r+0x11a>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f04f 0c0a 	mov.w	ip, #10
 8009e60:	4619      	mov	r1, r3
 8009e62:	3401      	adds	r4, #1
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	4620      	mov	r0, r4
 8009e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6c:	3a30      	subs	r2, #48	; 0x30
 8009e6e:	2a09      	cmp	r2, #9
 8009e70:	d903      	bls.n	8009e7a <_vfiprintf_r+0x1ee>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0c5      	beq.n	8009e02 <_vfiprintf_r+0x176>
 8009e76:	9105      	str	r1, [sp, #20]
 8009e78:	e7c3      	b.n	8009e02 <_vfiprintf_r+0x176>
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e82:	e7f0      	b.n	8009e66 <_vfiprintf_r+0x1da>
 8009e84:	ab03      	add	r3, sp, #12
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	462a      	mov	r2, r5
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	4b16      	ldr	r3, [pc, #88]	; (8009ee8 <_vfiprintf_r+0x25c>)
 8009e8e:	a904      	add	r1, sp, #16
 8009e90:	f3af 8000 	nop.w
 8009e94:	4607      	mov	r7, r0
 8009e96:	1c78      	adds	r0, r7, #1
 8009e98:	d1d6      	bne.n	8009e48 <_vfiprintf_r+0x1bc>
 8009e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e9c:	07d9      	lsls	r1, r3, #31
 8009e9e:	d405      	bmi.n	8009eac <_vfiprintf_r+0x220>
 8009ea0:	89ab      	ldrh	r3, [r5, #12]
 8009ea2:	059a      	lsls	r2, r3, #22
 8009ea4:	d402      	bmi.n	8009eac <_vfiprintf_r+0x220>
 8009ea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ea8:	f7ff fe33 	bl	8009b12 <__retarget_lock_release_recursive>
 8009eac:	89ab      	ldrh	r3, [r5, #12]
 8009eae:	065b      	lsls	r3, r3, #25
 8009eb0:	f53f af12 	bmi.w	8009cd8 <_vfiprintf_r+0x4c>
 8009eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eb6:	e711      	b.n	8009cdc <_vfiprintf_r+0x50>
 8009eb8:	ab03      	add	r3, sp, #12
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	462a      	mov	r2, r5
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <_vfiprintf_r+0x25c>)
 8009ec2:	a904      	add	r1, sp, #16
 8009ec4:	f000 f882 	bl	8009fcc <_printf_i>
 8009ec8:	e7e4      	b.n	8009e94 <_vfiprintf_r+0x208>
 8009eca:	bf00      	nop
 8009ecc:	0800a8c0 	.word	0x0800a8c0
 8009ed0:	0800a8e0 	.word	0x0800a8e0
 8009ed4:	0800a8a0 	.word	0x0800a8a0
 8009ed8:	0800a900 	.word	0x0800a900
 8009edc:	0800a906 	.word	0x0800a906
 8009ee0:	0800a90a 	.word	0x0800a90a
 8009ee4:	00000000 	.word	0x00000000
 8009ee8:	08009c67 	.word	0x08009c67

08009eec <_printf_common>:
 8009eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	4616      	mov	r6, r2
 8009ef2:	4699      	mov	r9, r3
 8009ef4:	688a      	ldr	r2, [r1, #8]
 8009ef6:	690b      	ldr	r3, [r1, #16]
 8009ef8:	4607      	mov	r7, r0
 8009efa:	4293      	cmp	r3, r2
 8009efc:	bfb8      	it	lt
 8009efe:	4613      	movlt	r3, r2
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f06:	460c      	mov	r4, r1
 8009f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f0c:	b10a      	cbz	r2, 8009f12 <_printf_common+0x26>
 8009f0e:	3301      	adds	r3, #1
 8009f10:	6033      	str	r3, [r6, #0]
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	0699      	lsls	r1, r3, #26
 8009f16:	bf42      	ittt	mi
 8009f18:	6833      	ldrmi	r3, [r6, #0]
 8009f1a:	3302      	addmi	r3, #2
 8009f1c:	6033      	strmi	r3, [r6, #0]
 8009f1e:	6825      	ldr	r5, [r4, #0]
 8009f20:	f015 0506 	ands.w	r5, r5, #6
 8009f24:	d106      	bne.n	8009f34 <_printf_common+0x48>
 8009f26:	f104 0a19 	add.w	sl, r4, #25
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	6832      	ldr	r2, [r6, #0]
 8009f2e:	1a9b      	subs	r3, r3, r2
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	dc28      	bgt.n	8009f86 <_printf_common+0x9a>
 8009f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f38:	1e13      	subs	r3, r2, #0
 8009f3a:	6822      	ldr	r2, [r4, #0]
 8009f3c:	bf18      	it	ne
 8009f3e:	2301      	movne	r3, #1
 8009f40:	0692      	lsls	r2, r2, #26
 8009f42:	d42d      	bmi.n	8009fa0 <_printf_common+0xb4>
 8009f44:	4649      	mov	r1, r9
 8009f46:	4638      	mov	r0, r7
 8009f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f4c:	47c0      	blx	r8
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d020      	beq.n	8009f94 <_printf_common+0xa8>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	68e5      	ldr	r5, [r4, #12]
 8009f56:	f003 0306 	and.w	r3, r3, #6
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	bf18      	it	ne
 8009f5e:	2500      	movne	r5, #0
 8009f60:	6832      	ldr	r2, [r6, #0]
 8009f62:	f04f 0600 	mov.w	r6, #0
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	bf08      	it	eq
 8009f6a:	1aad      	subeq	r5, r5, r2
 8009f6c:	6922      	ldr	r2, [r4, #16]
 8009f6e:	bf08      	it	eq
 8009f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bfc4      	itt	gt
 8009f78:	1a9b      	subgt	r3, r3, r2
 8009f7a:	18ed      	addgt	r5, r5, r3
 8009f7c:	341a      	adds	r4, #26
 8009f7e:	42b5      	cmp	r5, r6
 8009f80:	d11a      	bne.n	8009fb8 <_printf_common+0xcc>
 8009f82:	2000      	movs	r0, #0
 8009f84:	e008      	b.n	8009f98 <_printf_common+0xac>
 8009f86:	2301      	movs	r3, #1
 8009f88:	4652      	mov	r2, sl
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	47c0      	blx	r8
 8009f90:	3001      	adds	r0, #1
 8009f92:	d103      	bne.n	8009f9c <_printf_common+0xb0>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9c:	3501      	adds	r5, #1
 8009f9e:	e7c4      	b.n	8009f2a <_printf_common+0x3e>
 8009fa0:	2030      	movs	r0, #48	; 0x30
 8009fa2:	18e1      	adds	r1, r4, r3
 8009fa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fae:	4422      	add	r2, r4
 8009fb0:	3302      	adds	r3, #2
 8009fb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fb6:	e7c5      	b.n	8009f44 <_printf_common+0x58>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	4622      	mov	r2, r4
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	47c0      	blx	r8
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d0e6      	beq.n	8009f94 <_printf_common+0xa8>
 8009fc6:	3601      	adds	r6, #1
 8009fc8:	e7d9      	b.n	8009f7e <_printf_common+0x92>
	...

08009fcc <_printf_i>:
 8009fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	7e0f      	ldrb	r7, [r1, #24]
 8009fd2:	4691      	mov	r9, r2
 8009fd4:	2f78      	cmp	r7, #120	; 0x78
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	460c      	mov	r4, r1
 8009fda:	469a      	mov	sl, r3
 8009fdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fe2:	d807      	bhi.n	8009ff4 <_printf_i+0x28>
 8009fe4:	2f62      	cmp	r7, #98	; 0x62
 8009fe6:	d80a      	bhi.n	8009ffe <_printf_i+0x32>
 8009fe8:	2f00      	cmp	r7, #0
 8009fea:	f000 80d9 	beq.w	800a1a0 <_printf_i+0x1d4>
 8009fee:	2f58      	cmp	r7, #88	; 0x58
 8009ff0:	f000 80a4 	beq.w	800a13c <_printf_i+0x170>
 8009ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ffc:	e03a      	b.n	800a074 <_printf_i+0xa8>
 8009ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a002:	2b15      	cmp	r3, #21
 800a004:	d8f6      	bhi.n	8009ff4 <_printf_i+0x28>
 800a006:	a101      	add	r1, pc, #4	; (adr r1, 800a00c <_printf_i+0x40>)
 800a008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a00c:	0800a065 	.word	0x0800a065
 800a010:	0800a079 	.word	0x0800a079
 800a014:	08009ff5 	.word	0x08009ff5
 800a018:	08009ff5 	.word	0x08009ff5
 800a01c:	08009ff5 	.word	0x08009ff5
 800a020:	08009ff5 	.word	0x08009ff5
 800a024:	0800a079 	.word	0x0800a079
 800a028:	08009ff5 	.word	0x08009ff5
 800a02c:	08009ff5 	.word	0x08009ff5
 800a030:	08009ff5 	.word	0x08009ff5
 800a034:	08009ff5 	.word	0x08009ff5
 800a038:	0800a187 	.word	0x0800a187
 800a03c:	0800a0a9 	.word	0x0800a0a9
 800a040:	0800a169 	.word	0x0800a169
 800a044:	08009ff5 	.word	0x08009ff5
 800a048:	08009ff5 	.word	0x08009ff5
 800a04c:	0800a1a9 	.word	0x0800a1a9
 800a050:	08009ff5 	.word	0x08009ff5
 800a054:	0800a0a9 	.word	0x0800a0a9
 800a058:	08009ff5 	.word	0x08009ff5
 800a05c:	08009ff5 	.word	0x08009ff5
 800a060:	0800a171 	.word	0x0800a171
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	1d1a      	adds	r2, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	602a      	str	r2, [r5, #0]
 800a06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a074:	2301      	movs	r3, #1
 800a076:	e0a4      	b.n	800a1c2 <_printf_i+0x1f6>
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	6829      	ldr	r1, [r5, #0]
 800a07c:	0606      	lsls	r6, r0, #24
 800a07e:	f101 0304 	add.w	r3, r1, #4
 800a082:	d50a      	bpl.n	800a09a <_printf_i+0xce>
 800a084:	680e      	ldr	r6, [r1, #0]
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	2e00      	cmp	r6, #0
 800a08a:	da03      	bge.n	800a094 <_printf_i+0xc8>
 800a08c:	232d      	movs	r3, #45	; 0x2d
 800a08e:	4276      	negs	r6, r6
 800a090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a094:	230a      	movs	r3, #10
 800a096:	485e      	ldr	r0, [pc, #376]	; (800a210 <_printf_i+0x244>)
 800a098:	e019      	b.n	800a0ce <_printf_i+0x102>
 800a09a:	680e      	ldr	r6, [r1, #0]
 800a09c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	bf18      	it	ne
 800a0a4:	b236      	sxthne	r6, r6
 800a0a6:	e7ef      	b.n	800a088 <_printf_i+0xbc>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	6820      	ldr	r0, [r4, #0]
 800a0ac:	1d19      	adds	r1, r3, #4
 800a0ae:	6029      	str	r1, [r5, #0]
 800a0b0:	0601      	lsls	r1, r0, #24
 800a0b2:	d501      	bpl.n	800a0b8 <_printf_i+0xec>
 800a0b4:	681e      	ldr	r6, [r3, #0]
 800a0b6:	e002      	b.n	800a0be <_printf_i+0xf2>
 800a0b8:	0646      	lsls	r6, r0, #25
 800a0ba:	d5fb      	bpl.n	800a0b4 <_printf_i+0xe8>
 800a0bc:	881e      	ldrh	r6, [r3, #0]
 800a0be:	2f6f      	cmp	r7, #111	; 0x6f
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2308      	moveq	r3, #8
 800a0c4:	230a      	movne	r3, #10
 800a0c6:	4852      	ldr	r0, [pc, #328]	; (800a210 <_printf_i+0x244>)
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0ce:	6865      	ldr	r5, [r4, #4]
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	bfa8      	it	ge
 800a0d4:	6821      	ldrge	r1, [r4, #0]
 800a0d6:	60a5      	str	r5, [r4, #8]
 800a0d8:	bfa4      	itt	ge
 800a0da:	f021 0104 	bicge.w	r1, r1, #4
 800a0de:	6021      	strge	r1, [r4, #0]
 800a0e0:	b90e      	cbnz	r6, 800a0e6 <_printf_i+0x11a>
 800a0e2:	2d00      	cmp	r5, #0
 800a0e4:	d04d      	beq.n	800a182 <_printf_i+0x1b6>
 800a0e6:	4615      	mov	r5, r2
 800a0e8:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0ec:	fb03 6711 	mls	r7, r3, r1, r6
 800a0f0:	5dc7      	ldrb	r7, [r0, r7]
 800a0f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0f6:	4637      	mov	r7, r6
 800a0f8:	42bb      	cmp	r3, r7
 800a0fa:	460e      	mov	r6, r1
 800a0fc:	d9f4      	bls.n	800a0e8 <_printf_i+0x11c>
 800a0fe:	2b08      	cmp	r3, #8
 800a100:	d10b      	bne.n	800a11a <_printf_i+0x14e>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	07de      	lsls	r6, r3, #31
 800a106:	d508      	bpl.n	800a11a <_printf_i+0x14e>
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	6861      	ldr	r1, [r4, #4]
 800a10c:	4299      	cmp	r1, r3
 800a10e:	bfde      	ittt	le
 800a110:	2330      	movle	r3, #48	; 0x30
 800a112:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a11a:	1b52      	subs	r2, r2, r5
 800a11c:	6122      	str	r2, [r4, #16]
 800a11e:	464b      	mov	r3, r9
 800a120:	4621      	mov	r1, r4
 800a122:	4640      	mov	r0, r8
 800a124:	f8cd a000 	str.w	sl, [sp]
 800a128:	aa03      	add	r2, sp, #12
 800a12a:	f7ff fedf 	bl	8009eec <_printf_common>
 800a12e:	3001      	adds	r0, #1
 800a130:	d14c      	bne.n	800a1cc <_printf_i+0x200>
 800a132:	f04f 30ff 	mov.w	r0, #4294967295
 800a136:	b004      	add	sp, #16
 800a138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a13c:	4834      	ldr	r0, [pc, #208]	; (800a210 <_printf_i+0x244>)
 800a13e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a142:	6829      	ldr	r1, [r5, #0]
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	f851 6b04 	ldr.w	r6, [r1], #4
 800a14a:	6029      	str	r1, [r5, #0]
 800a14c:	061d      	lsls	r5, r3, #24
 800a14e:	d514      	bpl.n	800a17a <_printf_i+0x1ae>
 800a150:	07df      	lsls	r7, r3, #31
 800a152:	bf44      	itt	mi
 800a154:	f043 0320 	orrmi.w	r3, r3, #32
 800a158:	6023      	strmi	r3, [r4, #0]
 800a15a:	b91e      	cbnz	r6, 800a164 <_printf_i+0x198>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	f023 0320 	bic.w	r3, r3, #32
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	2310      	movs	r3, #16
 800a166:	e7af      	b.n	800a0c8 <_printf_i+0xfc>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	f043 0320 	orr.w	r3, r3, #32
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	2378      	movs	r3, #120	; 0x78
 800a172:	4828      	ldr	r0, [pc, #160]	; (800a214 <_printf_i+0x248>)
 800a174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a178:	e7e3      	b.n	800a142 <_printf_i+0x176>
 800a17a:	0659      	lsls	r1, r3, #25
 800a17c:	bf48      	it	mi
 800a17e:	b2b6      	uxthmi	r6, r6
 800a180:	e7e6      	b.n	800a150 <_printf_i+0x184>
 800a182:	4615      	mov	r5, r2
 800a184:	e7bb      	b.n	800a0fe <_printf_i+0x132>
 800a186:	682b      	ldr	r3, [r5, #0]
 800a188:	6826      	ldr	r6, [r4, #0]
 800a18a:	1d18      	adds	r0, r3, #4
 800a18c:	6961      	ldr	r1, [r4, #20]
 800a18e:	6028      	str	r0, [r5, #0]
 800a190:	0635      	lsls	r5, r6, #24
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	d501      	bpl.n	800a19a <_printf_i+0x1ce>
 800a196:	6019      	str	r1, [r3, #0]
 800a198:	e002      	b.n	800a1a0 <_printf_i+0x1d4>
 800a19a:	0670      	lsls	r0, r6, #25
 800a19c:	d5fb      	bpl.n	800a196 <_printf_i+0x1ca>
 800a19e:	8019      	strh	r1, [r3, #0]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4615      	mov	r5, r2
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	e7ba      	b.n	800a11e <_printf_i+0x152>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	1d1a      	adds	r2, r3, #4
 800a1ae:	602a      	str	r2, [r5, #0]
 800a1b0:	681d      	ldr	r5, [r3, #0]
 800a1b2:	6862      	ldr	r2, [r4, #4]
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 fa9b 	bl	800a6f0 <memchr>
 800a1ba:	b108      	cbz	r0, 800a1c0 <_printf_i+0x1f4>
 800a1bc:	1b40      	subs	r0, r0, r5
 800a1be:	6060      	str	r0, [r4, #4]
 800a1c0:	6863      	ldr	r3, [r4, #4]
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ca:	e7a8      	b.n	800a11e <_printf_i+0x152>
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	47d0      	blx	sl
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d0ab      	beq.n	800a132 <_printf_i+0x166>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	079b      	lsls	r3, r3, #30
 800a1de:	d413      	bmi.n	800a208 <_printf_i+0x23c>
 800a1e0:	68e0      	ldr	r0, [r4, #12]
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	4298      	cmp	r0, r3
 800a1e6:	bfb8      	it	lt
 800a1e8:	4618      	movlt	r0, r3
 800a1ea:	e7a4      	b.n	800a136 <_printf_i+0x16a>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	47d0      	blx	sl
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d09b      	beq.n	800a132 <_printf_i+0x166>
 800a1fa:	3501      	adds	r5, #1
 800a1fc:	68e3      	ldr	r3, [r4, #12]
 800a1fe:	9903      	ldr	r1, [sp, #12]
 800a200:	1a5b      	subs	r3, r3, r1
 800a202:	42ab      	cmp	r3, r5
 800a204:	dcf2      	bgt.n	800a1ec <_printf_i+0x220>
 800a206:	e7eb      	b.n	800a1e0 <_printf_i+0x214>
 800a208:	2500      	movs	r5, #0
 800a20a:	f104 0619 	add.w	r6, r4, #25
 800a20e:	e7f5      	b.n	800a1fc <_printf_i+0x230>
 800a210:	0800a911 	.word	0x0800a911
 800a214:	0800a922 	.word	0x0800a922

0800a218 <_sbrk_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	2300      	movs	r3, #0
 800a21c:	4d05      	ldr	r5, [pc, #20]	; (800a234 <_sbrk_r+0x1c>)
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	f7f6 fcf0 	bl	8000c08 <_sbrk>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_sbrk_r+0x1a>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_sbrk_r+0x1a>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20000670 	.word	0x20000670

0800a238 <__sread>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	460c      	mov	r4, r1
 800a23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a240:	f000 fab8 	bl	800a7b4 <_read_r>
 800a244:	2800      	cmp	r0, #0
 800a246:	bfab      	itete	ge
 800a248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a24a:	89a3      	ldrhlt	r3, [r4, #12]
 800a24c:	181b      	addge	r3, r3, r0
 800a24e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a252:	bfac      	ite	ge
 800a254:	6563      	strge	r3, [r4, #84]	; 0x54
 800a256:	81a3      	strhlt	r3, [r4, #12]
 800a258:	bd10      	pop	{r4, pc}

0800a25a <__swrite>:
 800a25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25e:	461f      	mov	r7, r3
 800a260:	898b      	ldrh	r3, [r1, #12]
 800a262:	4605      	mov	r5, r0
 800a264:	05db      	lsls	r3, r3, #23
 800a266:	460c      	mov	r4, r1
 800a268:	4616      	mov	r6, r2
 800a26a:	d505      	bpl.n	800a278 <__swrite+0x1e>
 800a26c:	2302      	movs	r3, #2
 800a26e:	2200      	movs	r2, #0
 800a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a274:	f000 f9c4 	bl	800a600 <_lseek_r>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	4632      	mov	r2, r6
 800a27c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	4628      	mov	r0, r5
 800a284:	463b      	mov	r3, r7
 800a286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a28e:	f000 b869 	b.w	800a364 <_write_r>

0800a292 <__sseek>:
 800a292:	b510      	push	{r4, lr}
 800a294:	460c      	mov	r4, r1
 800a296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29a:	f000 f9b1 	bl	800a600 <_lseek_r>
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	bf15      	itete	ne
 800a2a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2ae:	81a3      	strheq	r3, [r4, #12]
 800a2b0:	bf18      	it	ne
 800a2b2:	81a3      	strhne	r3, [r4, #12]
 800a2b4:	bd10      	pop	{r4, pc}

0800a2b6 <__sclose>:
 800a2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ba:	f000 b8d3 	b.w	800a464 <_close_r>
	...

0800a2c0 <__swbuf_r>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	460e      	mov	r6, r1
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	b118      	cbz	r0, 800a2d2 <__swbuf_r+0x12>
 800a2ca:	6983      	ldr	r3, [r0, #24]
 800a2cc:	b90b      	cbnz	r3, 800a2d2 <__swbuf_r+0x12>
 800a2ce:	f7ff fb81 	bl	80099d4 <__sinit>
 800a2d2:	4b21      	ldr	r3, [pc, #132]	; (800a358 <__swbuf_r+0x98>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	d12b      	bne.n	800a330 <__swbuf_r+0x70>
 800a2d8:	686c      	ldr	r4, [r5, #4]
 800a2da:	69a3      	ldr	r3, [r4, #24]
 800a2dc:	60a3      	str	r3, [r4, #8]
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	071a      	lsls	r2, r3, #28
 800a2e2:	d52f      	bpl.n	800a344 <__swbuf_r+0x84>
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	b36b      	cbz	r3, 800a344 <__swbuf_r+0x84>
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	6820      	ldr	r0, [r4, #0]
 800a2ec:	b2f6      	uxtb	r6, r6
 800a2ee:	1ac0      	subs	r0, r0, r3
 800a2f0:	6963      	ldr	r3, [r4, #20]
 800a2f2:	4637      	mov	r7, r6
 800a2f4:	4283      	cmp	r3, r0
 800a2f6:	dc04      	bgt.n	800a302 <__swbuf_r+0x42>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f944 	bl	800a588 <_fflush_r>
 800a300:	bb30      	cbnz	r0, 800a350 <__swbuf_r+0x90>
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	3001      	adds	r0, #1
 800a306:	3b01      	subs	r3, #1
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	701e      	strb	r6, [r3, #0]
 800a312:	6963      	ldr	r3, [r4, #20]
 800a314:	4283      	cmp	r3, r0
 800a316:	d004      	beq.n	800a322 <__swbuf_r+0x62>
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	07db      	lsls	r3, r3, #31
 800a31c:	d506      	bpl.n	800a32c <__swbuf_r+0x6c>
 800a31e:	2e0a      	cmp	r6, #10
 800a320:	d104      	bne.n	800a32c <__swbuf_r+0x6c>
 800a322:	4621      	mov	r1, r4
 800a324:	4628      	mov	r0, r5
 800a326:	f000 f92f 	bl	800a588 <_fflush_r>
 800a32a:	b988      	cbnz	r0, 800a350 <__swbuf_r+0x90>
 800a32c:	4638      	mov	r0, r7
 800a32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a330:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <__swbuf_r+0x9c>)
 800a332:	429c      	cmp	r4, r3
 800a334:	d101      	bne.n	800a33a <__swbuf_r+0x7a>
 800a336:	68ac      	ldr	r4, [r5, #8]
 800a338:	e7cf      	b.n	800a2da <__swbuf_r+0x1a>
 800a33a:	4b09      	ldr	r3, [pc, #36]	; (800a360 <__swbuf_r+0xa0>)
 800a33c:	429c      	cmp	r4, r3
 800a33e:	bf08      	it	eq
 800a340:	68ec      	ldreq	r4, [r5, #12]
 800a342:	e7ca      	b.n	800a2da <__swbuf_r+0x1a>
 800a344:	4621      	mov	r1, r4
 800a346:	4628      	mov	r0, r5
 800a348:	f000 f81e 	bl	800a388 <__swsetup_r>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d0cb      	beq.n	800a2e8 <__swbuf_r+0x28>
 800a350:	f04f 37ff 	mov.w	r7, #4294967295
 800a354:	e7ea      	b.n	800a32c <__swbuf_r+0x6c>
 800a356:	bf00      	nop
 800a358:	0800a8c0 	.word	0x0800a8c0
 800a35c:	0800a8e0 	.word	0x0800a8e0
 800a360:	0800a8a0 	.word	0x0800a8a0

0800a364 <_write_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	4608      	mov	r0, r1
 800a36a:	4611      	mov	r1, r2
 800a36c:	2200      	movs	r2, #0
 800a36e:	4d05      	ldr	r5, [pc, #20]	; (800a384 <_write_r+0x20>)
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f6 fbfb 	bl	8000b6e <_write>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_write_r+0x1e>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_write_r+0x1e>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20000670 	.word	0x20000670

0800a388 <__swsetup_r>:
 800a388:	4b32      	ldr	r3, [pc, #200]	; (800a454 <__swsetup_r+0xcc>)
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	681d      	ldr	r5, [r3, #0]
 800a38e:	4606      	mov	r6, r0
 800a390:	460c      	mov	r4, r1
 800a392:	b125      	cbz	r5, 800a39e <__swsetup_r+0x16>
 800a394:	69ab      	ldr	r3, [r5, #24]
 800a396:	b913      	cbnz	r3, 800a39e <__swsetup_r+0x16>
 800a398:	4628      	mov	r0, r5
 800a39a:	f7ff fb1b 	bl	80099d4 <__sinit>
 800a39e:	4b2e      	ldr	r3, [pc, #184]	; (800a458 <__swsetup_r+0xd0>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	d10f      	bne.n	800a3c4 <__swsetup_r+0x3c>
 800a3a4:	686c      	ldr	r4, [r5, #4]
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3ac:	0719      	lsls	r1, r3, #28
 800a3ae:	d42c      	bmi.n	800a40a <__swsetup_r+0x82>
 800a3b0:	06dd      	lsls	r5, r3, #27
 800a3b2:	d411      	bmi.n	800a3d8 <__swsetup_r+0x50>
 800a3b4:	2309      	movs	r3, #9
 800a3b6:	6033      	str	r3, [r6, #0]
 800a3b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	e03e      	b.n	800a442 <__swsetup_r+0xba>
 800a3c4:	4b25      	ldr	r3, [pc, #148]	; (800a45c <__swsetup_r+0xd4>)
 800a3c6:	429c      	cmp	r4, r3
 800a3c8:	d101      	bne.n	800a3ce <__swsetup_r+0x46>
 800a3ca:	68ac      	ldr	r4, [r5, #8]
 800a3cc:	e7eb      	b.n	800a3a6 <__swsetup_r+0x1e>
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <__swsetup_r+0xd8>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	bf08      	it	eq
 800a3d4:	68ec      	ldreq	r4, [r5, #12]
 800a3d6:	e7e6      	b.n	800a3a6 <__swsetup_r+0x1e>
 800a3d8:	0758      	lsls	r0, r3, #29
 800a3da:	d512      	bpl.n	800a402 <__swsetup_r+0x7a>
 800a3dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3de:	b141      	cbz	r1, 800a3f2 <__swsetup_r+0x6a>
 800a3e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3e4:	4299      	cmp	r1, r3
 800a3e6:	d002      	beq.n	800a3ee <__swsetup_r+0x66>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f000 f99b 	bl	800a724 <_free_r>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6363      	str	r3, [r4, #52]	; 0x34
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3f8:	81a3      	strh	r3, [r4, #12]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	6063      	str	r3, [r4, #4]
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f043 0308 	orr.w	r3, r3, #8
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	b94b      	cbnz	r3, 800a422 <__swsetup_r+0x9a>
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a418:	d003      	beq.n	800a422 <__swsetup_r+0x9a>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4630      	mov	r0, r6
 800a41e:	f000 f927 	bl	800a670 <__smakebuf_r>
 800a422:	89a0      	ldrh	r0, [r4, #12]
 800a424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a428:	f010 0301 	ands.w	r3, r0, #1
 800a42c:	d00a      	beq.n	800a444 <__swsetup_r+0xbc>
 800a42e:	2300      	movs	r3, #0
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	6963      	ldr	r3, [r4, #20]
 800a434:	425b      	negs	r3, r3
 800a436:	61a3      	str	r3, [r4, #24]
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	b943      	cbnz	r3, 800a44e <__swsetup_r+0xc6>
 800a43c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a440:	d1ba      	bne.n	800a3b8 <__swsetup_r+0x30>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	0781      	lsls	r1, r0, #30
 800a446:	bf58      	it	pl
 800a448:	6963      	ldrpl	r3, [r4, #20]
 800a44a:	60a3      	str	r3, [r4, #8]
 800a44c:	e7f4      	b.n	800a438 <__swsetup_r+0xb0>
 800a44e:	2000      	movs	r0, #0
 800a450:	e7f7      	b.n	800a442 <__swsetup_r+0xba>
 800a452:	bf00      	nop
 800a454:	200002cc 	.word	0x200002cc
 800a458:	0800a8c0 	.word	0x0800a8c0
 800a45c:	0800a8e0 	.word	0x0800a8e0
 800a460:	0800a8a0 	.word	0x0800a8a0

0800a464 <_close_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	2300      	movs	r3, #0
 800a468:	4d05      	ldr	r5, [pc, #20]	; (800a480 <_close_r+0x1c>)
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7f6 fb99 	bl	8000ba6 <_close>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_close_r+0x1a>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_close_r+0x1a>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	20000670 	.word	0x20000670

0800a484 <__sflush_r>:
 800a484:	898a      	ldrh	r2, [r1, #12]
 800a486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a488:	4605      	mov	r5, r0
 800a48a:	0710      	lsls	r0, r2, #28
 800a48c:	460c      	mov	r4, r1
 800a48e:	d457      	bmi.n	800a540 <__sflush_r+0xbc>
 800a490:	684b      	ldr	r3, [r1, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	dc04      	bgt.n	800a4a0 <__sflush_r+0x1c>
 800a496:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dc01      	bgt.n	800a4a0 <__sflush_r+0x1c>
 800a49c:	2000      	movs	r0, #0
 800a49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	d0fa      	beq.n	800a49c <__sflush_r+0x18>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4ac:	682f      	ldr	r7, [r5, #0]
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	d032      	beq.n	800a518 <__sflush_r+0x94>
 800a4b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	075a      	lsls	r2, r3, #29
 800a4b8:	d505      	bpl.n	800a4c6 <__sflush_r+0x42>
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	1ac0      	subs	r0, r0, r3
 800a4be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4c0:	b10b      	cbz	r3, 800a4c6 <__sflush_r+0x42>
 800a4c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4c4:	1ac0      	subs	r0, r0, r3
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	6a21      	ldr	r1, [r4, #32]
 800a4d0:	47b0      	blx	r6
 800a4d2:	1c43      	adds	r3, r0, #1
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	d106      	bne.n	800a4e6 <__sflush_r+0x62>
 800a4d8:	6829      	ldr	r1, [r5, #0]
 800a4da:	291d      	cmp	r1, #29
 800a4dc:	d82c      	bhi.n	800a538 <__sflush_r+0xb4>
 800a4de:	4a29      	ldr	r2, [pc, #164]	; (800a584 <__sflush_r+0x100>)
 800a4e0:	40ca      	lsrs	r2, r1
 800a4e2:	07d6      	lsls	r6, r2, #31
 800a4e4:	d528      	bpl.n	800a538 <__sflush_r+0xb4>
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	6062      	str	r2, [r4, #4]
 800a4ea:	6922      	ldr	r2, [r4, #16]
 800a4ec:	04d9      	lsls	r1, r3, #19
 800a4ee:	6022      	str	r2, [r4, #0]
 800a4f0:	d504      	bpl.n	800a4fc <__sflush_r+0x78>
 800a4f2:	1c42      	adds	r2, r0, #1
 800a4f4:	d101      	bne.n	800a4fa <__sflush_r+0x76>
 800a4f6:	682b      	ldr	r3, [r5, #0]
 800a4f8:	b903      	cbnz	r3, 800a4fc <__sflush_r+0x78>
 800a4fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4fe:	602f      	str	r7, [r5, #0]
 800a500:	2900      	cmp	r1, #0
 800a502:	d0cb      	beq.n	800a49c <__sflush_r+0x18>
 800a504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a508:	4299      	cmp	r1, r3
 800a50a:	d002      	beq.n	800a512 <__sflush_r+0x8e>
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 f909 	bl	800a724 <_free_r>
 800a512:	2000      	movs	r0, #0
 800a514:	6360      	str	r0, [r4, #52]	; 0x34
 800a516:	e7c2      	b.n	800a49e <__sflush_r+0x1a>
 800a518:	6a21      	ldr	r1, [r4, #32]
 800a51a:	2301      	movs	r3, #1
 800a51c:	4628      	mov	r0, r5
 800a51e:	47b0      	blx	r6
 800a520:	1c41      	adds	r1, r0, #1
 800a522:	d1c7      	bne.n	800a4b4 <__sflush_r+0x30>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0c4      	beq.n	800a4b4 <__sflush_r+0x30>
 800a52a:	2b1d      	cmp	r3, #29
 800a52c:	d001      	beq.n	800a532 <__sflush_r+0xae>
 800a52e:	2b16      	cmp	r3, #22
 800a530:	d101      	bne.n	800a536 <__sflush_r+0xb2>
 800a532:	602f      	str	r7, [r5, #0]
 800a534:	e7b2      	b.n	800a49c <__sflush_r+0x18>
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	e7ae      	b.n	800a49e <__sflush_r+0x1a>
 800a540:	690f      	ldr	r7, [r1, #16]
 800a542:	2f00      	cmp	r7, #0
 800a544:	d0aa      	beq.n	800a49c <__sflush_r+0x18>
 800a546:	0793      	lsls	r3, r2, #30
 800a548:	bf18      	it	ne
 800a54a:	2300      	movne	r3, #0
 800a54c:	680e      	ldr	r6, [r1, #0]
 800a54e:	bf08      	it	eq
 800a550:	694b      	ldreq	r3, [r1, #20]
 800a552:	1bf6      	subs	r6, r6, r7
 800a554:	600f      	str	r7, [r1, #0]
 800a556:	608b      	str	r3, [r1, #8]
 800a558:	2e00      	cmp	r6, #0
 800a55a:	dd9f      	ble.n	800a49c <__sflush_r+0x18>
 800a55c:	4633      	mov	r3, r6
 800a55e:	463a      	mov	r2, r7
 800a560:	4628      	mov	r0, r5
 800a562:	6a21      	ldr	r1, [r4, #32]
 800a564:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a568:	47e0      	blx	ip
 800a56a:	2800      	cmp	r0, #0
 800a56c:	dc06      	bgt.n	800a57c <__sflush_r+0xf8>
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	e790      	b.n	800a49e <__sflush_r+0x1a>
 800a57c:	4407      	add	r7, r0
 800a57e:	1a36      	subs	r6, r6, r0
 800a580:	e7ea      	b.n	800a558 <__sflush_r+0xd4>
 800a582:	bf00      	nop
 800a584:	20400001 	.word	0x20400001

0800a588 <_fflush_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	690b      	ldr	r3, [r1, #16]
 800a58c:	4605      	mov	r5, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	b913      	cbnz	r3, 800a598 <_fflush_r+0x10>
 800a592:	2500      	movs	r5, #0
 800a594:	4628      	mov	r0, r5
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	b118      	cbz	r0, 800a5a2 <_fflush_r+0x1a>
 800a59a:	6983      	ldr	r3, [r0, #24]
 800a59c:	b90b      	cbnz	r3, 800a5a2 <_fflush_r+0x1a>
 800a59e:	f7ff fa19 	bl	80099d4 <__sinit>
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <_fflush_r+0x6c>)
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	d11b      	bne.n	800a5e0 <_fflush_r+0x58>
 800a5a8:	686c      	ldr	r4, [r5, #4]
 800a5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0ef      	beq.n	800a592 <_fflush_r+0xa>
 800a5b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5b4:	07d0      	lsls	r0, r2, #31
 800a5b6:	d404      	bmi.n	800a5c2 <_fflush_r+0x3a>
 800a5b8:	0599      	lsls	r1, r3, #22
 800a5ba:	d402      	bmi.n	800a5c2 <_fflush_r+0x3a>
 800a5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5be:	f7ff faa7 	bl	8009b10 <__retarget_lock_acquire_recursive>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f7ff ff5d 	bl	800a484 <__sflush_r>
 800a5ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	07da      	lsls	r2, r3, #31
 800a5d0:	d4e0      	bmi.n	800a594 <_fflush_r+0xc>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	059b      	lsls	r3, r3, #22
 800a5d6:	d4dd      	bmi.n	800a594 <_fflush_r+0xc>
 800a5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5da:	f7ff fa9a 	bl	8009b12 <__retarget_lock_release_recursive>
 800a5de:	e7d9      	b.n	800a594 <_fflush_r+0xc>
 800a5e0:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <_fflush_r+0x70>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d101      	bne.n	800a5ea <_fflush_r+0x62>
 800a5e6:	68ac      	ldr	r4, [r5, #8]
 800a5e8:	e7df      	b.n	800a5aa <_fflush_r+0x22>
 800a5ea:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <_fflush_r+0x74>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	bf08      	it	eq
 800a5f0:	68ec      	ldreq	r4, [r5, #12]
 800a5f2:	e7da      	b.n	800a5aa <_fflush_r+0x22>
 800a5f4:	0800a8c0 	.word	0x0800a8c0
 800a5f8:	0800a8e0 	.word	0x0800a8e0
 800a5fc:	0800a8a0 	.word	0x0800a8a0

0800a600 <_lseek_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	4608      	mov	r0, r1
 800a606:	4611      	mov	r1, r2
 800a608:	2200      	movs	r2, #0
 800a60a:	4d05      	ldr	r5, [pc, #20]	; (800a620 <_lseek_r+0x20>)
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7f6 faed 	bl	8000bee <_lseek>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_lseek_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_lseek_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20000670 	.word	0x20000670

0800a624 <__swhatbuf_r>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	460e      	mov	r6, r1
 800a628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62c:	4614      	mov	r4, r2
 800a62e:	2900      	cmp	r1, #0
 800a630:	461d      	mov	r5, r3
 800a632:	b096      	sub	sp, #88	; 0x58
 800a634:	da08      	bge.n	800a648 <__swhatbuf_r+0x24>
 800a636:	2200      	movs	r2, #0
 800a638:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	061a      	lsls	r2, r3, #24
 800a640:	d410      	bmi.n	800a664 <__swhatbuf_r+0x40>
 800a642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a646:	e00e      	b.n	800a666 <__swhatbuf_r+0x42>
 800a648:	466a      	mov	r2, sp
 800a64a:	f000 f8c5 	bl	800a7d8 <_fstat_r>
 800a64e:	2800      	cmp	r0, #0
 800a650:	dbf1      	blt.n	800a636 <__swhatbuf_r+0x12>
 800a652:	9a01      	ldr	r2, [sp, #4]
 800a654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a65c:	425a      	negs	r2, r3
 800a65e:	415a      	adcs	r2, r3
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	e7ee      	b.n	800a642 <__swhatbuf_r+0x1e>
 800a664:	2340      	movs	r3, #64	; 0x40
 800a666:	2000      	movs	r0, #0
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	b016      	add	sp, #88	; 0x58
 800a66c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a670 <__smakebuf_r>:
 800a670:	898b      	ldrh	r3, [r1, #12]
 800a672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a674:	079d      	lsls	r5, r3, #30
 800a676:	4606      	mov	r6, r0
 800a678:	460c      	mov	r4, r1
 800a67a:	d507      	bpl.n	800a68c <__smakebuf_r+0x1c>
 800a67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	2301      	movs	r3, #1
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	b002      	add	sp, #8
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	466a      	mov	r2, sp
 800a68e:	ab01      	add	r3, sp, #4
 800a690:	f7ff ffc8 	bl	800a624 <__swhatbuf_r>
 800a694:	9900      	ldr	r1, [sp, #0]
 800a696:	4605      	mov	r5, r0
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff fa5b 	bl	8009b54 <_malloc_r>
 800a69e:	b948      	cbnz	r0, 800a6b4 <__smakebuf_r+0x44>
 800a6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a4:	059a      	lsls	r2, r3, #22
 800a6a6:	d4ef      	bmi.n	800a688 <__smakebuf_r+0x18>
 800a6a8:	f023 0303 	bic.w	r3, r3, #3
 800a6ac:	f043 0302 	orr.w	r3, r3, #2
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	e7e3      	b.n	800a67c <__smakebuf_r+0xc>
 800a6b4:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <__smakebuf_r+0x7c>)
 800a6b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	6120      	str	r0, [r4, #16]
 800a6c6:	6163      	str	r3, [r4, #20]
 800a6c8:	9b01      	ldr	r3, [sp, #4]
 800a6ca:	b15b      	cbz	r3, 800a6e4 <__smakebuf_r+0x74>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d2:	f000 f893 	bl	800a7fc <_isatty_r>
 800a6d6:	b128      	cbz	r0, 800a6e4 <__smakebuf_r+0x74>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	89a0      	ldrh	r0, [r4, #12]
 800a6e6:	4305      	orrs	r5, r0
 800a6e8:	81a5      	strh	r5, [r4, #12]
 800a6ea:	e7cd      	b.n	800a688 <__smakebuf_r+0x18>
 800a6ec:	0800996d 	.word	0x0800996d

0800a6f0 <memchr>:
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	b510      	push	{r4, lr}
 800a6f4:	b2c9      	uxtb	r1, r1
 800a6f6:	4402      	add	r2, r0
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	d101      	bne.n	800a702 <memchr+0x12>
 800a6fe:	2000      	movs	r0, #0
 800a700:	e003      	b.n	800a70a <memchr+0x1a>
 800a702:	7804      	ldrb	r4, [r0, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	428c      	cmp	r4, r1
 800a708:	d1f6      	bne.n	800a6f8 <memchr+0x8>
 800a70a:	bd10      	pop	{r4, pc}

0800a70c <__malloc_lock>:
 800a70c:	4801      	ldr	r0, [pc, #4]	; (800a714 <__malloc_lock+0x8>)
 800a70e:	f7ff b9ff 	b.w	8009b10 <__retarget_lock_acquire_recursive>
 800a712:	bf00      	nop
 800a714:	20000664 	.word	0x20000664

0800a718 <__malloc_unlock>:
 800a718:	4801      	ldr	r0, [pc, #4]	; (800a720 <__malloc_unlock+0x8>)
 800a71a:	f7ff b9fa 	b.w	8009b12 <__retarget_lock_release_recursive>
 800a71e:	bf00      	nop
 800a720:	20000664 	.word	0x20000664

0800a724 <_free_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4605      	mov	r5, r0
 800a728:	2900      	cmp	r1, #0
 800a72a:	d040      	beq.n	800a7ae <_free_r+0x8a>
 800a72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a730:	1f0c      	subs	r4, r1, #4
 800a732:	2b00      	cmp	r3, #0
 800a734:	bfb8      	it	lt
 800a736:	18e4      	addlt	r4, r4, r3
 800a738:	f7ff ffe8 	bl	800a70c <__malloc_lock>
 800a73c:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <_free_r+0x8c>)
 800a73e:	6813      	ldr	r3, [r2, #0]
 800a740:	b933      	cbnz	r3, 800a750 <_free_r+0x2c>
 800a742:	6063      	str	r3, [r4, #4]
 800a744:	6014      	str	r4, [r2, #0]
 800a746:	4628      	mov	r0, r5
 800a748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a74c:	f7ff bfe4 	b.w	800a718 <__malloc_unlock>
 800a750:	42a3      	cmp	r3, r4
 800a752:	d908      	bls.n	800a766 <_free_r+0x42>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	1821      	adds	r1, r4, r0
 800a758:	428b      	cmp	r3, r1
 800a75a:	bf01      	itttt	eq
 800a75c:	6819      	ldreq	r1, [r3, #0]
 800a75e:	685b      	ldreq	r3, [r3, #4]
 800a760:	1809      	addeq	r1, r1, r0
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	e7ed      	b.n	800a742 <_free_r+0x1e>
 800a766:	461a      	mov	r2, r3
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	b10b      	cbz	r3, 800a770 <_free_r+0x4c>
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	d9fa      	bls.n	800a766 <_free_r+0x42>
 800a770:	6811      	ldr	r1, [r2, #0]
 800a772:	1850      	adds	r0, r2, r1
 800a774:	42a0      	cmp	r0, r4
 800a776:	d10b      	bne.n	800a790 <_free_r+0x6c>
 800a778:	6820      	ldr	r0, [r4, #0]
 800a77a:	4401      	add	r1, r0
 800a77c:	1850      	adds	r0, r2, r1
 800a77e:	4283      	cmp	r3, r0
 800a780:	6011      	str	r1, [r2, #0]
 800a782:	d1e0      	bne.n	800a746 <_free_r+0x22>
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	4401      	add	r1, r0
 800a78a:	6011      	str	r1, [r2, #0]
 800a78c:	6053      	str	r3, [r2, #4]
 800a78e:	e7da      	b.n	800a746 <_free_r+0x22>
 800a790:	d902      	bls.n	800a798 <_free_r+0x74>
 800a792:	230c      	movs	r3, #12
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	e7d6      	b.n	800a746 <_free_r+0x22>
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	1821      	adds	r1, r4, r0
 800a79c:	428b      	cmp	r3, r1
 800a79e:	bf01      	itttt	eq
 800a7a0:	6819      	ldreq	r1, [r3, #0]
 800a7a2:	685b      	ldreq	r3, [r3, #4]
 800a7a4:	1809      	addeq	r1, r1, r0
 800a7a6:	6021      	streq	r1, [r4, #0]
 800a7a8:	6063      	str	r3, [r4, #4]
 800a7aa:	6054      	str	r4, [r2, #4]
 800a7ac:	e7cb      	b.n	800a746 <_free_r+0x22>
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20000668 	.word	0x20000668

0800a7b4 <_read_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4d05      	ldr	r5, [pc, #20]	; (800a7d4 <_read_r+0x20>)
 800a7c0:	602a      	str	r2, [r5, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f7f6 f9b6 	bl	8000b34 <_read>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_read_r+0x1e>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_read_r+0x1e>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20000670 	.word	0x20000670

0800a7d8 <_fstat_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4d06      	ldr	r5, [pc, #24]	; (800a7f8 <_fstat_r+0x20>)
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	602b      	str	r3, [r5, #0]
 800a7e6:	f7f6 f9e9 	bl	8000bbc <_fstat>
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	d102      	bne.n	800a7f4 <_fstat_r+0x1c>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	b103      	cbz	r3, 800a7f4 <_fstat_r+0x1c>
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20000670 	.word	0x20000670

0800a7fc <_isatty_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	2300      	movs	r3, #0
 800a800:	4d05      	ldr	r5, [pc, #20]	; (800a818 <_isatty_r+0x1c>)
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7f6 f9e7 	bl	8000bda <_isatty>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_isatty_r+0x1a>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	b103      	cbz	r3, 800a816 <_isatty_r+0x1a>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	20000670 	.word	0x20000670

0800a81c <_init>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	bf00      	nop
 800a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a822:	bc08      	pop	{r3}
 800a824:	469e      	mov	lr, r3
 800a826:	4770      	bx	lr

0800a828 <_fini>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	bf00      	nop
 800a82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82e:	bc08      	pop	{r3}
 800a830:	469e      	mov	lr, r3
 800a832:	4770      	bx	lr
